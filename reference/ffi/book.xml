<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 46a9cdd2dbef4ec89bf65fad9930e2feb78bbb98 Maintainer: mowangjuanzi Status: ready -->
<!-- CREDITS: Luffy -->
<book xml:id="book.ffi" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <?phpdoc extension-membership="bundled" ?>
 <title>外部函数接口</title>
 <titleabbrev>FFI</titleabbrev>

 <preface xml:id="intro.ffi">
  &reftitle.intro;
  <para>
   此扩展允许在纯 PHP 中加载共享库（<filename>.DLL</filename> 或
   <filename>.so</filename>）、调用 C 函数、访问 C
   数据结构，而无需深入了解 Zend 扩展 API，也无需学习第三方“中间”语言。公共 API
   是使用包含几个静态方法（有几个可以动态调用）和对象重载方法（执行与 C 数据的实际交互）的 <classname>FFI</classname> 类实现的。
  </para>
  <caution>
   <para>
    FFI 有危险，因为它允许在系统上进行底层交互。FFI 扩展应该仅供有 C 和使用 C API
    经验的开发者使用。为了最大限度降低风险，<link linkend="ini.ffi.enable">ffi.enable</link> &php.ini; 指令会限制 FFI API
    的使用。
   </para>
  </caution>
  <note>
   <para>
    FFI 扩展不会提供讨厌的过时 PHP 扩展 API，它仅仅是提供了用于 C 函数和数据结构的特殊接口。
   </para>
  </note>
  <tip>
   <para>
    目前，访问 FFI 数据结构比访问原生 PHP 数组和对象慢很多（大约 2 倍）。
    因此使用 FFI 扩展来提高速度没有意义；减少内存消耗可能有意义。
   </para>
  </tip>
 </preface>

 &reference.ffi.setup;
 &reference.ffi.examples;
 &reference.ffi.ffi;
 &reference.ffi.ffi.cdata;
 &reference.ffi.ffi.ctype;
 &reference.ffi.ffi.exception;
 &reference.ffi.ffi.parserexception;
</book>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
