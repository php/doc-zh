<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 2a8b2f1c53edae923b5bb196183e476e5cca46a3 Maintainer: mowangjuanzi Status: ready -->
<!-- CREDITS: Luffy -->
<phpdoc:classref xml:id="class.ffi" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>C 代码和数据的主接口</title>
 <titleabbrev>FFI</titleabbrev>

 <partintro>

<!-- {{{ FFI intro -->
  <section xml:id="ffi.intro">
   &reftitle.intro;
   <para>
    通过工厂方法 <methodname>FFI::cdef</methodname>、<methodname>FFI::load</methodname> 或 <methodname>FFI::scope</methodname>
    创建该类的对象。定义的 C 变量作为有效的 FFI 实例属性，定义的 C 函数作为有效的 FFI 实例方法。声明的 C 类型可以用于
    <methodname>FFI::new</methodname> 和 <methodname>FFI::type</methodname> 创建新的 C 数据结构。
   </para>
   <para>
    FFI 定义解析和共享库加载可能需要较长时间。在 Web 环境中，每个 HTTP 请求都进行这些操作是没有意义的。然而，在 PHP 启动时预加载
    FFI 定义和库，并在需要时实例化 FFI 对象是可能的。header 文件可以使用特殊的 <literal>FFI_SCOPE</literal> 定义进行扩展（例如
    <code>#define FFI_SCOPE "foo"</code>），然后在预加载期间由 <methodname>FFI::load</methodname> 加载。这将创建持久绑定，将通过
    <methodname>FFI::scope</methodname> 在所有后续请求中可用。有关详细信息，请参阅<link linkend="ffi.examples-complete">完整的 PHP/FFI/preloading 示例</link>。
   </para>
   <para>
    可以将多个 C header 文件预加载到同一作用域中。
   </para>
  </section>
<!-- }}} -->

  <section xml:id="ffi.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis class="class">
    <ooclass>
     <modifier>final</modifier>
     <classname>FFI</classname>
    </ooclass>

    <classsynopsisinfo role="comment">&Constants;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="ffi.constants.biggest-alignment">FFI::__BIGGEST_ALIGNMENT__</varname>
    </fieldsynopsis>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.ffi')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='FFI'])">
     <xi:fallback/>
    </xi:include>
   </classsynopsis>
<!-- }}} -->

  </section>

  <section xml:id="class.ffi.constants">
   &reftitle.constants;
   <variablelist>
    <varlistentry xml:id="ffi.constants.biggest-alignment">
     <term><constant>FFI::__BIGGEST_ALIGNMENT__</constant></term>
     <listitem>
      <para/>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
 </partintro>

 &reference.ffi.entities.ffi;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
