<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 3d38c9a1ce92c93fdf8c43f067c7ae7b4ad73885 Maintainer: HonestQiao Status: ready -->
<!-- CREDITS: mowangjuanzi, Luffy -->
<!-- splitted from ./en/functions/strings.xml, last change in rev 1.2 -->
<refentry xml:id="function.trim" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>trim</refname> 
  <refpurpose>去除字符串首尾处的空白字符（或者其他字符）</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>trim</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>characters</parameter><initializer>" \n\r\t\v\x00"</initializer></methodparam>
  </methodsynopsis>
  <para>
   此函数返回字符串 <parameter>string</parameter> 去除首尾空白字符后的结果。如果不指定第二个参数，<function>trim</function> 将去除这些字符：
   <!-- sorted by importance. Printed 3 times: trim, ltrim, rtrim -->
   <itemizedlist>
    <listitem>
     <simpara>
      " " (<acronym>ASCII</acronym> <literal>32</literal> 
      (<literal>0x20</literal>))，普通空格符。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      "\t" (<acronym>ASCII</acronym> <literal>9</literal> 
      (<literal>0x09</literal>))，制表符。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      "\n" (<acronym>ASCII</acronym> <literal>10</literal> 
      (<literal>0x0A</literal>))，换行符。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      "\r" (<acronym>ASCII</acronym> <literal>13</literal> 
      (<literal>0x0D</literal>))，回车符。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      "\0" (<acronym>ASCII</acronym> <literal>0</literal> 
      (<literal>0x00</literal>))，空字节符。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      "\v" (<acronym>ASCII</acronym> <literal>11</literal> 
      (<literal>0x0B</literal>))，垂直制表符。
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       待处理的<type>字符串</type>。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>characters</parameter></term>
     <listitem>
      <para>
       可选参数，过滤字符也可由 <parameter>characters</parameter> 参数指定。
       一般要列出所有希望过滤的字符，也可以使用 “<literal>..</literal>” 列出一个字符范围。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   过滤后的字符串。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>trim</function> 使用示例</title>
    <programlisting role="php">
<![CDATA[
<?php

$text   = "\t\tThese are a few words :) ...  ";
$binary = "\x09Example string\x0A";
$hello  = "Hello World";
var_dump($text, $binary, $hello);

print "\n";

$trimmed = trim($text);
var_dump($trimmed);

$trimmed = trim($text, " \t.");
var_dump($trimmed);

$trimmed = trim($hello, "Hdle");
var_dump($trimmed);

// 清除 $binary 首位的 ASCII 控制字符
// （包括 0-31）
$clean = trim($binary, "\x00..\x1F");
var_dump($clean);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(32) "        These are a few words :) ...  "
string(16) "    Example string
"
string(11) "Hello World"

string(28) "These are a few words :) ..."
string(24) "These are a few words :)"
string(5) "o Wor"
string(14) "Example string"
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>使用 <function>trim</function> 清理数组值</title>
    <programlisting role="php">
<![CDATA[
<?php
function trim_value(&$value) 
{ 
    $value = trim($value); 
}

$fruit = array('apple','banana ', ' cranberry ');
var_dump($fruit);

array_walk($fruit, 'trim_value');
var_dump($fruit);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  string(5) "apple"
  [1]=>
  string(7) "banana "
  [2]=>
  string(11) " cranberry "
}
array(3) {
  [0]=>
  string(5) "apple"
  [1]=>
  string(6) "banana"
  [2]=>
  string(9) "cranberry"
}

]]>
    </screen>
   </example>
  </para>
 </refsect1>


 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <title>可能的问题：删除中间字符</title>
   <para>
    因为 <function>trim</function>
    从字符串的开始和末尾修剪字符。所以中间是否删除字符可能会造成混淆。<literal>trim('abc', 'bad')</literal>
    移除了“a”和“b”，是因为修剪了“a”之后，“b”移动到了开头，所以也被修剪了。所以这就是为什么能正常工作而
    <literal>trim('abc', 'b')</literal> 看起来没有的原因。
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ltrim</function></member>
    <member><function>rtrim</function></member>
    <member><function>str_replace</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
