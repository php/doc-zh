<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 7a3899eea90f3df8dcfe8fd350900162f3490bed Maintainer: daijie Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="function.print">
 <refnamediv>
  <refname>print</refname>
  <refpurpose>输出字符串</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>print</methodname>
   <methodparam><type>string</type><parameter>expression</parameter></methodparam>
  </methodsynopsis>
  <para>
   输出 <parameter>expression</parameter>。
  </para>
  <para>
   <literal>print</literal> 不是函数而是语言结构。它的参数是跟在 <literal>print</literal>
   关键字后面的表达式，并且不用括号分割。
  </para>
  <para>
   和 <function>echo</function> 最主要的区别是 <literal>print</literal>
   仅接受一个参数，并始终返回 <literal>1</literal>。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>expression</parameter></term>
     <listitem>
      <para>
       要输出的表达式。即使启用 <link linkend="language.types.declarations.strict"><literal>strict_types</literal>
       指令</link>，非字符串也会强制转换为字符串。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   总是返回 <literal>1</literal>。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>print</function> 示例</title>
    <programlisting role="php">
<![CDATA[
<?php
print "print does not require parentheses.";

// 不会新增新行或者空格；下面会在一行中输出“helloworld”
print "hello";
print "world";

print "This string spans
multiple lines. The newlines will be
output as well";

print "This string spans\nmultiple lines. The newlines will be\noutput as well.";

// 参数可以是任何生成字符串的表达式
$foo = "example";
print "foo is $foo"; // foo is example

$fruits = ["lemon", "orange", "banana"];
print implode(" and ", $fruits); // lemon and orange and banana

// 即使使用了 declare(strict_types=1)，非字符串表达式也会强制转换为字符串
print 6 * 7; // 42

// 因为 print 有返回值，所以可以在如下表达式中使用
// 以下输出“hello world”
if ( print "hello" ) {
    echo " world";
}

// 以下输出“true”
( 1 === 1 ) ? print 'true' : print 'false';
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;

  <note>
   <title>使用括号</title>
   <para>
    用括号括住 <literal>print</literal>
    的参数并不会引发语法错误，而且会产生看起来像是普通函数调用的语法。然而，这可能会产生误导，因为括号实际上是输出表达式的一部分，而非
    <literal>print</literal> 语法本身的一部分。
   </para>
   <para>
    <example>
     <title/>
     <programlisting role="php">
<![CDATA[
<?php
print "hello";
// 输出“hello”

print("hello");
// 也会输出“hello”，因为 ("hello") 是有效的表达式

print(1 + 2) * 3;
// 输出“9”；会首先对括号内的 1+2 进行求值，然后是 3*3
// print 语句会将整个表达式视为一个参数

if ( print("hello") && false ) {
    print " - inside if";
}
else {
    print " - inside else";
}
// 输出“ - inside if”
// 首先对表达式 ("hello") && false 求值， false
// 强制转换为空字符串“”且打印 print 
// 结构，然后返回 1，所以运行 if 块中代码
?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    当在大表达式中使用 <literal>print</literal> 时，需要将关键字及其参数放在括号中以便得出预期的结果：
   </para>

   <para>
    <example>
     <title/>
     <programlisting role="php">
<![CDATA[
<?php
if ( (print "hello") && false ) {
    print " - inside if";
}
else {
    print " - inside else";
}
// 输出“hello - inside else”
// 跟上个示例不同，首先对表达式 (print "hello") 求值
// 输出“hello”之后，print 返回 1
// 由于 1 && false 为 false，因此运行 else 块中代码

print "hello " && print "world";
// 输出“world1”；首先对 print "world" 求值，
// 然后表达式 "hello " && 1 传递给左侧的 print

(print "hello ") && (print "world");
// 输出“hello world”；括号强制 print 表达式
// 在 && 之前求值
?>
]]>
     </programlisting>
    </example>
   </para>
  </note>

  &note.language-construct;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>echo</function></member>
    <member><function>printf</function></member>
    <member><function>flush</function></member>
    <member><link linkend="language.types.string">指定字面字符串的方式</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
