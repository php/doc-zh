<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: a484d5d2bbad7e385a8864370b5280c4e05add8c Maintainer: daijie Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<refentry xml:id="function.levenshtein" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>levenshtein</refname>
  <refpurpose>计算两个字符串之间的 Levenshtein 距离</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>levenshtein</methodname>
   <methodparam><type>string</type><parameter>string1</parameter></methodparam>
   <methodparam><type>string</type><parameter>string2</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>insertion_cost</parameter><initializer>1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>replacement_cost</parameter><initializer>1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>deletion_cost</parameter><initializer>1</initializer></methodparam>
  </methodsynopsis>
  <para>
   Levenshtein 距离，是指两个字串之间，通过替换、插入、删除等操作将字符串 <parameter>string1</parameter> 转换成 <parameter>string2</parameter>
   所需要操作的最少字符数量。该算法的复杂度是 <literal>O(m*n)</literal>，其中 <literal>n</literal> 和 <literal>m</literal> 分别是
   <parameter>string1</parameter> 和 <parameter>string2</parameter> 的长度 （当和算法复杂度为 <literal>O(max(n,m)**3)</literal>
   的 <function>similar_text</function> 相比时，此函数还是相当不错的，尽管仍然很耗时）。
  </para>
  <para>
   如果 <parameter>insertion_cost</parameter>、<parameter>replacement_cost</parameter> 和/或
   <parameter>deletion_cost</parameter> 不等于 <literal>1</literal>，则算法选择应用于最简便的算法。如果
   <code>$insertion_cost + $deletion_cost &lt; $replacement_cost</code>，则不会替换，而是插入和删除。
  </para>
 </refsect1>

<refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string1</parameter></term>
     <listitem>
      <para>
       求编辑距离中的其中一个字符串。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>string2</parameter></term>
     <listitem>
      <para>
       求编辑距离中的另一个字符串。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>insertion_cost</parameter></term>
     <listitem>
      <para>
       定义插入次数。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>replacement_cost</parameter></term>
     <listitem>
      <para>
       定义替换次数。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>deletion_cost</parameter></term>
     <listitem>
      <para>
       定义删除次数。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   此函数返回两个字符串参数之间的 Levenshtein 距离。
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       在此版本之前，必须使用两个或者五个参数调用 <function>levenshtein</function>。
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       在此版本之前，如果某个参数字符串的长度超过 255 个字符，则 <function>levenshtein</function> 将会返回 <literal>-1</literal>。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>levenshtein</function> 例子：</title>
    <programlisting role="php">
<![CDATA[
<?php
// 输入拼写错误的单词
$input = 'carrrot';

// 要检查的单词数组
$words  = array('apple','pineapple','banana','orange',
                'radish','carrot','pea','bean','potato');

// 目前没有找到最短距离
$shortest = -1;

// 遍历单词来找到最接近的
foreach ($words as $word) {

    // 计算输入单词与当前单词的距离
    $lev = levenshtein($input, $word);

    // 检查完全的匹配
    if ($lev == 0) {

        // 最接近的单词是这个（完全匹配）
        $closest = $word;
        $shortest = 0;

        // 退出循环；我们已经找到一个完全的匹配
        break;
    }

    // 如果此次距离比上次找到的要短
    // 或者还没找到接近的单词
    if ($lev <= $shortest || $shortest < 0) {
        // 设置最接近的匹配以及它的最短距离
        $closest  = $word;
        $shortest = $lev;
    }
}

echo "Input word: $input\n";
if ($shortest == 0) {
    echo "Exact match found: $closest\n";
} else {
    echo "Did you mean: $closest?\n";
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Input word: carrrot
Did you mean: carrot?
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>soundex</function></member>
    <member><function>similar_text</function></member>
    <member><function>metaphone</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
