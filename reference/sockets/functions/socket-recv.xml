<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 14dc7c47365f2b71f6c907a5ba5bccf42534d5a9 Maintainer: daijie Status: ready -->
<!-- CREDITS: her-cat -->
<refentry xml:id="function.socket-recv" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>socket_recv</refname>
  <refpurpose>从已连接的 socket 接收数据</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>false</type></type><methodname>socket_recv</methodname>
   <methodparam><type>Socket</type><parameter>socket</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>null</type></type><parameter role="reference">data</parameter></methodparam>
   <methodparam><type>int</type><parameter>length</parameter></methodparam>
   <methodparam><type>int</type><parameter>flags</parameter></methodparam>
  </methodsynopsis>
  <para>
   函数 <function>socket_recv</function> 从 <parameter>socket</parameter> 中接受长度为
   <parameter>length</parameter> 字节的数据，并保存在 <parameter>data</parameter> 中。
   <function>socket_recv</function> 用于从已连接的 socket 中接收数据。除此之外，可以设定一个或多个 flags
   来控制函数的具体行为。
  </para>
  <para>
   <parameter>data</parameter> 是传引用的，因此必须以变量的形式，指定到参数列表。从
   <parameter>socket</parameter> 中接收到的数据将会保存在 <parameter>data</parameter> 中。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>socket</parameter></term>
     <listitem>
      <para>
       参数 <parameter>socket</parameter> 必须是一个由 <function>socket_create</function>
       创建的 <classname>Socket</classname> 实例。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       从 socket 中获取的数据将被保存在由 <parameter>data</parameter> 指定的变量中。
       如果有错误发生，如链接被重置，数据不可用等等， <parameter>data</parameter> 将被设为 &null;。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       长度最多为 <parameter>length</parameter> 字节的数据将被接收。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       <parameter>flags</parameter> 的值可以为下列任意 flag 的组合。使用按位或运算符(<literal>|</literal>)来
       组合不同的 flag。
      </para>
      
      <table>
       <title>可用的 <parameter>flags</parameter> 值</title>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>Flag</entry>
          <entry>描述</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><constant>MSG_OOB</constant></entry>
          <entry>
           处理超出边界的数据
          </entry>
         </row>
         <row>
          <entry><constant>MSG_PEEK</constant></entry>
          <entry>
           从接受队列的起始位置接收数据，但不将他们从接受队列中移除。
          </entry>
         </row>
         <row>
          <entry><constant>MSG_WAITALL</constant></entry>
          <entry>
           在接收到至少 <parameter>length</parameter> 字节的数据之前，造成一个阻塞，并暂停脚本运行（block）。但是，
           如果接收到中断信号，或远程服务器断开连接，该函数将返回少于 <parameter>length</parameter> 字节的数据。
          </entry>
         </row>
         <row>
          <entry><constant>MSG_DONTWAIT</constant></entry>
          <entry>
           如果指定了该 flag，函数将不会造成阻塞，即使在全局设置中指定了阻塞设置。
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>    
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>socket_recv</function> 返回一个数字，表示接收到的字节数。如果发生了错误，则返回 &false;
   错误码可使用 <function>socket_last_error</function> 接收。也可使用函数 <function>socket_strerror</function> 
   来取得关于错误的文字描述。
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     &sockets.changelog.socket-param;
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>socket_recv</function> 范例</title>
    <para>
     该范例简单地使用 <function>socket_recv</function> 重写了 <xref linkend="sockets.examples"/> 中的
     第一个例子。
    </para>
    <programlisting role="php">
<![CDATA[
<?php
error_reporting(E_ALL);

echo "<h2>TCP/IP Connection</h2>\n";

/* Get the port for the WWW service. */
$service_port = getservbyname('www', 'tcp');

/* Get the IP address for the target host. */
$address = gethostbyname('www.example.com');

/* Create a TCP/IP socket. */
$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
if ($socket === false) {
    echo "socket_create() failed: reason: " . socket_strerror(socket_last_error()) . "\n";
} else {
    echo "OK.\n";
}

echo "Attempting to connect to '$address' on port '$service_port'...";
$result = socket_connect($socket, $address, $service_port);
if ($result === false) {
    echo "socket_connect() failed.\nReason: ($result) " . socket_strerror(socket_last_error($socket)) . "\n";
} else {
    echo "OK.\n";
}

$in = "HEAD / HTTP/1.1\r\n";
$in .= "Host: www.example.com\r\n";
$in .= "Connection: Close\r\n\r\n";
$out = '';

echo "Sending HTTP HEAD request...";
socket_write($socket, $in, strlen($in));
echo "OK.\n";

echo "Reading response:\n\n";
$buf = 'This is my buffer.';
if (false !== ($bytes = socket_recv($socket, $buf, 2048, MSG_WAITALL))) {
    echo "Read $bytes bytes from socket_recv(). Closing socket...";
} else {
    echo "socket_recv() failed; reason: " . socket_strerror(socket_last_error($socket)) . "\n";
}
socket_close($socket);

echo $buf . "\n";
echo "OK.\n\n";
?>
]]>
    </programlisting>
    <para>
     The above example will produce something like:
    </para>
    <screen>
<![CDATA[
<h2>TCP/IP Connection</h2>
OK.
Attempting to connect to '208.77.188.166' on port '80'...OK.
Sending HTTP HEAD request...OK.
Reading response:

Read 123 bytes from socket_recv(). Closing socket...HTTP/1.1 200 OK
Date: Mon, 14 Sep 2009 08:56:36 GMT
Server: Apache/2.2.3 (Red Hat)
Last-Modified: Tue, 15 Nov 2005 13:24:10 GMT
ETag: "b80f4-1b6-80bfd280"
Accept-Ranges: bytes
Content-Length: 438
Connection: close
Content-Type: text/html; charset=UTF-8

OK.
]]>
    </screen>
   </example>
  </para>
 </refsect1>
                     
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
