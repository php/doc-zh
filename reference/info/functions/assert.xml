<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 59af09939ab6e191c9836ea3b33b934e1a99a263 Maintainer: daijie Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<refentry xml:id="function.assert" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>assert</refname>
  <refpurpose>检查断言是否为 &false;</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <para>PHP 5 和 7</para>
  <methodsynopsis>
   <type>bool</type><methodname>assert</methodname>
   <methodparam><type>mixed</type><parameter>assertion</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>description</parameter></methodparam>
  </methodsynopsis>
  <para>PHP 7</para>
  <methodsynopsis>
   <type>bool</type><methodname>assert</methodname>
   <methodparam><type>mixed</type><parameter>assertion</parameter></methodparam>
   <methodparam choice="opt"><type>Throwable</type><parameter>exception</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>assert</function> 会检查指定的 <parameter>assertion</parameter>
   并在结果为 &false; 时采取适当的行动。 
  </para>
  <refsect2>
   <title>传统断言（PHP 5 和 7）</title>
   <para>
    如果 <parameter>assertion</parameter> 是字符串，它将会被 <function>assert</function>
    当做 PHP 代码来执行。如果传入了 boolean 的条件作为
    <parameter>assertion</parameter>，这个条件将不会显示为断言函数的参数；在调用你定义的
    <function>assert_options</function> 处理函数时，条件会转换为字符串，而布尔值 &false;
    会被转换成空字符串。
   </para>
   <para>
    断言这个功能应该只被用来调试。应该用于完整性检查时测试条件是否始终应该为
    &true;，来指示某些程序错误，或者检查具体功能的存在（类似扩展函数或特定的系统限制和功能）。
   </para>
   <para>
    断言不应该用于普通运行时操作，类似输入参数的检查。作为一个经验法则，在断言禁用时代码也应该能够正确地运行。
   </para>
   <para>
    <function>assert</function> 的行为可以通过 <function>assert_options</function>
    来配置，或者手册页面上描述的 .ini 设置。
   </para>
   <para>
    <function>assert_options</function> 和/或 <constant>ASSERT_CALLBACK</constant>
    配置指令允许设置回调函数来处理失败的断言。
   </para>
   <para>
    <function>assert</function> 回调函数在构建自动测试套件的时候尤其有用，因为它们允许你简易地捕获传入断言的代码，并包含断言的位置信息。
    当信息能够被其他方法捕获，使用断言可以让它更快更方便！
   </para>
   <para>
    回调函数应该接受三个参数。第一个参数包括了断言失败所在的文件。第二个参数包含了断言失败所在的行号，第三个参数包含了失败的表达式（如有任意
    &#x2014; 字面值例如 1 或者 "two" 将不会传递到这个参数）。PHP 5.4.8 及更高版本的用户也可以提供第四个可选参数，如果设置了，用于将
    <parameter>description</parameter> 指定到 <function>assert</function>。
   </para>
  </refsect2>
  <refsect2 xml:id="function.assert.expectations">
   <title>Expectations（仅 PHP 7）</title>
   <para>
    <function>assert</function> 是 PHP 7 中的语言结构，允许定义
    expectation：断言在开发和测试环境中生效，经过优化，在生产环境中零成本。
   </para>
   <para>
    出于向后兼容的原因，<function>assert_options</function> 仍然可以控制如上所述的行为。但仅限 PHP
    7 的代码应使用两个新的配置指令来控制 <function>assert</function> 的行为，而不是调用
    <function>assert_options</function>。
   </para>
   <table>
    <title>
     用于 <function>assert</function> 的 PHP 7 控制指令
    </title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>指令</entry>
       <entry>默认值</entry>
       <entry>可能值</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <link linkend="ini.zend.assertions">zend.assertions</link>
       </entry>
       <entry><literal>1</literal></entry>
       <entry>
        <simplelist>
         <member>
          <literal>1</literal>：生成并执行代码（开发模式）
         </member>
         <member>
          <!-- TODO: look up the RFC to figure out why you'd want this -->
          <literal>0</literal>：生成代码但在运行时跳转
         </member>
         <member>
          <literal>-1</literal>：生成代码但在运行时跳转（生产模式）
         </member>
        </simplelist>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="ini.assert.exception">assert.exception</link>
       </entry>
       <entry><literal>0</literal></entry>
       <entry>
        <simplelist>
         <member>
          <literal>1</literal>：断言失败时抛出，抛出提供给 <parameter>exception</parameter>
          的对象，或未提供 <parameter>exception</parameter> 时抛出新的
          <classname>AssertionError</classname> 对象
         </member>
         <member>
          <literal>0</literal>：如上所述使用/生成
          <classname>Throwable</classname>，但仅仅是基于该对象生成警告而不是抛出（与
          PHP 5 行为兼容）
         </member>
        </simplelist>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </refsect2>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>assertion</parameter></term>
     <listitem>
      <para>
       断言。在 PHP 5 中，不是要求值的 <type>string</type> 就是要测试的 <type>bool</type>。自
       PHP 7 起，可以是任何带返回值的表达式，运行后的结果用于表示断言成功还是失败。
      </para>

      <warning>
       <para>
        自 PHP 7.2.0 起<emphasis>弃用</emphasis> <type>string</type> 作为
        <parameter>assertion</parameter>，自 PHP 8.0.0 起删除。
       </para>
      </warning>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>description</parameter></term>
     <listitem>
      <para>
       如果 <parameter>assertion</parameter> 失败了，选项 description 将会包括在失败信息里。自 PHP 7
       起，如果没有提供 description，默认 description 将会提供调用 <function>assert</function> 的源代码。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>exception</parameter></term>
     <listitem>
      <para>
       在 PHP 7 中，第二个参数可以是 <classname>Throwable</classname> 对象而不是 descriptive
       <type>string</type>，如果断言失败且启用 <link linkend="ini.assert.exception">assert.exception</link>
       配置指令，会抛出该对象。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   assertion 是 false 则返回 &false;，否则是 &true;。
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
         <function>assert</function> 将不再对字符串参数求值，而是跟其他参数一样对待。应该使用 <code>assert($a == $b)</code>
         替代 <code>assert('$a == $b')</code>。已移除 <literal>assert.quiet_eval</literal> &php.ini; 指令和
         <constant>ASSERT_QUIET_EVAL</constant> 常量，因为它们不再有任何作用。
       </entry>
      </row>
      <row>
       <entry>8.0.0</entry>
       <entry>
        不再允许在命名空间中声明叫做 <literal>assert()</literal> 的函数，并发出 <constant>E_COMPILE_ERROR</constant>。
       </entry>
      </row>
      <row>
       <entry>7.3.0</entry>
       <entry>
        弃用在命名空间中声明 <literal>assert()</literal> 函数。这样声明会发出 <constant>E_DEPRECATED</constant>。
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        弃用使用 <type>string</type> 作为 <parameter>assertion</parameter>。当 <link linkend="ini.assert.active">assert.active</link>
        和 <link linkend="ini.zend.assertions">zend.assertions</link> 都设为 <literal>1</literal> 时，现在会发出
        <constant>E_DEPRECATED</constant> 通知。
       </entry>
      </row>
      <row>
       <entry>7.0.0</entry>
       <entry>
        <function>assert</function> 现在是语言结构而不是函数。<parameter>assertion</parameter> 现在可以是表达式。第二个参数现在解释为
        <parameter>exception</parameter>（如果给出了 <classname>Throwable</classname>），或者解释为自 PHP 5.4.8 开始支持的
        <parameter>description</parameter>。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <refsect2>
   <title>传统断言（PHP 5 和 7）</title>
   <para>
    <example>
     <title>使用自定义处理程序处理失败的断言</title>
     <programlisting role="php">
<![CDATA[
<?php
// 激活断言，并设置它为 quiet
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

//创建处理函数
function my_assert_handler($file, $line, $code)
{
    echo "<hr>Assertion Failed:
        File '$file'<br />
        Line '$line'<br />
        Code '$code'<br /><hr />";
}

// 设置回调函数
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// 让一则断言失败
assert('mysql_query("")');
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>使用自定义处理器打印描述信息</title>
     <programlisting role="php">
<![CDATA[
<?php
// 激活断言，并设置它为 quiet
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// 创建处理函数
function my_assert_handler($file, $line, $code, $desc = null)
{
    echo "Assertion failed at $file:$line: $code";
    if ($desc) {
        echo ": $desc";
    }
    echo "\n";
}

// 设置回调
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// Make an assertion that should fail
assert('2 < 1');
assert('2 < 1', 'Two is less than one');
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
 <![CDATA[
 Assertion failed at test.php:21: 2 < 1
 Assertion failed at test.php:22: 2 < 1: Two is less than one
 ]]>
     </screen>
    </example>
   </para>
  </refsect2>
  <refsect2>
   <title>Expectations (PHP 7 only)</title>
   <example>
    <title>不带自定义异常的 Expectations</title>
    <programlisting role="php">
<![CDATA[
<?php
assert(true == false);
echo 'Hi!';
?>
]]>
    </programlisting>
    <para>
     <link linkend="ini.zend.assertions">zend.assertions</link> 设为
     0，以上示例会输出：
    </para>
    <screen>
<![CDATA[
Hi!
]]>
    </screen>
    <para>
     <link linkend="ini.zend.assertions">zend.assertions</link> 设为
     1，<link linkend="ini.assert.exception">assert.exception</link> 设为
     0，以上示例会输出：
    </para>
    <screen>
<![CDATA[
Warning: assert(): assert(true == false) failed in - on line 2
Hi!
]]>
    </screen>
    <para>
     <link linkend="ini.zend.assertions">zend.assertions</link> 和
     <link linkend="ini.assert.exception">assert.exception</link> 都设为 1，以上示例会输出：
    </para>
    <screen>
<![CDATA[
Fatal error: Uncaught AssertionError: assert(true == false) in -:2
Stack trace:
#0 -(2): assert(false, 'assert(true == ...')
#1 {main}
  thrown in - on line 2
]]>
    </screen>
   </example>
   <example>
    <title>包含自定义异常的 Expectations</title>
    <programlisting role="php">
<![CDATA[
<?php
class CustomError extends AssertionError {}

assert(true == false, new CustomError('True is not false!'));
echo 'Hi!';
?>
]]>
    </programlisting>
    <para>
     <link linkend="ini.zend.assertions">zend.assertions</link> 设为
     0，以上示例会输出：
    </para>
    <screen>
<![CDATA[
Hi!
]]>
    </screen>
    <para>
     <link linkend="ini.zend.assertions">zend.assertions</link> 设为
     1，<link linkend="ini.assert.exception">assert.exception</link> 设为
     0，以上示例会输出：
    </para>
    <screen>
<![CDATA[
Warning: assert(): CustomError: True is not false! in -:4
Stack trace:
#0 {main} failed in - on line 4
Hi!
]]>
    </screen>
    <para>
     <link linkend="ini.zend.assertions">zend.assertions</link> 和
     <link linkend="ini.assert.exception">assert.exception</link> 都设为 1，以上示例会输出：
    </para>
    <screen>
<![CDATA[
Fatal error: Uncaught CustomError: True is not false! in -:4
Stack trace:
#0 {main}
  thrown in - on line 4
]]>
    </screen>
   </example>
  </refsect2>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>assert_options</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
