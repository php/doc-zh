<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 81cff4de7472c88fd3fe7204ed04d0a4d7860aec Maintainer: HonestQiao Status: ready -->
<refentry xml:id="memcache.set" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Memcache::set</refname>
  <refpurpose>存储数据到服务器</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>Memcache::set</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flag</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>expire</parameter></methodparam>
  </methodsynopsis>

  <para>
   <function>Memcache::set</function> 向 <parameter>key</parameter> 存储一个元素值为
   <parameter>var</parameter>。参数 <parameter>expire</parameter> 是以秒为单位的失效时间，
   如果设置为0表明该元素永不过期（但是它可能会因为为了给其他项分配空间而被删除）。如果你希望存储的元素
   经过压缩（使用 zlib），你可以设置 <parameter>flag</parameter> 的值为 <constant>MEMCACHE_COMPRESSED</constant>。
   <note>
    <para>
    谨记：资源类型变量（比如文件或连接）不能被存储在缓存中，因为它们在序列化状态不能被完整描述。
    </para> 
   </note>
   同样你也可以使用函数 <function>memcache_set</function>。
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
      要设置值的 key。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       要存储的值，字符串和数值直接存储，其他类型序列化后存储。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flag</parameter></term>
     <listitem>
      <para>
       使用 <constant>MEMCACHE_COMPRESSED</constant> 指定对值进行压缩（使用 zlib）。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>expire</parameter></term>
     <listitem>
      <para>
       当前写入缓存的数据的失效时间。如果此值设置为0表明此数据永不过期。你可以设置一个 UNIX 时间戳或
       以秒为单位的整数（从当前算起的时间差）来说明此数据的过期时间，但是在后一种设置方式中，不能超过
       2592000 秒（30天）。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>Memcache::set</function> 示例</title>
    <programlisting role="php">
<![CDATA[
<?php
/* procedural API */

/* connect to memcached server */
$memcache_obj = memcache_connect('memcache_host', 11211);

/*
设置 'var_key' 对应存储的值
flag 参数使用 0,值没有经过压缩
失效时间为 30 秒
*/
memcache_set($memcache_obj, 'var_key', 'some variable', 0, 30);

echo memcache_get($memcache_obj, 'var_key');

?>
]]>
    </programlisting>
   </example>
   <example>
    <title><function>Memcache::set</function> 示例</title>
    <programlisting role="php">
<![CDATA[
<?php
/* OO API */

$memcache_obj = new Memcache;

/* connect to memcached server */
$memcache_obj->connect('memcache_host', 11211);

/*
设置'var_key'对应值，使用即时压缩
失效时间为50秒
*/
$memcache_obj->set('var_key', 'some really big variable', MEMCACHE_COMPRESSED, 50);

echo $memcache_obj->get('var_key');

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Memcache::add</function></member>
    <member><function>Memcache::replace</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
