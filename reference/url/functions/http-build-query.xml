<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: a1702b5d45ad950c5f7a077878378a37851a2df6 Maintainer: nio Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<refentry xml:id="function.http-build-query" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>http_build_query</refname>
  <refpurpose>生成 URL-encode 之后的请求字符串</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>http_build_query</methodname>
   <methodparam><type class="union"><type>array</type><type>object</type></type><parameter>data</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>numeric_prefix</parameter><initializer>""</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>arg_separator</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>encoding_type</parameter><initializer><constant>PHP_QUERY_RFC1738</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   使用给出的关联（或下标）数组生成一个经过
   URL-encode 的请求字符串。
  </para>
 </refsect1>
 
  <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       可以是数组或包含属性的对象。
      </para>
      <para>
       如果 <parameter>data</parameter> 是数组，可以是一维结构，也可以是由数组组成的数组（其依次可以包含其它数组）。
      </para>
      <para>
       如果 <parameter>data</parameter> 是一个对象，只有 public 的属性会加入结果。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>numeric_prefix</parameter></term>
     <listitem>
      <para>
       如果在基础数组中使用了数字下标同时给出了该参数，此参数值将会作为基础数组中的数字下标元素的前缀。
      </para>
      <para>
       这是为了让
   PHP 或其它 CGI
   程序在稍后对数据进行解码时获取合法的变量名。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>arg_separator</parameter></term>
     <listitem>
      <para>
       <link linkend="ini.arg-separator.output">arg_separator.output</link> 用于分隔参数，但可以通过指定该参数来覆盖。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>encoding_type</parameter></term>
     <listitem>
      <para>
       默认使用 <constant>PHP_QUERY_RFC1738</constant>。
      </para>
      <para>
       如果 <parameter>encoding_type</parameter> 是 <constant>PHP_QUERY_RFC1738</constant>，则编码将会以
       <link xlink:href="&url.rfc;1738">RFC 1738</link> 标准和 <literal>application/x-www-form-urlencoded</literal>
       媒体类型进行编码，空格会被编码成加号（<literal>+</literal>）。
      </para>
      <para>
       如果 <parameter>encoding_type</parameter> 是 <constant>PHP_QUERY_RFC3986</constant>，将根据
       <link xlink:href="&url.rfc;3986">RFC 3986</link> 编码，空格会被百分号编码（<literal>%20</literal>）。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
  <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   返回一个 URL 编码后的字符串。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>http_build_query</function> 使用示例</title>
   <programlisting role="php">
<![CDATA[
<?php
$data = array(
    'foo' => 'bar',
    'baz' => 'boom',
    'cow' => 'milk',
    'null' => null,
    'php' => 'hypertext processor'
);

echo http_build_query($data) . "\n";
echo http_build_query($data, '', '&amp;');

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
foo=bar&baz=boom&cow=milk&php=hypertext+processor
foo=bar&amp;baz=boom&amp;cow=milk&amp;php=hypertext+processor
]]>
   </screen>
  </example>

  <example>
   <title><function>http_build_query</function> 使用数字下标的元素</title>
   <programlisting role="php">
<![CDATA[
<?php
$data = array('foo', 'bar', 'baz', null, 'boom', 'cow' => 'milk', 'php' => 'hypertext processor');

echo http_build_query($data) . "\n";
echo http_build_query($data, 'myvar_');
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
0=foo&1=bar&2=baz&4=boom&cow=milk&php=hypertext+processor
myvar_0=foo&myvar_1=bar&myvar_2=baz&myvar_4=boom&cow=milk&php=hypertext+processor
]]>
   </screen>
  </example>
  <example>
   <title><function>http_build_query</function> 使用复杂的数组</title>
   <programlisting role="php">
<![CDATA[
<?php
$data = array(
    'user' => array(
        'name' => 'Bob Smith',
        'age'  => 47,
        'sex'  => 'M',
        'dob'  => '5/12/1956'
    ),
    'pastimes' => array('golf', 'opera', 'poker', 'rap'),
    'children' => array(
        'bobby' => array('age'=>12, 'sex'=>'M'),
        'sally' => array('age'=>8, 'sex'=>'F')
    ),
    'CEO'
);

echo http_build_query($data, 'flags_');
?>
]]>
   </programlisting>
   <para>
    这会输出：（为了可读性，字已经换行了）
   </para>
   <screen>
<![CDATA[
user%5Bname%5D=Bob+Smith&user%5Bage%5D=47&user%5Bsex%5D=M&
user%5Bdob%5D=5%2F12%2F1956&pastimes%5B0%5D=golf&pastimes%5B1%5D=opera&
pastimes%5B2%5D=poker&pastimes%5B3%5D=rap&children%5Bbobby%5D%5Bage%5D=12&
children%5Bbobby%5D%5Bsex%5D=M&children%5Bsally%5D%5Bage%5D=8&
children%5Bsally%5D%5Bsex%5D=F&flags_0=CEO
]]>
   </screen>
   <para>
    <note>
     <para>
      只有基础数组中的数字下标元素“CEO”才获取了前缀，其它数字下标元素（如
      pastimes 下的元素）则不需要为了合法的变量名而加上前缀。
     </para>
    </note>
   </para>
  </example>

  <example>
   <title><function>http_build_query</function> 使用对象</title>
   <programlisting role="php">
<![CDATA[
<?php
class parentClass {
    public    $pub      = 'publicParent';
    protected $prot     = 'protectedParent';
    private   $priv     = 'privateParent';
    public    $pub_bar  = null;
    protected $prot_bar = null;
    private   $priv_bar = null;

    public function __construct(){
        $this->pub_bar  = new childClass();
        $this->prot_bar = new childClass();
        $this->priv_bar = new childClass();
    }
}

class childClass {
    public    $pub  = 'publicChild';
    protected $prot = 'protectedChild';
    private   $priv = 'privateChild';
}

$parent = new parentClass();

echo http_build_query($parent);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
pub=publicParent&pub_bar%5Bpub%5D=publicChild
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>parse_str</function></member>
    <member><function>parse_url</function></member>
    <member><function>urlencode</function></member>
    <member><function>array_walk</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
