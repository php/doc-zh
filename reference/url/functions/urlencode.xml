<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 767338231c3e14c7be5399b8e2e0c3b60f7ae8dd Maintainer: HonestQiao Status: ready -->
<!-- CREDITS: mowangjuanzi, Luffy -->
<refentry xml:id="function.urlencode" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>urlencode</refname>
  <refpurpose>编码 URL 字符串</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>urlencode</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
  </methodsynopsis>
  <para>
   此函数便于将字符串编码并将其用于 URL 的请求部分，同时它还便于将变量传递给下一页。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       要编码的字符串。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   返回字符串，此字符串中除了 <literal>-_.</literal> 
   之外的所有非字母数字字符都将被替换成百分号（<literal>%</literal>）后跟两位十六进制数，空格则编码为加号（<literal>+</literal>）。此编码与
   WWW 表单 POST 数据的编码方式是一样的，同时与 <literal>application/x-www-form-urlencoded</literal>
   的媒体类型编码方式一样。由于历史原因，此编码在将空格编码为加号（+）方面与
   <link xlink:href="&url.rfc;3986">RFC3986</link> 编码（参见 <function>rawurlencode</function>）不同。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples; 
  <para>  
   <example>
    <title><function>urlencode</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php
$userinput = 'Data123!@-_ +';
echo "UserInput: $userinput\n";
echo '<a href="mycgi?foo=', urlencode($userinput), '">';
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="html">
<![CDATA[
UserInput: Data123!@-_ +
<a href="mycgi?foo=Data123%21%40-_+%2B">
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>urlencode</function> 与 <function>htmlentities</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php
$foo = 'Data123!@-_ +';
$bar = "Not the same content as $foo";
echo "foo: $foo\n";
echo "bar: $bar\n";
$query_string = 'foo=' . urlencode($foo) . '&bar=' . urlencode($bar);
echo '<a href="mycgi?' . htmlentities($query_string) . '">';
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="html">
<![CDATA[
foo: Data123!@-_ +
bar: Not the same content as Data123!@-_ +
<a href="mycgi?foo=Data123%21%40-_+%2B&amp;bar=Not+the+same+content+as+Data123%21%40-_+%2B">
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    注意：小心与 HTML 实体相匹配的变量。像 &amp;amp、&amp;copy 和 &amp;pound 
    都将被浏览器解析，并使用实际实体替代所期待的变量名。这是明显的混乱，W3C
    已经告诫人们好几年了。参考地址：<link xlink:href="&url.argsep;">&url.argsep;</link>。
   </para>
   <para>
    PHP 通过 arg_separator.ini 指令，支持将参数分割符变成 W3C 
    所建议的分号。不幸的是大多数用户代理并不发送分号分隔符格式的表单数据。较为简单的解决办法是使用
    &amp;amp; 代替 &amp; 作为分隔符。你不需要为此修改 PHP
    的 arg_separator。让它仍为 &amp;，而仅使用 <function>htmlentities</function>
    或 <function>htmlspecialchars</function> 对你的 URL 进行编码。
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>urldecode</function></member>
    <member><function>htmlentities</function></member>
    <member><function>rawurlencode</function></member>
    <member><function>rawurldecode</function></member>
    <member><link xlink:href="&url.rfc;3986">RFC 3986</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
