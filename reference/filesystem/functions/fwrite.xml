<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: bb6247b68128cab1b166b49a3a73a87f40333267 Maintainer: dallas Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<refentry xml:id="function.fwrite" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>fwrite</refname>
  <refpurpose>写入文件（可安全用于二进制文件）</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>false</type></type><methodname>fwrite</methodname>
   <methodparam><type>resource</type><parameter>stream</parameter></methodparam>
   <methodparam><type>string</type><parameter>data</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>length</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <simpara>
   <function>fwrite</function> 把 <parameter>data</parameter> 的内容写入
   文件指针 <parameter>stream</parameter> 处。 
  </simpara>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stream</parameter></term>
     <listitem>
      &fs.file.pointer;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       要写入的字符串。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       如果 <parameter>length</parameter> 是 &integer;，当写入了
       <parameter>length</parameter> 个字节或者写完了 <parameter>string</parameter>
       以后，写入就会停止，看先碰到哪种情况。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <simpara>
   <function>fwrite</function> 返回写入的字符数，&return.falseforfailure;。
  </simpara>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   <function>fwrite</function> 失败时会引发 <constant>E_WARNING</constant>。
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       现在 <parameter>length</parameter> 可以为 null。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>简单的 <function>fwrite</function> 示例</title>
    <programlisting role="php">
<![CDATA[
<?php
$filename = 'test.txt';
$somecontent = "Add this to the file\n";

// 首先确认文件存在且可写。
if (is_writable($filename)) {

    // 在示例中，使用追加模式打开 $filename。
    // 文件指针应该在文件的末尾，
    // 那就是使用 fwrite() 写入 $somecontent 的地方。
    if (!$fp = fopen($filename, 'a')) {
         echo "Cannot open file ($filename)";
         exit;
    }

    // 将 $somecontent 写入到打开的文件。
    if (fwrite($fp, $somecontent) === FALSE) {
        echo "Cannot write to file ($filename)";
        exit;
    }

    echo "Success, wrote ($somecontent) to file ($filename)";

    fclose($fp);

} else {
    echo "The file $filename is not writable";
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Writing to a network stream may end before the whole string is written.
    Return value of <function>fwrite</function> may be checked:
    <programlisting role="php">
<![CDATA[
<?php
function fwrite_stream($fp, $string) {
    for ($written = 0; $written < strlen($string); $written += $fwrite) {
        $fwrite = fwrite($fp, substr($string, $written));
        if ($fwrite === false) {
            return $written;
        }
    }
    return $written;
}
?>
]]>
    </programlisting>
   </para>
  </note>
  
  <note>
   <para>
    在区分二进制文件和文本文件的系统上（如 Windows）
    打开文件时，<function>fopen</function> 函数的 mode 参数要加上 'b'。
   </para>
  </note>
  <note>
   <para>
    如果 <parameter>stream</parameter> 是 <function>fopen</function>
    追加模式，<function>fwrite</function> 是原子操作（unless the size of
    <parameter>data</parameter> exceeds the filesystem's block size, on some
    platforms, and as long as the file is on a local filesystem）。也就是说，在调用
    <function>fwrite</function> 之前不需要 <function>flock</function>
    资源；所有的数据都将会不间断写入。
   </para>
  </note>
    <note>
   <para>
    如果向文件指针写入两次，然后数据将追加到文件内容的末尾：
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('data.txt', 'w');
fwrite($fp, '1');
fwrite($fp, '23');
fclose($fp);

// “data.txt”的内容是 123 而不是 23！
?>
]]>
    </programlisting>
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>fread</function></member>
    <member><function>fopen</function></member>
    <member><function>fsockopen</function></member>
    <member><function>popen</function></member>
    <member><function>file_get_contents</function></member>
    <member><function>pack</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
