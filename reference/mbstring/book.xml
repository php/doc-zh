<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 740eb58e8c03cfc5ac98eda13943262775b73ff2 Maintainer: daijie Status: ready -->
<!-- CREDITS: Luffy -->
<book xml:id="book.mbstring" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <?phpdoc extension-membership="bundled" ?>
 <title>多字节字符串</title> 
 
 <!-- {{{ preface -->
 <preface xml:id="intro.mbstring">
  &reftitle.intro;
  <para>
   虽然许多语言每个必要字符都能一对一映射到 8 比特（bit）的值，但也有好几种语言需要非常多的字符来书面通讯，以至于它们的编码范围不能仅仅包含在一个字节里（一个字节 Byte 由 8 比特 bit 构成。每一比特仅能包含两种不同的值： 1 或 0。所以，一字节仅能够表示 256 种不同的值，即 2 的八次方）。
   开发多字节字符编码方案是为了在基于字节的常规编码系统中表达超过 256 个字符。
  </para>
  <para>
   在你操作（trim、split、splice 等等）多字节编码的字符串的时候，由于在这种编码方案下，两个或多个连续字节可能只表达了一个字符，所以你需要使用专门的函数。
   否则，当你将不能检测多字节字符串的函数应用到这个字符串的时候，它可能无法检测多字节字符的起始位置，并以乱码字符串结尾，基本丢失了它原来的意思。
  </para>
  <para>
   <literal>mbstring</literal> 提供了针对多字节字符串的函数，能够帮你处理 PHP 中的多字节编码。
   除此以外，<literal>mbstring</literal> 还能在可能的字符编码之间相互进行编码转换。
   为了方便起见，<literal>mbstring</literal> 设计成了处理基于 Unicode 的编码，类似 UTF-8、UCS-2 及诸多单字节的编码（在 <link linkend="mbstring.supported-encodings">支持的编码</link> 列出了）。
  </para>
 </preface>
 <!-- }}} -->
 
 &reference.mbstring.setup;
 &reference.mbstring.constants;
 &reference.mbstring.encodings;
 &reference.mbstring.ja-basic;
 &reference.mbstring.http-inout;
 &reference.mbstring.supported-encodings;
 &reference.mbstring.overloading;
 &reference.mbstring.encoding-requirements;
 &reference.mbstring.reference;

</book>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

