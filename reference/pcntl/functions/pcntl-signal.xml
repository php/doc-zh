<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: b890f28c0c6d2856eadcdc34b3faf83a846b3d79 Maintainer: mowangjuanzi Status: ready -->
<refentry xml:id="function.pcntl-signal" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pcntl_signal</refname>
  <refpurpose>安装信号处理程序</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>pcntl_signal</methodname>
   <methodparam><type>int</type><parameter>signal</parameter></methodparam>
   <methodparam><type class="union"><type>callable</type><type>int</type></type><parameter>handler</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>restart_syscalls</parameter><initializer>&true;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>pcntl_signal</function> 函数为 <parameter>signal</parameter> 指定的信号安装新的信号处理程序或替换当前信号处理程序。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>signal</parameter></term>
     <listitem>
      <para>
       信号编号。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>handler</parameter></term>
     <listitem>
      <para>
       信号处理程序。要么是 <type>callable</type>，将调用它来处理信号，要么是全局常量 <constant>SIG_IGN</constant> 或
       <constant>SIG_DFL</constant>，将分别用于忽略信号或恢复默认信号处理程序。
      </para>
      <para>
       如果指定为 <type>callable</type>，必须实现以下签名：
      </para>
      <para>
       <methodsynopsis>
        <type>void</type><methodname><replaceable>handler</replaceable></methodname>
        <methodparam><type>int</type><parameter>signo</parameter></methodparam>
        <methodparam><type>mixed</type><parameter>siginfo</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>signal</parameter></term>
         <listitem>
          <simpara>
           正在处理的信号。
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>siginfo</parameter></term>
         <listitem>
          <simpara>
           如果操作系统支持 siginfo_t 结构体，这将是依赖于信号的信号信息数组。
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <note>
       <para>
        请注意，当处理程序设置为对象方法时，该对象的引用计数会增加，这会使其持续存在，直到将处理程序更改为其他内容或脚本结束为止。
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>restart_syscalls</parameter></term>
     <listitem>
      <para>
      指定当信号到达时系统调用重启是否可用。（译注：经查资料，此参数意为系统调用被信号打断时，系统调用是否从
      开始处重新开始，但根据 http://bugs.php.net/bug.php?id=52121，此参数存在bug无效。）
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.1.0</entry>
       <entry>
        从 PHP 7.1.0 开始，处理程序 callback 指定为第二个参数，其中包含特定信号的 siginfo。仅当操作系统具有
        siginfo_t 结构体时才提供此数据。如果操作系统未实现 siginfo_t，则提供 NULL。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>pcntl_signal</function> 示例</title>
    <programlisting role="php">
<![CDATA[
<?php
// 需要使用 ticks
declare(ticks = 1);

// 信号处理函数
function sig_handler($signo)
{

     switch ($signo) {
         case SIGTERM:
             // 处理终止任务
             exit;
             break;
         case SIGHUP:
             // 处理重启任务
             break;
         case SIGUSR1:
             echo "Caught SIGUSR1...\n";
             break;
         default:
             // 处理所有其它信号
     }

}

echo "Installing signal handler...\n";

// 安装信号处理程序
pcntl_signal(SIGTERM, "sig_handler");
pcntl_signal(SIGHUP,  "sig_handler");
pcntl_signal(SIGUSR1, "sig_handler");

// 或使用对象
// pcntl_signal(SIGUSR1, array($obj, "do_something");

echo "Generating signal SIGUSR1 to self...\n";

// 向当前进程 ID 发送 SIGUSR1 信号
// posix_* 函数需要 posix 扩展
posix_kill(posix_getpid(), SIGUSR1);

echo "Done\n";

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes"><!-- {{{ -->
  &reftitle.notes;
  <para>
   <function>pcntl_signal</function> 不堆叠信号处理程序，而是替换。
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pcntl_fork</function></member>
    <member><function>pcntl_waitpid</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
