<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 89590b202fc31ac3d0cdff65beb156f263ec161d Maintainer: Luffy Status: ready -->
<refentry xml:id="function.pcntl-waitid" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pcntl_waitid</refname>
  <refpurpose>等待子进程改变状态</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>pcntl_waitid</methodname>
   <methodparam choice="opt"><type>int</type><parameter>idtype</parameter><initializer>P_ALL</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>id</parameter><initializer>null</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">info</parameter><initializer>[]</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>WEXITED</initializer></methodparam>
  </methodsynopsis>
  <para>
   获取与终止、停止和/或继续事件有关的状态信息，这些事件发生在调用者的一个子进程中。
  </para>

  <para>
   除非传递了 <constant>WNOHANG</constant> 标志，否则调用进程将被阻塞，直到发生错误，
   或者满足以下所有条件的状态信息变得可用：
   <itemizedlist>
    <listitem>
     <simpara>
      由 <parameter>idtype</parameter> 和 <parameter>id</parameter> 参数指定的一组子进程中的一个子进程的状态信息。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      状态信息的状态更改与在 <parameter>flags</parameter> 参数中设置的状态更改标志之一匹配。
     </simpara>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   如果在调用 <function>pcntl_waitid</function> 之前有匹配的状态信息可用，则返回将是立即的。
   如果有两个或两个以上的子进程的匹配状态信息可用，则其状态报告的顺序是未指定的。
  </para>

  <note>
   <para>
    本文档涵盖了 POSIX 规范中 <literal>waitid</literal> 函数的说明，以及在 Linux、NetBSD 和 FreeBSD 上的实现中的一些额外参数。
    请查看您系统的 <literal>waitid(2)</literal> man 手册，以获取有关 <literal>waitid</literal> 在您系统上的工作方式的具体细节。
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>idtype</parameter></term>
    <term><parameter>id</parameter></term>
    <listitem>
     <simpara>
      <parameter>idtype</parameter> 和 <parameter>id</parameter> 参数用于指定要等待的子进程。
     </simpara>
     <table>
      <title>POSIX 标准 <parameter>idtype</parameter> 和 <parameter>id</parameter> 参数</title>
      <tgroup cols="2">
       <tbody>
        <row>
         <entry>如果 <parameter>idtype</parameter> 是 <literal>P_ALL</literal></entry>
         <entry>
          等待任何子进程，<parameter>id</parameter> 被忽略。
         </entry>
        </row>
        <row>
         <entry>如果 <parameter>idtype</parameter> 是 <literal>P_PID</literal></entry>
         <entry>
          等待进程 ID 等于 <parameter>id</parameter> 的子进程。
         </entry>
        </row>
        <row>
         <entry>如果 <parameter>idtype</parameter> 是 <literal>P_PGID</literal></entry>
         <entry>
          等待进程组 ID 等于 <parameter>id</parameter> 的任何子进程。
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
     <table>
      <title>Linux 特定 <parameter>idtype</parameter> 和 <parameter>id</parameter> 参数</title>
      <tgroup cols="2">
       <tbody>
        <row>
         <entry>如果 <parameter>idtype</parameter> 是 <literal>P_PIDFD</literal>（自 Linux 5.4 起）</entry>
         <entry>
          等待由 <parameter>id</parameter> 中指定的 PID 文件描述符引用的子进程。
          （有关 PID 文件描述符的详细信息，请参见 Linux <literal>pidfd_open(2)</literal> man 手册）
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
     <table>
      <title>NetBSD 和 FreeBSD 特定 <parameter>idtype</parameter> 和 <parameter>id</parameter> 参数</title>
      <tgroup cols="2">
       <tbody>
        <row>
         <entry>
          如果 <parameter>idtype</parameter> 是 <literal>P_UID</literal>
         </entry>
         <entry>
          等待有效用户 ID 等于 <parameter>id</parameter> 的进程。
         </entry>
        </row>
        <row>
         <entry>
          如果 <parameter>idtype</parameter> 是 <literal>P_GID</literal>
         </entry>
         <entry>
          等待有效组 ID 等于 <parameter>id</parameter> 的进程。
         </entry>
        </row>
        <row>
         <entry>
          如果 <parameter>idtype</parameter> 是 <literal>P_SID</literal>
         </entry>
         <entry>
          等待会话 ID 等于 <parameter>id</parameter> 的进程。
          如果子进程启动了自己的会话，其会话 ID 将与其进程 ID 相同。
          否则，子进程的会话 ID 将与调用者的会话 ID 匹配。
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
     <table>
      <title>FreeBSD 特定 <parameter>idtype</parameter> 和 <parameter>id</parameter> 参数</title>
      <tgroup cols="2">
       <tbody>
        <row>
         <entry>
          如果 <parameter>idtype</parameter> 是 <literal>P_JAILID</literal>
         </entry>
         <entry>
          等待在其 jail 标识符等于 <parameter>id</parameter> 的 jail 中的进程。
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>info</parameter></term>
    <listitem>
     <para>
      <parameter>info</parameter> 参数设置为一个包含有关信号的信息的数组。
     </para>
     <para>
      <parameter>info</parameter> 数组可能包含以下键：
      <simplelist>
       <member><literal>signo</literal>：信号量</member>
       <member><literal>errno</literal>：系统错误号</member>
       <member><literal>code</literal>：信号代码</member>
       <member><literal>status</literal>：退出值或信号</member>
       <member><literal>pid</literal>：发送进程 ID</member>
       <member><literal>uid</literal>：发送进程的真实用户 ID</member>
       <member><literal>utime</literal>：用户消耗的时间</member>
       <member><literal>stime</literal>：系统消耗的时间</member>
      </simplelist>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>flags</parameter></term>
    <listitem>
     <para>
      <parameter>flags</parameter> 的值是零个或多个以下常量的值，这些常量通过 OR 运算在一起：
      <table>
       <title><parameter>flags</parameter> 的可能值</title>
       <tgroup cols="2">
        <tbody>
         <row>
          <entry><constant>WCONTINUED</constant></entry>
          <entry>
           为任何继续自作业控制停止的子进程返回状态。
           控制停止后，要么没有报告过其状态，要么只有通过设置了 <constant>WNOWAIT</constant>
           标志的 <function>pcntl_waitid</function> 调用报告过其状态。
          </entry>
         </row>
         <row>
          <entry><constant>WEXITED</constant></entry>
          <entry>
           返回已退出的子进程的状态。
          </entry>
         </row>
         <row>
          <entry><constant>WNOHANG</constant></entry>
          <entry>
           如果没有可用的状态，则不挂起；立即返回。
          </entry>
         </row>
         <row>
          <entry><constant>WNOWAIT</constant></entry>
          <entry>
           保持状态返回在 <parameter>info</parameter> 中的进程处于可等待状态。
           这不会影响进程的状态；在此调用完成后，可以再次等待该进程。
          </entry>
         </row>
         <row>
          <entry><constant>WSTOPPED</constant></entry>
          <entry>
           返回已停止的子进程的状态。
           控制停止后，要么没有报告过其状态，要么只有通过设置了 <constant>WNOWAIT</constant>
           标志的 <function>pcntl_waitid</function> 调用报告过其状态。
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>pcntl_waitid</function> 如果指定了 <constant>WNOHANG</constant> 并且状态对于由
   <parameter>idtype</parameter> 和 <parameter>id</parameter> 指定的任何进程都不可用，则返回 &true;。
  </para>

  <para>
   如果由于其一个子进程的状态更改而返回 &true;，则 <function>pcntl_waitid</function> 返回 &true;。
  </para>

  <para>
   否则，返回 &false;，并且可以使用 <function>pcntl_get_last_error</function> 来获取 <literal>errno</literal> 错误号。
  </para>

  <note>
   <para>
    一旦获得了一个 <literal>errno</literal> 错误号，可以使用 <function>pcntl_strerror</function> 来获取与之关联的文本消息。
   </para>
  </note>
 </refsect1>

  <refsect1 role="errors">
  &reftitle.errors;
  <table>
   <title>错误号 (<literal>errno</literal>) 值</title>
   <tgroup cols="2">
    <tbody>
     <row>
      <entry><constant>ECHILD</constant></entry>
      <entry>
       调用进程没有未等待的子进程。
      </entry>
     </row>
     <row>
      <entry><constant>EINTR</constant></entry>
      <entry>
       <function>pcntl_waitid</function> 被一个信号中断。
      </entry>
     </row>
     <row>
      <entry><constant>EINVAL</constant></entry>
      <entry>
       为 <parameter>flags</parameter> 指定了一个无效值，
       或者 <parameter>idtype</parameter> 和 <parameter>id</parameter> 指定了一组无效的进程。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pcntl_waitpid</function></member>
    <member><function>pcntl_wait</function></member>
    <member><function>pcntl_fork</function></member>
    <member><function>pcntl_signal</function></member>
    <member><function>pcntl_wifexited</function></member>
    <member><function>pcntl_wifstopped</function></member>
    <member><function>pcntl_wifsignaled</function></member>
    <member><function>pcntl_wexitstatus</function></member>
    <member><function>pcntl_wtermsig</function></member>
    <member><function>pcntl_wstopsig</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
