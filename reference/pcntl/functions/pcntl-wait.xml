<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 61374bbe228e8e9c55a24aba59a1e2bb2a871148 Maintainer: avenger Status: ready -->
<!-- CREDITS: mowangjuanzi, Luffy -->
<refentry xml:id="function.pcntl-wait" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pcntl_wait</refname>
  <refpurpose>等待或返回 fork 的子进程状态</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>pcntl_wait</methodname>
   <methodparam><type>int</type><parameter role="reference">status</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">resource_usage</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <para>
   wait 函数挂起当前进程的执行直到一个子进程退出或接收到一个信号要求中断当前进程或调用一个信号处理函数。如果一个子进程在调用此函数时已经退出（俗称僵尸进程），此函数立刻返回。子进程使用的所有系统资源将被释放。关于 wait 在您系统上工作的详细规范请查看您系统的 wait（2）手册。
  </para>
  <note>
   <para>
    这个函数等同于以 <literal>-1</literal> 作为参数 <parameter>process_id</parameter>
    的值并且没有 <parameter>flags</parameter> 参数来调用 <function>pcntl_waitpid</function>
    函数。
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>status</parameter></term>
     <listitem>
      <para>
       <function>pcntl_wait</function> 将会存储状态信息到 <parameter>status</parameter>
       参数上，这个通过 <parameter>status</parameter> 参数返回的状态信息可以用以下函数
       <function>pcntl_wifexited</function>、
       <function>pcntl_wifstopped</function>、
       <function>pcntl_wifsignaled</function>、
       <function>pcntl_wexitstatus</function>、
       <function>pcntl_wtermsig</function> 以及
       <function>pcntl_wstopsig</function> 获取其具体的值。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
      如果操作系统（多数 BSD 类系统）允许使用 wait3，可以提供可选的 <parameter>flags</parameter>
      参数。如果这个参数没有提供，wait 将会被用作系统调用。如果 wait3 不可用，提供参数
      <parameter>flags</parameter> 不会有任何效果。<parameter>flags</parameter> 的值可以是以下两个常量中
      0 个或多个 <literal>OR</literal> 运算的结果：
       <table>
        <title><parameter>flags</parameter> 可用值</title>
        <tgroup cols="2">
         <tbody>
          <row>
           <entry><constant>WNOHANG</constant></entry>
           <entry>
            如果没有子进程退出立刻返回。
           </entry>
          </row>
          <row>
           <entry><constant>WUNTRACED</constant></entry>
           <entry>
           子进程已经退出并且其状态未报告时返回。
           </entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>pcntl_wait</function> 返回退出的子进程进程号，发生错误时返回 -1，如果提供了 WNOHANG 作为 option（wait3 可用的系统）并且没有可用子进程时返回 0。
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pcntl_fork</function></member>
    <member><function>pcntl_signal</function></member>
    <member><function>pcntl_wifexited</function></member>
    <member><function>pcntl_wifstopped</function></member>
    <member><function>pcntl_wifsignaled</function></member>
    <member><function>pcntl_wexitstatus</function></member>
    <member><function>pcntl_wtermsig</function></member>
    <member><function>pcntl_wstopsig</function></member>
    <member><function>pcntl_waitpid</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
