<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: db22a7cfcbc3af221f67e228336ac3e2d62aaf2c Maintainer: yuanyuqiang Status: ready -->
<!-- CREDITS: mowangjuanzi, Luffy -->
<refentry xml:id="function.hash-pbkdf2" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>hash_pbkdf2</refname>
  <refpurpose>生成所提供密码的 PBKDF2 密钥导出</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>hash_pbkdf2</methodname>
   <methodparam><type>string</type><parameter>algo</parameter></methodparam>
   <methodparam><type>string</type><parameter>password</parameter></methodparam>
   <methodparam><type>string</type><parameter>salt</parameter></methodparam>
   <methodparam><type>int</type><parameter>iterations</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>length</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>binary</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>algo</parameter></term>
     <listitem>
      <para>
       散列算法名称，例如
       <literal>md5</literal>、<literal>sha256</literal>、<literal>haval160,4</literal> 等。
       受支持的算法清单请参见 <function>hash_algos</function>。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>password</parameter></term>
     <listitem>
      <para>
       要进行导出的密码。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>salt</parameter></term>
     <listitem>
      <para>
       进行导出时所使用的“盐”，这个值应该是随机生成的。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>iterations</parameter></term>
     <listitem>
      <para>
       进行导出时的迭代次数。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       密钥导出数据的长度。如果 <parameter>binary</parameter> 为 &true;，
       此参数为密钥导出数据的字节长度。如果 <parameter>binary</parameter> 为 &false;，
       此参数为密钥导出数据的字节长度的 2 倍，因为 1 个字节数据对应的 2 个 16 进制的字符。
      </para>
      <para>
       如果传入 <literal>0</literal>，则使用所选算法的完整输出大小。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>binary</parameter></term>
     <listitem>
      <para>
       设置为 &true; 输出原始二进制数据，
       设置为 &false; 输出小写 16 进制字符串。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       各种散列算法的一系列选项数组。
       目前 MurmurHash 算法仅支持 <literal>“seed”</literal> 参数。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues"><!-- {{{ -->
  &reftitle.returnvalues;
  <para>
   如果 <parameter>binary</parameter> 设置为 &true;， 
   则返回原始二进制数据表示的信息摘要，
   否则返回 16 进制小写字符串格式表示的信息摘要。
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="errors"><!-- {{{ -->
  &reftitle.errors;
  <para>
   在以下情况下会抛出 <classname>ValueError</classname> 异常：算法未知，<parameter>iterations</parameter>
   小于等于 <literal>0</literal>，<parameter>length</parameter> 小于等于 <literal>0</literal> 或者
   <parameter>salt</parameter> 过长（大于 <constant>INT_MAX</constant><literal> - 4</literal>）。
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        现在错误时将抛出 <classname>ValueError</classname> 异常。之前返回 &false;
        并发出 <constant>E_WARNING</constant> 消息。
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>不再支持非加密的散列函数（adler32、crc32、crc32b、fnv132、fnv1a32、fnv164、fnv1a64、joaat）。</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>hash_pbkdf2</function> 示例，基础用法</title>
    <programlisting role="php">
<![CDATA[
<?php
$password = "password";
$iterations = 600000;

// 使用 random_bytes() 生成一个加密安全的随机盐。
$salt = random_bytes(16);

$hash = hash_pbkdf2("sha256", $password, $salt, $iterations, 20);
var_dump($hash);

// 对于原始二进制，$length 需要减半以获得相同的结果
$hash = hash_pbkdf2("sha256", $password, $salt, $iterations, 10, true);
var_dump(bin2hex($hash));?>
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
string(20) "120fb6cffcf8b32c43e7"
string(20) "120fb6cffcf8b32c43e7"
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    为了安全起见，可以使用 PBKDF2 方法对密码明文进行散列运算后再存储。但是更好的方案是使用
    <function>password_hash</function> 函数或者使用 <constant>CRYPT_BLOWFISH</constant> 算法调用 
    <function>crypt</function> 函数。
   </para>
  </caution>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>password_hash</function></member>
    <member><function>hash_hkdf</function></member>
    <member><function>sodium_crypto_pwhash</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
