<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 60809ebcf7d0c261b2f00e093e4fab70326ffc7b Maintainer: HonestQiao Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<refentry xml:id="function.iterator-apply" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>iterator_apply</refname>
  <refpurpose>为迭代器中每个元素调用函数</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>iterator_apply</methodname>
   <methodparam><type>Traversable</type><parameter>iterator</parameter></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>array</type><type>null</type></type><parameter>args</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   循环迭代每个元素时调用函数。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>iterator</parameter></term>
     <listitem>
      <para>
       要迭代的迭代对象。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       每个元素要调用的回调函数。此函数仅接收指定的 <parameter>args</parameter>，因此默认为 null。如果
       <literal>count($args) === 3</literal>，则回调函数是三个参数。
       <note>
        <simpara>
         为了遍历 <parameter>iterator</parameter>，此函数必须返回 &true;。
        </simpara>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>args</parameter></term>
     <listitem>
      <para>
       参数 <type>array</type>；<parameter>args</parameter>
       的每个元素都会作为单独的参数传递给回调 <parameter>callback</parameter>。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   返回已迭代的元素个数。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>iterator_apply</function> 示例</title>
    <programlisting role="php">
<![CDATA[
<?php
function print_caps(Iterator $iterator) {
    echo strtoupper($iterator->current()) . "\n";
    return TRUE;
}

$it = new ArrayIterator(array("Apples", "Bananas", "Cherries"));
iterator_apply($it, "print_caps", array($it));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
APPLES
BANANAS
CHERRIES
]]>
    </screen>
   </example>
  </para>
 </refsect1>

<!--
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   When does this function issue E_* level errors, and/or throw exceptions.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>iterator_apply</function> example</title>
    <para>
     Any text that describes the purpose of the example, or what
     goes on in the example should be here.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* ... */

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
...
]]>
    </screen>
   </example>
  </para>
 </refsect1>
-->

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_walk</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
