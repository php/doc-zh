<?xml version='1.0' encoding='utf-8'?>
<!-- $Revision$ -->
<!-- EN-Revision: d4b762e22e53d959330b53674b73841cfff4dddf Maintainer: daijie Status: ready -->
<!-- CREDITS: mowangjuanzi, Luffy -->
<refentry xml:id="function.spl-autoload-register" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
 <refname>spl_autoload_register</refname>
  <refpurpose>注册指定的函数作为 __autoload 的实现</refpurpose>
 </refnamediv>
  <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>spl_autoload_register</methodname>
   <methodparam choice="opt"><type class="union"><type>callable</type><type>null</type></type><parameter>callback</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>throw</parameter><initializer>&true;</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>prepend</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   使用 spl 提供的 __autoload 队列注册函数。如果队列尚未激活，则将激活。
  </para>
  <para>
   如果在代码中已经实现了 <function>__autoload</function> 函数，必须显式注册到
   <function>__autoload</function> 队列中。因为 <function>spl_autoload_register</function>
   通过 <function>spl_autoload</function> 或 <function>spl_autoload_call</function>
   有效替换 <function>__autoload</function> 函数的存储缓存。
  </para>
  <para>
   如果需要多个自动加载函数，则 <function>spl_autoload_register</function> 
   允许这么做。它有效的创建了自动加载函数队列，并按定义的顺序进行遍历。相比之下，<function>__autoload</function> 只能定义一次。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       正在注册的自动装载函数。如果为 &null;，则将注册 <function>spl_autoload</function> 的默认实现。
      </para>
      <methodsynopsis>
       <type>void</type><methodname><replaceable>callback</replaceable></methodname>
       <methodparam><type>string</type><parameter>class</parameter></methodparam>
      </methodsynopsis>
      <para>
       <parameter>class</parameter> 将是不包含开头反斜线的完整标识符。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>throw</parameter></term>
     <listitem>
      <para>
       此参数指定 <function>spl_autoload_register</function> 在无法注册
       <parameter>callback</parameter> 时是否应抛出异常。
      </para>
      <warning>
        <para>
          从 PHP 8.0.0 开始，将忽略该参数，如果设置为 &false;，则会发出 notice。<function>spl_autoload_register</function>
          现在总是会在无效参数上抛出 <classname>TypeError</classname>。
        </para>
      </warning>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>prepend</parameter></term>
     <listitem>
      <para>
       如果是 &true;，<function>spl_autoload_register</function> 会添加函数到队列之首，而不是队列尾部。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>


 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        <parameter>callback</parameter> 现在可以为 null。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>spl_autoload_register</function> 作为 <function>__autoload</function> 函数的替代</title>
    <programlisting role="php">
<![CDATA[
<?php

// function __autoload($class) {
//     include 'classes/' . $class . '.class.php';
// }

function my_autoloader($class) {
    include 'classes/' . $class . '.class.php';
}

spl_autoload_register('my_autoloader');

// 或者可以使用匿名函数
spl_autoload_register(function ($class) {
    include 'classes/' . $class . '.class.php';
});

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>类未能加载的 <function>spl_autoload_register</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php

namespace Foobar;

class Foo {
    static public function test($class) {
        print '[['. $class .']]';
    }
}

spl_autoload_register(__NAMESPACE__ .'\Foo::test');

new InexistentClass;

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
[[Foobar\InexistentClass]]
Fatal error: Class 'Foobar\InexistentClass' not found in ...
]]>
    </screen>
   </example>
   <example>
    <title>提供的标识符将不包含开头的反斜线</title>
    <programlisting role="php">
<![CDATA[
<?php

spl_autoload_register(static function ($class) {
    var_dump($class);
});

class_exists('RelativeName');
class_exists('RelativeName\\WithNamespace');
class_exists('\\AbsoluteName');
class_exists('\\AbsoluteName\\WithNamespace');

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(12) "RelativeName"
string(26) "RelativeName\WithNamespace"
string(12) "AbsoluteName"
string(26) "AbsoluteName\WithNamespace"
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>__autoload</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
