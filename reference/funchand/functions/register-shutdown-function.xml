<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: b412bbd26214f7281ac7dd858710e09952a275f2 Maintainer: mowangjuanzi Status: ready -->
<refentry xml:id="function.register-shutdown-function" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>register_shutdown_function</refname>
  <refpurpose>注册在关闭时执行的函数</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>register_shutdown_function</methodname>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>args</parameter></methodparam>
  </methodsynopsis>
  <para>
   注册一个 <parameter>callback</parameter> ，它会在脚本执行完成或者 <function>exit</function> 后被调用。
  </para>
  <para>
   可以多次调用
   <function>register_shutdown_function</function>，这些被注册的回调会按照他们注册时的顺序被依次调用。如果你在注册的方法内部调用
   <function>exit</function>，那么所有处理会被中止，并且其他注册的中止回调也不会再被调用。
  </para>
  <para>
   关闭函数也可以调用 <function>register_shutdown_function</function> 来将关闭函数添加到队列的末尾。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       待注册的中止回调。
      </para>
      <para>
       中止回调是作为请求的一部分被执行的，因此可以在它们中进行输出或者读取输出缓冲区。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>args</parameter></term>
     <listitem>
      <para>
       可以通过传入额外的参数来将参数传给中止函数。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>register_shutdown_function</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php
function shutdown()
{
    // 这是关闭函数，在脚本完成前可以进行任何最后的操作。

    echo 'Script executed with success', PHP_EOL;
}

register_shutdown_function('shutdown');
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    在某些 web 服务器（如 Apache）上，可以在中止函数内对脚本的工作目录进行修改。
   </para>
  </note>
  <note>
   <para>
    如果进程被信号 SIGTERM 或 SIGKILL 杀死，那么中止函数将不会被调用。尽管你无法中断
    SIGKILL，但你可以通过 <function>pcntl_signal</function> 来捕获
    SIGTERM，通过在其中调用 <function>exit</function> 来进行一个正常的中止。
   </para>
  </note>
  <note>
   <para>
    关闭函数与 <link linkend="ini.max-execution-time">max_execution_time</link>
    追踪的时间分开运行。这意味着即使进程因为运行时间过长而终止，仍会调用关闭函数。此外，如果关闭函数运行时正好
    <literal>max_execution_time</literal> 用完，也会被终止。
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="ini.auto-append-file">auto_append_file</link></member>
    <member><function>exit</function></member>
    <member><function>fastcgi_finish_request</function></member>
    <member><link linkend="features.connection-handling">连接处理</link>节</member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
