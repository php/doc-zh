<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: eae19eb5fe0f5bebcbce382ea7a505cedeb5a883 Maintainer: ichenshy Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<!-- Generated by xml_proto.php v2.1. Found in /scripts directory of phpdoc. -->
<appendix xml:id="pdo.constants" xmlns="http://docbook.org/ns/docbook">
 &reftitle.constants;
 &extension.constants;
 <variablelist>
  <varlistentry xml:id="pdo.constants.param-bool">
   <term>
    <constant>PDO::PARAM_BOOL</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
    表示布尔数据类型。
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="pdo.constants.param-null">
   <term>
    <constant>PDO::PARAM_NULL</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
    表示 SQL 中的 NULL 数据类型。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-int">
   <term>
    <constant>PDO::PARAM_INT</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
      表示 SQL 中的整型。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-str">
   <term>
    <constant>PDO::PARAM_STR</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     表示 SQL 中的 CHAR、VARCHAR 或其他字符串类型。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-str-natl">
   <term>
    <constant>PDO::PARAM_STR_NATL</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
        标记了字符使用的是国家字符集（national character set）。
    </simpara>
    <simpara>
     自 PHP 7.2.0 起。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-str-char">
   <term>
    <constant>PDO::PARAM_STR_CHAR</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
        标记了字符使用的是常规字符集（regular character set）。
    </simpara>
    <simpara>
     自 PHP 7.2.0 起。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-lob">
   <term>
    <constant>PDO::PARAM_LOB</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     表示 SQL 中大对象数据类型。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-stmt">
   <term>
    <constant>PDO::PARAM_STMT</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
      表示一个记录集类型。当前尚未被任何驱动支持。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-input-output">
   <term>
    <constant>PDO::PARAM_INPUT_OUTPUT</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
    指定参数为一个存储过程的 INOUT 参数。必须用一个明确的 PDO::PARAM_* 数据类型跟此值进行按位或。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-default">
   <term>
    <constant>PDO::FETCH_DEFAULT</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     指定将要使用的默认获取模式。自 PHP 8.0.7 可用。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-lazy">
   <term>
    <constant>PDO::FETCH_LAZY</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     指定获取方式，将结果集中的每一行作为一个对象返回，此对象的变量名对应着列名。<constant>PDO::FETCH_LAZY</constant>
     创建用来访问的对象变量名。在 <methodname>PDOStatement::fetchAll</methodname> 中无效。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-assoc">
   <term>
    <constant>PDO::FETCH_ASSOC</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     指定获取方式，将对应结果集中的每一行作为一个由列名索引的数组返回。如果结果集中包含多个名称相同的列，则<constant>PDO::FETCH_ASSOC</constant>每个列名只返回一个值。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-named">
   <term>
    <constant>PDO::FETCH_NAMED</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     指定获取方式，将对应结果集中的每一行作为一个由列名索引的数组返回。如果结果集中包含多个名称相同的列，则<constant>PDO::FETCH_ASSOC</constant>每个列名 返回一个包含值的数组。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-num">
   <term>
    <constant>PDO::FETCH_NUM</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
   指定获取方式，将对应结果集中的每一行作为一个由列号索引的数组返回，从第 0 列开始。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-both">
   <term>
    <constant>PDO::FETCH_BOTH</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     指定获取方式，将对应结果集中的每一行作为一个由列号和列名索引的数组返回，从第 0 列开始。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-obj">
   <term>
    <constant>PDO::FETCH_OBJ</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
    指定获取方式，将结果集中的每一行作为一个属性名对应列名的对象返回。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-bound">
   <term>
    <constant>PDO::FETCH_BOUND</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     指定获取方式，返回 TRUE 且将结果集中的列值分配给通过 <methodname>PDOStatement::bindParam</methodname>
     或 <methodname>PDOStatement::bindColumn</methodname> 方法绑定的 PHP 变量。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-column">
   <term>
    <constant>PDO::FETCH_COLUMN</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     指定获取方式，从结果集中的下一行返回所需要的那一列。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-class">
   <term>
    <constant>PDO::FETCH_CLASS</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     指定获取方式，返回一个所请求类的新实例，映射列到类中对应的属性名。
    </simpara>
    <note>
     <simpara>
       如果所请求的类中不存在该属性，则调用 <link linkend="language.oop5.overloading.members"><methodname>__set</methodname></link> 魔术方法
     </simpara>
    </note>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-into">
   <term>
    <constant>PDO::FETCH_INTO</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     指定获取方式，更新一个请求类的现有实例，映射列到类中对应的属性名。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-func">
   <term>
    <constant>PDO::FETCH_FUNC</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     允许在运行中完全用自定义的方式处理数据。（仅在 <methodname>PDOStatement::fetchAll</methodname> 中有效）。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-group">
   <term>
    <constant>PDO::FETCH_GROUP</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     根据值分组返回。通常和 <constant>PDO::FETCH_COLUMN</constant> 或  <constant>PDO::FETCH_KEY_PAIR</constant> 一起使用。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-unique">
   <term>
    <constant>PDO::FETCH_UNIQUE</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     只取唯一值。
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="pdo.constants.fetch-key-pair">
   <term>
    <constant>PDO::FETCH_KEY_PAIR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     获取一个有两列的结果集到一个数组，其中第一列为键名，第二列为值。
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="pdo.constants.fetch-classtype">
   <term>
    <constant>PDO::FETCH_CLASSTYPE</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     根据第一列的值确定类名。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-serialize">
   <term>
    <constant>PDO::FETCH_SERIALIZE</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     类似 <constant>PDO::FETCH_INTO</constant>，但是以序列化的字符串表示对象。如果设置此标志，则类的构造函数永远不会被调用。自
     PHP 8.1.0 起弃用。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-props-late">
   <term>
    <constant>PDO::FETCH_PROPS_LATE</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     设置属性前调用构造函数。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-autocommit">
   <term>
    <constant>PDO::ATTR_AUTOCOMMIT</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     如果此值为 &false; ，PDO 将试图禁用自动提交以便数据库连接开始一个事务。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-prefetch">
   <term>
    <constant>PDO::ATTR_PREFETCH</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     设置预取大小来为你的应用平衡速度和内存使用。并非所有的数据库/驱动组合都支持设置预取大小。较大的预取大小导致性能提高的同时也会占用更多的内存。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-timeout">
   <term>
    <constant>PDO::ATTR_TIMEOUT</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     设置连接数据库的超时秒数。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-errmode">
   <term>
    <constant>PDO::ATTR_ERRMODE</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     关于此属性的更多信息请参见 <link linkend="pdo.error-handling">错误及错误处理</link> 部分。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-server-version">
   <term>
    <constant>PDO::ATTR_SERVER_VERSION</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     此为只读属性；返回 PDO 所连接的数据库服务的版本信息。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-client-version">
   <term>
    <constant>PDO::ATTR_CLIENT_VERSION</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     此为只读属性；返回 PDO 驱动所用客户端库的版本信息。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-server-info">
   <term>
    <constant>PDO::ATTR_SERVER_INFO</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     此为只读属性。返回一些关于 PDO 所连接的数据库服务的元信息。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-connection-status">
   <term>
    <constant>PDO::ATTR_CONNECTION_STATUS</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-case">
   <term>
    <constant>PDO::ATTR_CASE</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     用类似 <literal>PDO::CASE_*</literal> 的常量强制列名为指定的大小写。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-cursor-name">
   <term>
    <constant>PDO::ATTR_CURSOR_NAME</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     获取或设置使用游标的名称。当使用可滚动游标和定位更新时候非常有用。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-cursor">
   <term>
    <constant>PDO::ATTR_CURSOR</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     选择游标类型。 PDO 当前支持 <constant>PDO::CURSOR_FWDONLY</constant> 和  <constant>PDO::CURSOR_SCROLL</constant>。一般为 <constant>PDO::CURSOR_FWDONLY</constant>，除非确实需要一个可滚动游标。
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="pdo.constants.attr-driver-name">
   <term>
    <constant>PDO::ATTR_DRIVER_NAME</constant>
     (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     返回驱动名称。
    </simpara>
    <para>
     <example><title>使用 <constant>PDO::ATTR_DRIVER_NAME</constant> 的例子</title>
     <programlisting role="php">
<![CDATA[
<?php
if ($db->getAttribute(PDO::ATTR_DRIVER_NAME) == 'mysql') {
  echo "Running on mysql; doing something mysql specific here\n";
}
?>
]]>
     </programlisting>
     </example>
     </para>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="pdo.constants.attr-oracle-nulls">
   <term>
    <constant>PDO::ATTR_ORACLE_NULLS</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     在获取数据时将空字符串转换成 SQL 中的 NULL 。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-persistent">
   <term>
    <constant>PDO::ATTR_PERSISTENT</constant>
     (<type>mixed</type>)
   </term>
   <listitem>
    <simpara>
    请求一个持久连接，而非创建一个新连接。关于此属性的更多信息请参见 <link linkend="pdo.connections">连接与连接管理</link> 。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-statement-class">
   <term>
    <constant>PDO::ATTR_STATEMENT_CLASS</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
        设置返回的 statement 类名。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-fetch-catalog-names">
   <term>
    <constant>PDO::ATTR_FETCH_CATALOG_NAMES</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     将包含的目录名添加到结果集中的每个列名前面。目录名和列名由一个小数点分开（.）。此属性在驱动层面支持，所以有些驱动可能不支持此属性。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-fetch-table-names">
   <term>
    <constant>PDO::ATTR_FETCH_TABLE_NAMES</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     将包含的表名添加到结果集中的每个列名前面。表名和列名由一个小数点分开（.）。此属性在驱动层面支持，所以有些驱动可能不支持此属性。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-stringify-fetches">
   <term>
    <constant>PDO::ATTR_STRINGIFY_FETCHES</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
        强制以字符串方式对待所有的值。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-max-column-len">
   <term>
    <constant>PDO::ATTR_MAX_COLUMN_LEN</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
        设置字段名最长的尺寸。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-default-fetch-mode">
   <term>
    <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-emulate-prepares">
   <term>
    <constant>PDO::ATTR_EMULATE_PREPARES</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.attr-default-str-param">
   <term>
    <constant>PDO::ATTR_DEFAULT_STR_PARAM</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
        设置默认 string 参数类型可以是 <constant>PDO::PARAM_STR_NATL</constant>
        和 <constant>PDO::PARAM_STR_CHAR</constant>。
    </simpara>
    <simpara>
     自 PHP 7.2.0 起可用
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.errmode-silent">
   <term>
    <constant>PDO::ERRMODE_SILENT</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     如果发生错误，则不显示错误或异常。希望开发人员显式地检查错误。此为默认模式。关于此属性的更多信息请参见 <link linkend="pdo.error-handling">错误与错误处理</link> 。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.errmode-warning">
   <term>
    <constant>PDO::ERRMODE_WARNING</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     如果发生错误，则显示一个 PHP <constant>E_WARNING</constant> 消息。关于此属性的更多信息请参见 <link linkend="pdo.error-handling">错误与错误处理</link>。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.errmode-exception">
   <term>
    <constant>PDO::ERRMODE_EXCEPTION</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     如果发生错误，则抛出一个 <classname>PDOException</classname>  异常。关于此属性的更多信息请参见 <link linkend="pdo.error-handling">错误与错误处理</link>。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.case-natural">
   <term>
    <constant>PDO::CASE_NATURAL</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     保留数据库驱动返回的列名。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.case-lower">
   <term>
    <constant>PDO::CASE_LOWER</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     强制列名小写。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.case-upper">
   <term>
    <constant>PDO::CASE_UPPER</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     强制列名大写。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.null-natural">
   <term>
    <constant>PDO::NULL_NATURAL</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.null-empty-string">
   <term>
    <constant>PDO::NULL_EMPTY_STRING</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.null-to-string">
   <term>
    <constant>PDO::NULL_TO_STRING</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-next">
   <term>
    <constant>PDO::FETCH_ORI_NEXT</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     在结果集中获取下一行。仅对可滚动游标有效。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-prior">
   <term>
    <constant>PDO::FETCH_ORI_PRIOR</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     在结果集中获取上一行。仅对可滚动游标有效。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-first">
   <term>
    <constant>PDO::FETCH_ORI_FIRST</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     在结果集中获取第一行。仅对可滚动游标有效。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-last">
   <term>
    <constant>PDO::FETCH_ORI_LAST</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     在结果集中获取最后一行。仅对可滚动游标有效。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-abs">
   <term>
    <constant>PDO::FETCH_ORI_ABS</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     根据行号从结果集中获取需要的行。仅对可滚动游标有效。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.fetch-ori-rel">
   <term>
    <constant>PDO::FETCH_ORI_REL</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     根据当前游标位置的相对位置从结果集中获取需要的行。仅对可滚动游标有效。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.cursor-fwdonly">
   <term>
    <constant>PDO::CURSOR_FWDONLY</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     创建一个只进游标的 <classname>PDOStatement</classname> 对象。此为默认的游标选项，因为此游标最快且是 PHP 中最常用的数据访问模式。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.cursor-scroll">
   <term>
    <constant>PDO::CURSOR_SCROLL</constant>
     (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     创建一个可滚动游标的 <classname>PDOStatement</classname> 对象。通过 <literal>PDO::FETCH_ORI_*</literal> 常量来控制结果集中获取的行。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.err-none">
   <term>
    <constant>PDO::ERR_NONE</constant>
     (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     对应 SQLSTATE '00000'，表示 SQL 语句没有错误或警告地成功发出。当用 <methodname>PDO::errorCode</methodname>
     或 <methodname>PDOStatement::errorCode</methodname>
     来确定是否有错误发生时，此常量非常方便。在检查上述方法返回的错误状态代码时，会经常用到。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-alloc">
   <term>
    <constant>PDO::PARAM_EVT_ALLOC</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     分配事件
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-free">
   <term>
    <constant>PDO::PARAM_EVT_FREE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     解除分配事件
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-exec-pre">
   <term>
    <constant>PDO::PARAM_EVT_EXEC_PRE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     执行一条预处理语句之前触发事件。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-exec-post">
   <term>
    <constant>PDO::PARAM_EVT_EXEC_POST</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     执行一条预处理语句之后触发事件。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-fetch-pre">
   <term>
    <constant>PDO::PARAM_EVT_FETCH_PRE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     从一个结果集中取出一条结果之前触发事件。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-fetch-post">
   <term>
    <constant>PDO::PARAM_EVT_FETCH_POST</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     从一个结果集中取出一条结果之后触发事件。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.param-evt-normalize">
   <term>
    <constant>PDO::PARAM_EVT_NORMALIZE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     在绑定参数注册允许驱动程序正常化变量名时触发事件。
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="pdo.constants.sqlite_deterministic">
   <term>
    <constant>PDO::SQLITE_DETERMINISTIC</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     使用 <methodname>PDO::sqliteCreateFunction</methodname> 
     创建的函数是确定性的（deterministic）。举例说明：在同一个 SQL
     语句内，函数的参数不变，则返回的结果也不变。（PHP 7.1.4 起有效）
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
