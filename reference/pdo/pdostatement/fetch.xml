<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 082ddc19f53e6e254010de1a1fbbe485ff744ec1 Maintainer: ichenshy Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<refentry xml:id="pdostatement.fetch" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::fetch</refname>
  <refpurpose>
   从结果集中获取下一行
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>mixed</type><methodname>PDOStatement::fetch</methodname>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_DEFAULT</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursorOrientation</parameter><initializer>PDO::FETCH_ORI_NEXT</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursorOffset</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>

  <para>
   从一个 PDOStatement 对象相关的结果集中获取下一行。<parameter>mode</parameter> 参数决定 POD 如何返回行。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       控制下一行如何返回给调用者。此值必须是 <literal>PDO::FETCH_*</literal> 系列常量中的一个，缺省为 <literal>PDO::ATTR_DEFAULT_FETCH_MODE</literal> 的值 （默认为 <literal>PDO::FETCH_BOTH</literal> ）。
       <itemizedlist>
        <listitem><para>
         <literal>PDO::FETCH_ASSOC</literal>：返回一个索引为结果集列名的数组
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_BOTH</literal>（默认）：返回一个索引为结果集列名和以0开始的列号的数组
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_BOUND</literal>：返回 &true; ，并分配结果集中的列值给 <methodname>PDOStatement::bindColumn</methodname> 方法绑定的 PHP 变量。
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_CLASS</literal>：返回一个请求类的新实例，映射结果集中的列名到类中对应的属性名，然后调用构造函数，除非指定
         <literal>PDO::FETCH_PROPS_LATE</literal>。如果 <parameter>mode</parameter> 包含 PDO::FETCH_CLASSTYPE（例如：<literal>PDO::FETCH_CLASS |
         PDO::FETCH_CLASSTYPE</literal>），则类名由第一列的值决定
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_INTO</literal>：更新一个被请求类已存在的实例，映射结果集中的列到类中命名的属性
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_LAZY</literal>：结合使用 <literal>PDO::FETCH_BOTH</literal> 和 <literal>PDO::FETCH_OBJ</literal>，创建供用来访问的对象变量名
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_NAMED</literal>：返回与 <literal>PDO::FETCH_ASSOC</literal>
         具有相同形式的数组，除了如果有多个同名列，则该键引用的值将是具有该列名的行中所有值的数组
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_NUM</literal>：返回一个索引为以0开始的结果集列号的数组
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_OBJ</literal>：返回一个属性名对应结果集列名的匿名对象
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_PROPS_LATE</literal>：当与 <literal>PDO::FETCH_CLASS</literal>
         一起使用时，类的构造方法在从相应的列值分配属性之前被调用。
        </para></listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cursorOrientation</parameter></term>
     <listitem>
      <para>
       对于 一个 PDOStatement 对象表示的可滚动游标，该值决定了哪一行将被返回给调用者。此值必须是 <literal>PDO::FETCH_ORI_*</literal> 系列常量中的一个，默认为 <literal>PDO::FETCH_ORI_NEXT</literal>。要想让 PDOStatement 对象使用可滚动游标，必须在用 <methodname>PDO::prepare</methodname> 预处理SQL语句时，设置 <literal>PDO::ATTR_CURSOR</literal> 属性为 <literal>PDO::CURSOR_SCROLL</literal>。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cursorOffset</parameter></term>
     <listitem>
      <para> 
       对于一个 <parameter>cursorOrientation</parameter> 参数设置为 <literal>PDO::FETCH_ORI_ABS</literal> 的 PDOStatement 对象代表的可滚动游标，此值指定结果集中想要获取行的绝对行号。
      </para>
      <para>
       对于一个 <parameter>cursorOrientation</parameter> 参数设置为 <literal>PDO::FETCH_ORI_REL</literal> 的 PDOStatement 对象代表的可滚动游标，此值指定想要获取行相对于调用 <methodname>PDOStatement::fetch</methodname> 前游标的位置
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   此方法成功时返回的值依赖于获取类型。在所有情况下，失败或没有更多记录时都返回 &false;。
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example><title> 使用不同的提取方式获取行</title>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* 运用 PDOStatement::fetch 风格 */
print("PDO::FETCH_ASSOC: ");
print("Return next row as an array indexed by column name\n");
$result = $sth->fetch(PDO::FETCH_ASSOC);
print_r($result);
print("\n");

print("PDO::FETCH_BOTH: ");
print("Return next row as an array indexed by both column name and number\n");
$result = $sth->fetch(PDO::FETCH_BOTH);
print_r($result);
print("\n");

print("PDO::FETCH_LAZY: ");
print("Return next row as an anonymous object with column names as properties\n");
$result = $sth->fetch(PDO::FETCH_LAZY);
print_r($result);
print("\n");

print("PDO::FETCH_OBJ: ");
print("Return next row as an anonymous object with column names as properties\n");
$result = $sth->fetch(PDO::FETCH_OBJ);
print $result->name;
print("\n");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
PDO::FETCH_ASSOC: Return next row as an array indexed by column name
Array
(
    [name] => apple
    [colour] => red
)

PDO::FETCH_BOTH: Return next row as an array indexed by both column name and number
Array
(
    [name] => banana
    [0] => banana
    [colour] => yellow
    [1] => yellow
)

PDO::FETCH_LAZY: Return next row as an anonymous object with column names as properties
PDORow Object
(
    [name] => orange
    [colour] => orange
)

PDO::FETCH_OBJ: Return next row as an anonymous object with column names as properties
kiwi
]]>
    </screen>
   </example>
   <example><title>使用一个可滚动游标获取行</title>
    <programlisting role="php">
<![CDATA[
<?php
function readDataForwards($dbh) {
    $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY BET';
    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
    $stmt->execute();
    while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_NEXT)) {
        $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
        print $data;
    }
}
function readDataBackwards($dbh) {
    $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY bet';
    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
    $stmt->execute();
    $row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_LAST);
    do {
        $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
        print $data;
    } while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_PRIOR));
}

print "Reading forwards:\n";
readDataForwards($conn);

print "Reading backwards:\n";
readDataBackwards($conn);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Reading forwards:
21    10    5
16    0     5
19    20    10

Reading backwards:
19    20    10
16    0     5
21    10    5
]]>
    </screen>
   </example>

   <example><title>构造顺序</title>
    <simpara>
     当通过 <literal>PDO::FETCH_CLASS</literal> 获取对象时，首先分配对象属性，然后调用类的构造方法。如果还指定了
     <literal>PDO::FETCH_PROPS_LATE</literal>，则此顺序相反，即首先调用构造方法，然后分配属性。
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
class Person
{
    private $name;

    public function __construct()
    {
        $this->tell();
    }

    public function tell()
    {
        if (isset($this->name)) {
            echo "I am {$this->name}.\n";
        } else {
            echo "I don't have a name yet.\n";
        }
    }
}

$sth = $dbh->query("SELECT * FROM people");
$sth->setFetchMode(PDO::FETCH_CLASS, 'Person');
$person = $sth->fetch();
$person->tell();
$sth->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Person');
$person = $sth->fetch();
$person->tell();
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
I am Alice.
I am Alice.
I don't have a name yet.
I am Bob.
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::execute</methodname></member>
    <member><methodname>PDOStatement::fetchAll</methodname></member>
    <member><methodname>PDOStatement::fetchColumn</methodname></member>
    <member><methodname>PDOStatement::fetchObject</methodname></member>
    <member><methodname>PDOStatement::setFetchMode</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
