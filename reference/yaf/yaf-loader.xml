<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: ecaa2146429a7f88de40dfce14718afc896b74c5 Maintainer: mowangjuanzi Status: ready -->
<phpdoc:classref xml:id="class.yaf-loader" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>Yaf_Loader 类</title>
 <titleabbrev>Yaf_Loader</titleabbrev>

 <partintro>

<!-- {{{ Yaf_Loader intro -->
  <section xml:id="yaf-loader.intro">
   &reftitle.intro;
   <para>
    <classname>Yaf_Loader</classname> 为 Yaf 提供了自动加载功能的全面解决方案。
   </para>
   <para>
    在第一次检索 <classname>Yaf_Application</classname> 实例时，<classname>Yaf_Loader</classname>
    将实例化一个单例，并使用 spl_autoload 注册自己。通过 <methodname>Yaf_Loader::getInstance</methodname> 检索实例
   </para>
   <para>
    <classname>Yaf_Loader</classname> 加载类时仅仅尝试一次，如果失败了，取决于 <link
    linkend="ini.yaf.use-spl-autoload">yaf.use_spl_auload</link>，如果配置是
    On，<methodname>Yaf_Loader::autoload</methodname> 将会返回 &false;，从而给其它自动加载提供机会。如果为
    Off（默认），<methodname>Yaf_Loader::autoload</methodname> 将会返回
    &true;，更重要的是将会抛出非常有用的警告（对于找出类无法加载的原因非常有用）。
    <note>
     <para>
      请保持 yaf.use_spl_autoload 为 Off，除非有一些 library 有自己的自动加载机制，并且是无法重写的。
     </para>
    </note>
   </para>
   <para>
    默认情况下，<classname>Yaf_Loader</classname> 假设所有 library（类定义的脚本）储存进在
    php.ini（yaf.library）定义的<link linkend="ini.yaf.library">全局库目录</link>中。
   </para>

   <para>
    如果使用 <classname>Yaf_Loader</classname> 在<link linkend="yaf-loader.props.library">本地库目录</link>（在
    application.ini 中定义，默认是 <link linkend="configuration.yaf.directory">application.directory</link> .
    "/library"）搜索一些类（库），需要使用 <methodname>Yaf_Loader::registerLocalNameSpace</methodname> 注册本地类前缀
   </para>

   <para>
    看看一些示例（假设 APPLICATION_PATH 是 <link linkend="configuration.yaf.directory">application.directory</link>）：
    <example>
     <title>Config example</title>
      <programlisting role="shell">
<![CDATA[
// Assuming the following configure in php.ini:
yaf.library = "/global_dir"

//Assuming the following configure in application.ini
application.library = APPLICATION_PATH "/library"
]]>
     </programlisting>
    </example>

    假设以下本地名称空间已注册：
    <example>
     <title>注册本地命名空间</title>
     <programlisting role="php">
<![CDATA[
<?php
class Bootstrap extends Yaf_Bootstrap_Abstract{
     public function _initLoader($dispatcher) {
          Yaf_Loader::getInstance()->registerLocalNameSpace(array("Foo", "Bar"));
     }
?>
]]>
     </programlisting>
    </example>
    自动加载示例：
    <example>
     <title>加载类示例</title>
      <programlisting role="shell">
<![CDATA[
class Foo_Bar_Test =>
  // APPLICATION_PATH/library/Foo/Bar/Test.php
  
class GLO_Name  =>
  // /global_dir/Glo/Name.php
 
class BarNon_Test
  // /global_dir/Barnon/Test.php
]]>
      </programlisting>
    </example>

   <example>
    <title>加载命名空间类示例</title>
    <programlisting role="shell">
<![CDATA[
class \Foo\Bar\Dummy =>
   // APPLICATION_PATH/library/Foo/Bar/Dummy.php

class \FooBar\Bar\Dummy =>
   // /global_dir/FooBar/Bar/Dummy.php
]]>
    </programlisting> 
   </example>
  </para>

  <para>
    可能会注意到所有文件夹名字的首字母是大写的，可以通过在 php.ini 中设置 <link linkend="ini.yaf.lowcase-path">yaf.lowcase_path</link> = On 来将它们设为小写。
  </para>

  <para>
   <classname>Yaf_Loader</classname> 也是设计来加载 MVC 类，响应的规则如下：
   <example>
    <title>MVC 类加载示例</title>
    <programlisting role="shell">
<![CDATA[
Controller Classes =>
// APPLICATION_PATH/controllers/

Model Classes =>
// APPLICATION_PATH/models/

Plugin Classes =>
// APPLICATION_PATH/plugins/
]]>
    </programlisting>
   </example>

   Yaf 通过识别类的后缀（这个是默认的，也可以通过改变配置项 <link
    linkend="ini.yaf.name-suffix">yaf.name_suffix</link> 来更改为前缀）来决定它是否是 MVC 类：
   <example>
    <title>MVC 类区别</title>
   <programlisting role="shell">
<![CDATA[
Controller Classes =>
    // ***Controller

Model Classes =>
    // ***Model

Plugin Classes =>
    // ***Plugin
]]>
   </programlisting>
  </example>

   一些示例：
   <example>
    <title>MVC 加载示例</title>
    <programlisting role="shell">
<![CDATA[
class IndexController
    // APPLICATION_PATH/controllers/Index.php

class DataModel =>
   // APPLICATION_PATH/models/Data.php

class DummyPlugin =>
  // APPLICATION_PATH/plugins/Dummy.php

class A_B_TestModel =>
  // APPLICATION_PATH/models/A/B/Test.php
]]>
    </programlisting>
  </example>

  <note>
   <para>
    自 2.1.18 起，Yaf 支持用户脚本端的 Controller 自动加载（这意味着由用户 php 脚本触发自动加载，例如：访问 Bootstrap
    或 Plugins 中的控制器静态属性），但自动加载器仅尝试在控制器类脚本下定位默认模块文件夹，即“APPLICATION_PATH/controllers/”。
   </para>
  </note>
   此外，该目录将受 <link linkend="ini.yaf.lowcase-path">yaf.lowcase_path</link> 的影响。
  </para>
  </section>
<!-- }}} -->

   <section xml:id="yaf-loader.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>Yaf_Loader</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>Yaf_Loader</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-loader.props.local-ns">_local_ns</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-loader.props.library">_library</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-loader.props.global-library">_global_library</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>static</modifier>
     <varname linkend="yaf-loader.props.instance">_instance</varname>
    </fieldsynopsis>

    
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.yaf-loader')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])" />
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.yaf-loader')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->

  </section>

  
<!-- {{{ Yaf_Loader properties -->
  <section xml:id="yaf-loader.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="yaf-loader.props.local-ns">
     <term><varname>_local_ns</varname></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-loader.props.library">
     <term><varname>_library</varname></term>
     <listitem>
      <para>
      默认情况下，此值为 <link linkend="configuration.yaf.directory">application.directory</link> .
      "/library"，可以通过修改 application.ini（application.library）或者调用 <methodname>Yaf_Loader::setLibraryPath</methodname> 更改。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-loader.props.global-library">
     <term><varname>_global_library</varname></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-loader.props.instance">
     <term><varname>_instance</varname></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->


 </partintro>
 

 &reference.yaf.entities.yaf-loader;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
