<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 49d4fb555745d1981edac87a5a2d8ae53b5f75df Maintainer: mowangjuanzi Status: ready -->
<refentry xml:id="yaf-dispatcher.dispatch" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Yaf_Dispatcher::dispatch</refname>
  <refpurpose>分发请求</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>Yaf_Response_Abstract</type><methodname>Yaf_Dispatcher::dispatch</methodname>
   <methodparam><type>Yaf_Request_Abstract</type><parameter>request</parameter></methodparam>
  </methodsynopsis>
  <para>
   <classname>Yaf_Dispatcher</classname> 的这个方法做的工作很繁重.它需要 request 对象。
  </para>
  <para>
    分发过程有三个不同的事件：
    <simplelist>
      <member>路由</member>
      <member>分发</member>
      <member>响应</member>
    </simplelist>
    当调用 <function>Yaf_Dispatcher::dispatch</function> 时，路由只发生一次，使用请求对象中的值。分发发生在循环中；一个请求可能会分发出多个动作，或者
    controller 或 plugin 可能重置请求对象来强制分发其它动作（参见
    <classname>Yaf_Plugin_Abstract</classname>）。当所有都执行完毕，<classname>Yaf_Dispatcher</classname> 返回响应。
  </para>



 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>request</parameter></term>
    <listitem>
     <para>
      
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
  </para>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
