<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: ecaa2146429a7f88de40dfce14718afc896b74c5 Maintainer: mowangjuanzi Status: ready -->
<phpdoc:classref xml:id="class.yaf-router" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>Yaf_Router 类</title>
 <titleabbrev>Yaf_Router</titleabbrev>

 <partintro>

<!-- {{{ Yaf_Router intro -->
  <section xml:id="yaf-router.intro">
   &reftitle.intro;
   <para>
    <classname>Yaf_Router</classname> 是标准的框架路由。路由是获取 URI 端点（位于基本 URI 之后的 URI 部分：参考
    <methodname>Yaf_Request_Abstract::setBaseUri</methodname>）并将其分解为参数得到哪个 module、controller 和
    action 需要接收请求。module、controller、action 和其它参数打包到 <classname>Yaf_Request_Abstract</classname>
    对象中，然后由 <classname>Yaf_Dispatcher</classname> 处理。路由只发生一次：最初接到请求和在第一个 controller
    分发之前。

    <classname>Yaf_Router</classname> 是设计来允许使用纯 PHP 结构的类似 mod_rewrite 的功能。它非常松散的基于 Ruby on
    Rails 的路由，并且不需要提前知悉 webserver URL 重写的相关知识。它设计为跟单个 Apache mod_rewrite（或其中之一个）
    规则一起使用：
   <example>
    <title>Apache 重写规则</title>
   <programlisting role="conf">
<![CDATA[
RewriteEngine on
RewriteRule !\.(js|ico|gif|jpg|png|css|html)$ index.php
]]>
   </programlisting>
   </example>
   或者（首选）：
   <example>
   <title>Apache 重写规则</title>
   <programlisting role="conf">
<![CDATA[
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} -s [OR]
RewriteCond %{REQUEST_FILENAME} -l [OR]
RewriteCond %{REQUEST_FILENAME} -d
RewriteRule ^.*$ - [NC,L]
RewriteRule ^.*$ index.php [NC,L]
]]>
   </programlisting>
  </example>
   如果使用 Lighttpd，以下重写规则有效：
   <example>
    <title>Lighttpd 重写规则</title>
   <programlisting role="conf">
<![CDATA[
url.rewrite-once = (
  ".*\?(.*)$" => "/index.php?$1",
  ".*\.(js|ico|gif|jpg|png|css|html)$" => "$0",
  "" => "/index.php"
)
]]>
   </programlisting>
  </example>
   如果使用 Nginx，以下重写规则有效：
   <example>
    <title>Nginx 重写规则</title>
   <programlisting role="conf">
<![CDATA[
server {
  listen ****;
  server_name  yourdomain.com;
  root   document_root;
  index  index.php index.html;

  if (!-e $request_filename) {
    rewrite ^/(.*)  /index.php/$1 last;
  }
}
]]>
   </programlisting>
  </example>
   </para>
  </section>
<!-- }}} -->

  <section xml:id="yaf-router.default">
   <title>默认路由</title>
   <para>
    <classname>Yaf_Router</classname> 预设了默认路由 <classname>Yaf_Route_Static</classname>，将以 controller/action
    的形式匹配 URI。此外，module 名可以被指定为第一个路径元素，允许 URI 设置为 module/controller/action 形式的
    URI。最后，它也会匹配默认追加到 URI 中所有附加参数——controller/action/var1/value1/var2/value2。
    <note>
     <para>
      Module 名必须在配置中定义，就 application.module="Index,Foo,Bar" 而言，在这种情况下，仅 index、foo 和 bar 可以认做
      module 名。如果没有配置，那么 Yaf 使用默认 module 名“Index”。
     </para>
    </note>
   </para>

   <para>
    如何匹配这些路由的一些例子：
   <example>
    <title><classname>Yaf_Route_Static</classname>（默认路由）示例</title>
   <programlisting role="conf">
<![CDATA[
// Assuming the following configure:
$conf = array(
   "application" => array(
      "modules" => "Index,Blog",
   ),
);

Controller only:
http://example/news
    controller == news
Action only(when defined yaf.action_prefer=1 in php.ini)
    action  == news
 
Invalid module maps to controller name:
http://example/foo
    controller == foo
 
Module + controller:
http://example/blog/archive
    module     == blog
    controller == archive
 
Module + controller + action:
http://example/blog/archive/list
    module     == blog
    controller == archive
    action     == list
 
Module + controller + action + params:
http://example/blog/archive/list/sort/alpha/date/desc
    module     == blog
    controller == archive
    action     == list
    sort       == alpha
    date       == desc
]]>
   </programlisting>
  </example>

  </para>
  </section>

  <section xml:id="yaf-router.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>Yaf_Router</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>Yaf_Router</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-router.props.routes">_routes</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-router.props.current">_current</varname>
    </fieldsynopsis>

    
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.yaf-router')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])" />
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.yaf-router')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->

  </section>

  
<!-- {{{ Yaf_Router properties -->
  <section xml:id="yaf-router.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="yaf-router.props.routes">
     <term><varname>_routes</varname></term>
     <listitem>
      <para>
       已注册路由栈
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-router.props.current">
     <term><varname>_current</varname></term>
     <listitem>
      <para>
       在路由阶段后，这用于指示当前请求的路由名称。

       可以通过 <methodname>Yaf_Router::getCurrentRoute</methodname> 获取此名称。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->


 </partintro>

 &reference.yaf.entities.yaf-router;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
