<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d45ff7a3e78243470d1b7e5141d7ded022286d7f Maintainer: HonestQiao Status: ready -->
<!-- CREDITS: mowangjuanzi, Luffy -->
<refentry xml:id="function.array-walk" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_walk</refname>
  <refpurpose>使用用户自定义函数对数组中的每个元素做回调处理</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>array_walk</methodname>
   <methodparam><type class="union"><type>array</type><type>object</type></type><parameter role="reference">array</parameter></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>arg</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <simpara>
   将用户自定义函数 <parameter>callback</parameter> 应用到
   <parameter>array</parameter> 数组中的每个单元。
  </simpara>
  <para>
   <function>array_walk</function> 不会受到 <parameter>array</parameter>
   内部数组指针的影响。<function>array_walk</function>
   会遍历整个数组而不管指针的位置。
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       输入的数组。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       典型情况下
   <parameter>callback</parameter> 接受两个参数。<parameter>array</parameter>
   参数的值作为第一个，键名作为第二个。
      </para>
      <note>
       <para>
       如果 <parameter>callback</parameter> 需要直接作用于数组中的值，则给
    <parameter>callback</parameter> 的第一个参数指定为<link
    linkend="language.references">引用</link>。这样任何对这些单元的改变也将会改变原始数组本身。
       </para>
      </note>
      <note>
        <para>
         参数数量超过预期，传入内置函数 (例如 <function>strtolower</function>)，
         将抛出警告，所以不适合当做 <parameter>callback</parameter>。
        </para>
      </note>
      <para>
       只有 <parameter>array</parameter> 的值才可以被改变，用户不应在回调函数中改变该数组本身的结构。例如增加/删除单元，unset
   单元等等。如果 <function>array_walk</function>
   作用的数组改变了，则此函数的的行为未经定义，且不可预期。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>arg</parameter></term>
     <listitem>
      <para>
       如果提供了可选参数 <parameter>arg</parameter>，将被作为第三个参数传递给
       <parameter>callback</parameter>。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   返回 &true;。
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   从 PHP 7.1.0 起，如果 <parameter>callback</parameter> 函数需要的参数（数组成员的值和键）超过2个或者
   也传递了 <parameter>arg</parameter> 参数需要的参数超过3个时，会抛出 <classname>ArgumentCountError</classname>。
   在此之前，每次 <function>array_walk</function> 调用 <parameter>callback</parameter>
   的时候都会生成 <link linkend="errorfunc.constants">E_WARNING</link> 级别的错误。
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       如果 <parameter>callback</parameter> 期待通过引用传递第二个和第三个参数，
       此函数现在将抛出 <constant>E_WARNING</constant>。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>array_walk</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php
$fruits = array("d" => "lemon", "a" => "orange", "b" => "banana", "c" => "apple");

function test_alter(&$item1, $key, $prefix)
{
    $item1 = "$prefix: $item1";
}

function test_print($item2, $key)
{
    echo "$key. $item2\n";
}

echo "Before ...:\n";
array_walk($fruits, 'test_print');

array_walk($fruits, 'test_alter', 'fruit');
echo "... and after:\n";

array_walk($fruits, 'test_print');
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Before ...:
d. lemon
a. orange
b. banana
c. apple
... and after:
d. fruit: lemon
a. fruit: orange
b. fruit: banana
c. fruit: apple
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>array_walk</function> example using anonymous function</title>
    <programlisting role="php">
<![CDATA[
<?php
$elements = ['a', 'b', 'c'];
array_walk($elements, function ($value, $key) {
  echo "{$key} => {$value}\n";
});
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
0 => a
1 => b
2 => c
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_walk_recursive</function></member>
    <member><function>iterator_apply</function></member>
    <member><function>list</function></member>
    <member><function>each</function></member>
    <member><function>call_user_func_array</function></member>
    <member><function>array_map</function></member>
    <member>&foreach;</member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
