<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d42b32e96ba3a36544b453128b5f515166bfc14c Maintainer: HonestQiao Status: ready -->
<refentry xml:id="function.array-walk-recursive" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_walk_recursive</refname>
  <refpurpose>对数组中的每个成员递归地应用用户函数</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>array_walk_recursive</methodname>
   <methodparam><type class="union"><type>array</type><type>object</type></type><parameter role="reference">array</parameter></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>arg</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   将用户自定义函数 <parameter>callback</parameter> 应用到
   <parameter>array</parameter> 数组中的每个单元。本函数会递归到更深层的数组中去。
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       输入的数组。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       典型情况下
   <parameter>callback</parameter> 接受两个参数。<parameter>array</parameter>
   参数的值作为第一个，键名作为第二个。
      </para>
      <note>
       <para>
        如果 <parameter>callback</parameter> 需要直接作用于数组中的值，则给
         <parameter>callback</parameter> 的第一个参数指定为<link linkend="language.references">引用</link>。这样任何对这些单元的改变也将会改变原始数组本身。
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>arg</parameter></term>
     <listitem>
      <para>
       如果提供了可选参数
        <parameter>arg</parameter>，将被作为第三个参数传递给 <parameter>callback</parameter>。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>


 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>array_walk_recursive</function> 例子</title>
    <programlisting role="php">
<![CDATA[
<?php
$sweet = array('a' => 'apple', 'b' => 'banana');
$fruits = array('sweet' => $sweet, 'sour' => 'lemon');

function test_print($item, $key)
{
    echo "$key holds $item\n";
}

array_walk_recursive($fruits, 'test_print');
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
a holds apple
b holds banana
sour holds lemon
]]>
    </screen>
    <para>
     注意上例中的键 '<literal>sweet</literal>' 并没有显示出来。任何其值为 <type>array</type> 的键都不会被传递到回调函数中去。
    </para>
   </example>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_walk</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->