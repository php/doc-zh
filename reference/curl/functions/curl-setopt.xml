<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 61374bbe228e8e9c55a24aba59a1e2bb2a871148 Maintainer: daijie Status: ready -->
<!-- CREDITS: mowangjuanzi, Luffy -->
<refentry xml:id="function.curl-setopt" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>curl_setopt</refname>
  <refpurpose>设置 cURL 传输选项</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>curl_setopt</methodname>
   <methodparam><type>CurlHandle</type><parameter>handle</parameter></methodparam>
   <methodparam><type>int</type><parameter>option</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
  </methodsynopsis>
  <para>
   为 cURL 会话句柄设置选项。
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    &curl.ch.description;
    <varlistentry>
     <term><parameter>option</parameter></term>
     <listitem>
      <para>
       需要设置的<literal>CURLOPT_XXX</literal>选项。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       将设置在<parameter>option</parameter>选项上的值。
      </para>
      <para>
       以下 <parameter>option</parameter> 参数的 <parameter>value</parameter>应该被设置成 <type>bool</type> 类型：
       <informaltable>
        <tgroup cols="3">
         <thead>
          <row>
           <entry valign="top">选项</entry>
           <entry valign="top">将 <parameter>value</parameter> 设置为</entry>
           <entry valign="top">备注</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry valign="top"><constant>CURLOPT_AUTOREFERER</constant></entry>
           <entry valign="top">
            &true; 时将根据 <literal>Location:</literal> 重定向时，自动设置 header 中的<literal>Referer:</literal>信息。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_COOKIESESSION</constant></entry>
           <entry valign="top">
            设为 &true;  时将开启新的一次 cookie 会话。它将强制 libcurl 忽略之前会话时存的其他 cookie。
            libcurl 在默认状况下无论是否为会话，都会储存、加载所有 cookie。会话 cookie 是指没有过期时间，只存活在会话之中。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_CERTINFO</constant></entry>
           <entry valign="top">
            &true; 将在安全传输时输出 SSL 证书信息到 <constant>STDERR</constant>。
           </entry>
           <entry valign="top">
            在 cURL 7.19.1 中添加。
            需要开启 <constant>CURLOPT_VERBOSE</constant> 才有效。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_CONNECT_ONLY</constant></entry>
           <entry valign="top">
            &true; 将让库执行所有需要的代理、验证、连接过程，但不传输数据。此选项用于
            HTTP、SMTP 和 POP3。
           </entry>
           <entry valign="top">
            在 7.15.2 中添加。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_CRLF</constant></entry>
           <entry valign="top">
            启用时将Unix的换行符转换成回车换行符。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_DNS_USE_GLOBAL_CACHE</constant></entry>
           <entry valign="top">
            &true; 会启用一个全局的DNS缓存。此选项非线程安全的，默认已开启。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FAILONERROR</constant></entry>
           <entry valign="top">
           当 HTTP 状态码大于等于 400，&true; 将将显示错误详情。 默认情况下将返回页面，忽略 HTTP 代码。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSL_FALSESTART</constant></entry>
           <entry valign="top">
            &true;  开启 TLS False Start （一种 TLS 握手优化方式）
           </entry>
           <entry valign="top">
            cURL 7.42.0 中添加。自 PHP 7.0.7 起有效。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FILETIME</constant></entry>
           <entry valign="top">
            &true;  时，会尝试获取远程文档中的修改时间信息。
            信息可通过<function>curl_getinfo</function>函数的<parameter>CURLINFO_FILETIME</parameter> 选项获取。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FOLLOWLOCATION</constant></entry>
           <entry valign="top">
            &true; 时将会根据服务器返回 HTTP 头中的 <literal>"Location: "</literal> 重定向。参阅 <constant>CURLOPT_MAXREDIRS</constant>。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FORBID_REUSE</constant></entry>
           <entry valign="top">
            &true; 在完成交互以后强制明确的断开连接，不能在连接池中重用。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FRESH_CONNECT</constant></entry>
           <entry valign="top">
            &true; 强制获取一个新的连接，而不是缓存中的连接。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FTP_USE_EPRT</constant></entry>
           <entry valign="top">
            &true; 时，当 FTP 下载时，使用 EPRT (和 LPRT)命令。 设置为 &false; 时禁用 EPRT 和 LPRT，仅仅使用PORT 命令。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FTP_USE_EPSV</constant></entry>
           <entry valign="top">
            &true; 时，在FTP传输过程中，回到 PASV 模式前，先尝试 EPSV 命令。设置为 &false; 时禁用 EPSV。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FTP_CREATE_MISSING_DIRS</constant></entry>
           <entry valign="top">
            &true; 时，当 ftp 操作不存在的目录时将创建它。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FTPAPPEND</constant></entry>
           <entry valign="top">
            &true; 为追加写入文件，而不是覆盖。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TCP_NODELAY</constant></entry>
           <entry valign="top">
            &true; 时禁用 TCP 的 Nagle 算法，就是减少网络上的小数据包数量。
           </entry>
           <entry valign="top">
            编译的版本在 libcurl 7.11.2 及以上时有效。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FTPASCII</constant></entry>
           <entry valign="top">
            <constant>CURLOPT_TRANSFERTEXT</constant> 的别名。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FTPLISTONLY</constant></entry>
           <entry valign="top">
            &true; 时只列出 FTP 目录的名字。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HEADER</constant></entry>
           <entry valign="top">
            启用时会将头文件的信息作为数据流输出。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry><constant>CURLINFO_HEADER_OUT</constant></entry>
           <entry valign="top">
            &true; 时追踪句柄的请求字符串。
           </entry>
           <entry valign="top">
            <constant>CURLINFO_</constant> 的前缀是指向的（intentional）。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HTTP09_ALLOWED</constant></entry>
           <entry valign="top">
            是否允许 HTTP/0.9 响应。从 libcurl 7.66.0 开始默认为 &false;；以前默认为 &true;。
           </entry>
           <entry valign="top">
            如果编译的 libcurl 版本 &gt;= 7.64.0，则分别从 PHP 7.3.15 和 7.4.3 开始可用
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HTTPGET</constant></entry>
           <entry valign="top">
            &true;  时会设置 HTTP 的 method 为 GET，由于默认是 GET，所以只有 method 被修改时才需要这个选项。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HTTPPROXYTUNNEL</constant></entry>
           <entry valign="top">
            &true;  会通过指定的 HTTP 代理来传输。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HTTP_CONTENT_DECODING</constant></entry>
           <entry valign="top">
            &false; 时获取原始 HTTP 响应主体。
           </entry>
           <entry valign="top">
            如果编译的 libcurl &gt;= 7.16.2 时可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_KEEP_SENDING_ON_ERROR</constant></entry>
           <entry valign="top">
            &true; 时，如果返回的 HTTP 代码等于或大于 300，则继续发送请求主体。默认操作是停止发送并关闭流或连接。适用于手动 NTLM 身份验证。大多数应用程序不需要此选项。
           </entry>
           <entry valign="top">
            如果编译的 libcurl &gt;= 7.51.0，则从 PHP 7.3.0 开始可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_MUTE</constant></entry>
           <entry valign="top">
            &true;  时将完全静默，无论是何 cURL 函数。
           </entry>
           <entry valign="top">
           在 cURL 7.15.5  中移出（可以使用 CURLOPT_RETURNTRANSFER 作为代替）
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_NETRC</constant></entry>
           <entry valign="top">
            &true;  时，在连接建立时，访问<filename>~/.netrc</filename>文件获取用户名和密码来连接远程站点。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_NOBODY</constant></entry>
           <entry valign="top">
           &true;  时将不输出 BODY 部分。同时 Mehtod 变成了 HEAD。修改为  &false; 时不会变成 GET。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_NOPROGRESS</constant></entry>
           <entry valign="top"><para>
            &true; 时关闭 cURL 的传输进度。
            <note>
             <para>
              PHP 默认自动设置此选项为 &true;，只有为了调试才需要改变设置。
             </para>
            </note>
            </para></entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_NOSIGNAL</constant></entry>
           <entry valign="top">
            &true; 时忽略所有的 cURL 传递给 PHP 进程的信号。在 SAPI 多线程传输时此项被默认启用，所以超时选项仍能使用。
           </entry>
           <entry valign="top">
            cURL 7.10时被加入。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PATH_AS_IS</constant></entry>
           <entry valign="top">
            &true; 不处理 dot dot sequences  （即 ../ ）
           </entry>
           <entry valign="top">
             cURL 7.42.0 时被加入。 PHP 7.0.7 起有效。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PIPEWAIT</constant></entry>
           <entry valign="top">
            &true; 则等待 pipelining/multiplexing。
           </entry>
           <entry valign="top">
             cURL 7.43.0 时被加入。 PHP 7.0.7 起有效。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_POST</constant></entry>
           <entry valign="top">
            &true; 时会发送 POST 请求，类型为：<literal>application/x-www-form-urlencoded</literal>，是 HTML 表单提交时最常见的一种。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PUT</constant></entry>
           <entry valign="top">
            &true; 时允许 HTTP 发送文件。要被 PUT 的文件必须在 <constant>CURLOPT_INFILE</constant>和<constant>CURLOPT_INFILESIZE</constant> 中设置。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_RETURNTRANSFER</constant></entry>
           <entry valign="top">
            &true;  将<function>curl_exec</function>获取的信息以字符串返回，而不是直接输出。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SASL_IR</constant></entry>
           <entry valign="top">
            &true; 开启，收到首包(first packet)后发送初始的响应(initial response)。
           </entry>
           <entry valign="top">
            cURL 7.31.10 中添加，自 PHP 7.0.7 起有效。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSL_ENABLE_ALPN</constant></entry>
           <entry valign="top">
            &false;  禁用 SSL 握手中的 ALPN (如果 SSL 后端的
            libcurl 内建支持) 用于协商到 http2。
           </entry>
           <entry valign="top">
            cURL 7.36.0 中增加， PHP 7.0.7 起有效。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSL_ENABLE_NPN</constant></entry>
           <entry valign="top">
            &false; 禁用 SSL 握手中的 NPN(如果 SSL 后端的
            libcurl 内建支持)，用于协商到 http2。
           </entry>
           <entry valign="top">
            cURL 7.36.0 中增加， PHP 7.0.7 起有效。
           </entry>
          </row>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
         
          <row>
           <entry valign="top"><constant>CURLOPT_SSL_VERIFYPEER</constant></entry>
           <entry valign="top">
            &false;  禁止 cURL 验证对等证书（peer's
            certificate）。要验证的交换证书可以在 <constant>CURLOPT_CAINFO</constant> 选项中设置，或在 <constant>CURLOPT_CAPATH</constant>中设置证书目录。
           </entry>
           <entry valign="top">
            自cURL 7.10开始默认为 &true;。从 cURL 7.10开始默认绑定安装。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSL_VERIFYSTATUS</constant></entry>
           <entry valign="top">
            &true; 验证证书状态。
           </entry>
           <entry valign="top">
             cURL 7.41.0 中添加， PHP 7.0.7 起有效。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_SSL_VERIFYPEER</constant></entry>
           <entry valign="top">
            &false; 会阻止 CURL 验证对等证书（peer's certificate）。可以使用 <constant>CURLOPT_CAINFO</constant>
            选项指定要验证的备用证书，或者可以使用 <constant>CURLOPT_CAPATH</constant> 选项指定证书目录。设置为
            &false; 时，无论如何验证对等证书都会成功。
           </entry>
           <entry valign="top">
            默认为 &true;。自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SAFE_UPLOAD</constant></entry>
           <entry valign="top">
            始终为 &true;，在 <constant>CURLOPT_POSTFIELDS</constant> 中禁用了对上传文件的 <literal>@</literal>
            前缀的支持，这意味着以 <literal>@</literal> 开头的值可以作为字段安全地传递。上传可使用 <classname>CURLFile</classname> 替代。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TCP_FASTOPEN</constant></entry>
           <entry valign="top">
            &true; 开启 TCP Fast Open。
           </entry>
           <entry valign="top">
            cURL 7.49.0 中添加， PHP 7.0.7 起有效。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TFTP_NO_OPTIONS</constant></entry>
           <entry valign="top">
            &true; 不发送 TFTP 的 options 请求。
           </entry>
           <entry valign="top">
            自 cURL 7.48.0 添加， PHP 7.0.7 起有效。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TRANSFERTEXT</constant></entry>
           <entry valign="top">
            &true;  对 FTP 传输使用 ASCII 模式。对于LDAP，它检索纯文本信息而非 HTML。在 Windows 系统上，系统不会把 <constant>STDOUT</constant> 设置成二进制 模式。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_UNRESTRICTED_AUTH</constant></entry>
           <entry valign="top">
            &true; 在使用<constant>CURLOPT_FOLLOWLOCATION</constant>重定向 header 中的多个 location 时继续发送用户名和密码信息，哪怕主机名已改变。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_UPLOAD</constant></entry>
           <entry valign="top">
            &true;  准备上传。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          
          
          <row>
           <entry valign="top"><constant>CURLOPT_VERBOSE</constant></entry>
           <entry valign="top">
            &true; 会输出所有的信息，写入到<constant>STDERR</constant>，或在<constant>CURLOPT_STDERR</constant>中指定的文件。
           </entry>
           <entry valign="top">
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
      <para>
       以下 <parameter>option</parameter> 的 <parameter>value</parameter> 应该被设置成 <type>int</type>：
       <informaltable>
        <tgroup cols="3">
         <thead>
          <row>
           <entry>选项</entry>
           <entry>设置 <parameter>value</parameter> 为</entry>
           <entry>备注</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry valign="top"><constant>CURLOPT_BUFFERSIZE</constant></entry>
           <entry valign="top">
            每次读入的缓冲的尺寸。当然不保证每次都会完全填满这个尺寸。
           </entry>
           <entry valign="top">
            在cURL 7.10中被加入。
           </entry>
          </row>
          <row>
           <entry><constant>CURLOPT_CONNECTTIMEOUT</constant></entry>
           <entry valign="top">
            在尝试连接时等待的秒数。设置为0，则无限等待。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_CONNECTTIMEOUT_MS</constant></entry>
           <entry valign="top">
            尝试连接等待的时间，以毫秒为单位。设置为0，则无限等待。 
            <!-- http://curl.haxx.se/libcurl/c/curl_easy_setopt.html -->
            如果 libcurl 编译时使用系统标准的名称解析器（ standard system name resolver），那部分的连接仍旧使用以秒计的超时解决方案，最小超时时间还是一秒钟。
           </entry>
           <entry valign="top">
            在 cURL 7.16.2 中被加入。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_DNS_CACHE_TIMEOUT</constant></entry>
           <entry valign="top">
            设置在内存中缓存 DNS 的时间，默认为120秒（两分钟）。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_EXPECT_100_TIMEOUT_MS</constant></entry>
           <entry valign="top">
            <literal>Expect: 100-continue</literal> 响应的超时时间，以毫秒为单位。
            默认为 1000 毫秒。
           </entry>
           <entry valign="top">
            cURL 7.36.0 中添加，自 PHP 7.0.7 有效。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FTPSSLAUTH</constant></entry>
           <entry valign="top">
            FTP验证方式（启用的时候）：<constant>CURLFTPAUTH_SSL</constant> (首先尝试SSL)，<constant>CURLFTPAUTH_TLS</constant> (首先尝试TLS)或<constant>CURLFTPAUTH_DEFAULT</constant> (让cURL 自个儿决定)。
           </entry>
           <entry valign="top">
            在 cURL 7.12.2 中被加入。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HEADEROPT</constant></entry>
           <entry valign="top">
            How to deal with headers. One of the following constants:
            <simpara>
             <constant>CURLHEADER_UNIFIED</constant>: the headers specified in
             <constant>CURLOPT_HTTPHEADER</constant> will be used in requests
             both to servers and proxies. With this option enabled, 
             <constant>CURLOPT_PROXYHEADER</constant> will not have any effect.
            </simpara>
            <simpara>
             <constant>CURLHEADER_SEPARATE</constant>: makes
             <constant>CURLOPT_HTTPHEADER</constant> headers only get sent to
             a server and not to a proxy. Proxy headers must be set with
             <constant>CURLOPT_PROXYHEADER</constant> to get used. Note that if
             a non-CONNECT request is sent to a proxy, libcurl will send both
             server headers and proxy headers. When doing CONNECT, libcurl will
             send <constant>CURLOPT_PROXYHEADER</constant> headers only to the
             proxy and then <constant>CURLOPT_HTTPHEADER</constant> headers
             only to the server.
            </simpara>
            <simpara>
             Defaults to <constant>CURLHEADER_SEPARATE</constant> as of cURL
             7.42.1, and <constant>CURLHEADER_UNIFIED</constant> before.
            </simpara>
           </entry>
           <entry valign="top">
            Added in cURL 7.37.0. Available since PHP 7.0.7.
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HTTP_VERSION</constant></entry>
           <entry valign="top">
            <parameter>CURL_HTTP_VERSION_NONE</parameter> (默认值，让 cURL 自己判断使用哪个版本)，<parameter>CURL_HTTP_VERSION_1_0</parameter> (强制使用 HTTP/1.0)或<parameter>CURL_HTTP_VERSION_1_1</parameter> (强制使用 HTTP/1.1)。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          
          
          <row>
           <entry valign="top"><constant>CURLOPT_HTTPAUTH</constant></entry>
           <entry valign="top">
            <para>
             使用的 HTTP 验证方法。选项有：
             <parameter>CURLAUTH_BASIC</parameter>、
             <parameter>CURLAUTH_DIGEST</parameter>、
             <parameter>CURLAUTH_GSSNEGOTIATE</parameter>、
             <parameter>CURLAUTH_NTLM</parameter>、
             <constant>CURLAUTH_AWS_SIGV4</constant>、
             <parameter>CURLAUTH_ANY</parameter> 和
             <parameter>CURLAUTH_ANYSAFE</parameter>。
            </para>
            <para>
             可以使用 <literal>|</literal> 位域（OR）操作符结合多个值，cURL 会让服务器选择受支持的方法，并选择最好的那个。
            </para>
            <para>
             <constant>CURLAUTH_ANY</constant> 设置所有的位。cURL 将自动选择它认为最安全的一个。
            </para>
            <para>
             <constant>CURLAUTH_ANYSAFE</constant> 设置了除 <constant>CURLAUTH_BASIC</constant> 以外所有的位。cURL
             将自动选择它认为最安全的一个。
            </para>
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_INFILESIZE</constant></entry>
           <entry valign="top">
            希望传给远程站点的文件尺寸，字节(byte)为单位。
            注意无法用这个选项阻止 libcurl 发送更多的数据，确切发送什么取决于 <constant>CURLOPT_READFUNCTION</constant>。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_LOW_SPEED_LIMIT</constant></entry>
           <entry valign="top">
            传输速度，每秒字节（bytes）数，根据<constant>CURLOPT_LOW_SPEED_TIME</constant>秒数统计是否因太慢而取消传输。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_LOW_SPEED_TIME</constant></entry>
           <entry valign="top">
            当传输速度小于<constant>CURLOPT_LOW_SPEED_LIMIT</constant>时(bytes/sec)，PHP会判断是否因太慢而取消传输。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_MAIL_RCPT_ALLLOWFAILS</constant></entry>
           <entry valign="top">
            允许一些收件人的 RCPT TO 命令失败。
           </entry>
           <entry valign="top">
            在向多个收件人发送数据时，如果至少有一个收件人导致 RCPT TO 命令返回错误，默认情况下 cURL 将中止 SMTP
            对话。此选项告诉 cURL 忽略错误并继续使用剩余的有效收件人。如果所有收件人触发 RCPT TO 失败并且设置了此
            flag，cURL 将中止 SMTP 对话并返回从最后一个 RCPT TO 命令收到的错误。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_MAXAGE_CONN</constant></entry>
           <entry valign="top">
            重新使用已存在连接时允许的最大空闲时间。默认最大时间设置为 <literal>118</literal> 秒。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_MAXFILESIZE_LARGE</constant></entry>
           <entry valign="top">
            The maximum file size in bytes allowed to download. If the file requested is found larger than this value,
            the transfer will not start and <constant>CURLE_FILESIZE_EXCEEDED</constant> will be returned.
            The file size is not always known prior to download, and for such files this option has no effect even if
            the file transfer ends up being larger than this given limit.
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_MAXLIFETIME_CONN</constant></entry>
           <entry valign="top">
            The maximum time in seconds, since the creation of the connection, that is allowed for an existing
            connection to have for it to be considered for reuse. If a connection is found in the cache that is older
            than this value, it will instead be closed once any in-progress transfers are complete.
            Default is 0 seconds, meaning the option is disabled and all connections are eligible for reuse.
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_MAXCONNECTS</constant></entry>
           <entry valign="top">
            允许的最大持久连接数。当达到限制时，将会关闭缓存中最早的连接，以防止增加已打开的连接数。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_MAXREDIRS</constant></entry>
           <entry valign="top">
            指定最多的 HTTP 重定向次数，这个选项是和 <constant>CURLOPT_FOLLOWLOCATION</constant> 一起使用的。
            默认值 <literal>20</literal> 是为了防止无限重定向。设置为 <literal>-1</literal> 允许无限重定向，<literal>0</literal> 拒绝所有重定向。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PORT</constant></entry>
           <entry valign="top">
            用来指定连接端口。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_POSTREDIR</constant></entry>
           <entry valign="top">
            位掩码， 1 (301 永久重定向), 2 (302 Found)
           和 4 (303 See Other) 
            设置 <constant>CURLOPT_FOLLOWLOCATION</constant> 时，什么情况下需要再次  HTTP POST 到重定向网址。
           </entry>
           <entry valign="top">
            cURL 7.19.1 中添加。
           </entry>
          </row>
          
          
          <row>
           <entry valign="top"><constant>CURLOPT_PROTOCOLS</constant></entry>
           <entry valign="top">
            <para>
             <constant>CURLPROTO_*</constant>的位掩码。
             启用时，会限制 libcurl 在传输过程中可使用哪些协议。
             这将允许你在编译libcurl时支持众多协议，但是限制只用允许的子集。默认 libcurl 将使用所有支持的协议。
             参见<constant>CURLOPT_REDIR_PROTOCOLS</constant>。
            </para>
            <para>
             可用的协议选项为：
             <parameter>CURLPROTO_HTTP</parameter>、
             <parameter>CURLPROTO_HTTPS</parameter>、
             <parameter>CURLPROTO_FTP</parameter>、
             <parameter>CURLPROTO_FTPS</parameter>、
             <parameter>CURLPROTO_SCP</parameter>、
             <parameter>CURLPROTO_SFTP</parameter>、
             <parameter>CURLPROTO_TELNET</parameter>、
             <parameter>CURLPROTO_LDAP</parameter>、
             <parameter>CURLPROTO_LDAPS</parameter>、
             <parameter>CURLPROTO_DICT</parameter>、
             <parameter>CURLPROTO_FILE</parameter>、
             <parameter>CURLPROTO_TFTP</parameter>、
             <constant>CURLPROTO_MQTT</constant>、
             <parameter>CURLPROTO_ALL</parameter>。
            </para>
           </entry>
           <entry valign="top">
            在 cURL 7.19.4 中被加入。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXYAUTH</constant></entry>
           <entry valign="top">
            HTTP 代理连接的验证方式。使用在<constant>CURLOPT_HTTPAUTH</constant>中的位掩码。
            当前仅仅支持 <parameter>CURLAUTH_BASIC</parameter>和<parameter>CURLAUTH_NTLM</parameter>。
           </entry>
           <entry valign="top">
            在 cURL 7.10.7 中被加入。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXYPORT</constant></entry>
           <entry valign="top">
            代理服务器的端口。端口也可以在<constant>CURLOPT_PROXY</constant>中设置。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXYTYPE</constant></entry>
           <entry valign="top">
            可以是 <constant>CURLPROXY_HTTP</constant> (默认值) 
         <constant>CURLPROXY_SOCKS4</constant>、
            <constant>CURLPROXY_SOCKS5</constant>、
  <constant>CURLPROXY_SOCKS4A</constant> 或
            <constant>CURLPROXY_SOCKS5_HOSTNAME</constant>。
           </entry>
           <entry valign="top">
            在 cURL 7.10 中被加入。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_REDIR_PROTOCOLS</constant></entry>
           <entry valign="top">
            <constant>CURLPROTO_*</constant> 值的位掩码。如果被启用，位掩码会限制 libcurl 在 <constant>CURLOPT_FOLLOWLOCATION</constant>开启时，使用的协议。
            默认允许除 FILE 和 SCP 外所有协议。
            这和 7.19.4 前的版本无条件支持所有支持的协议不同。关于协议常量，请参照<constant>CURLOPT_PROTOCOLS</constant>。
           </entry>
           <entry valign="top">
            在 cURL 7.19.4 中被加入。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_RESUME_FROM</constant></entry>
           <entry valign="top">
            在恢复传输时，传递字节为单位的偏移量（用来断点续传）。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SOCKS5_AUTH</constant></entry>
           <entry valign="top">
            <para>
             用于 SOCKS5 验证方法。选项是：<constant>CURLAUTH_BASIC</constant>、<constant>CURLAUTH_GSSAPI</constant>、<constant>CURLAUTH_NONE</constant>。
            </para>
            <para>
             位操作符 <literal>|</literal>（or）用于组合多个方法。如果这样做，cURL 将轮询服务器以查看它支持哪些方法并选择最佳方法。
            </para>
            <para>
             <constant>CURLAUTH_BASIC</constant> 允许用户名/密码验证。
            </para>
            <para>
             <constant>CURLAUTH_GSSAPI</constant> 允许 GSS-API 身份验证。
            </para>
            <para>
             <constant>CURLAUTH_NONE</constant> 允许不验证。
            </para>
            <para>
             默认为 <literal>CURLAUTH_BASIC|CURLAUTH_GSSAPI</literal>。使用 <constant>CURLOPT_PROXYUSERPWD</constant> 选项设置真实的用户名和密码。
            </para>
           </entry>
           <entry valign="top">
            从 7.3.0 和 curl &gt;= 7.55.0 开始可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSL_OPTIONS</constant></entry>
           <entry valign="top">
            Set SSL behavior options, which is a bitmask of any of the following constants:
            <simpara>
             <constant>CURLSSLOPT_ALLOW_BEAST</constant>: do not attempt to use
             any workarounds for a security flaw in the SSL3 and TLS1.0 protocols.
            </simpara>
            <simpara>
             <constant>CURLSSLOPT_NO_REVOKE</constant>: disable certificate
             revocation checks for those SSL backends where such behavior is
             present.
            </simpara>
            <simpara>
             <constant>CURLSSLOPT_AUTO_CLIENT_CERT</constant>: automatically
             locate and use a client certificate for authentication, when
             requested by the server. This option is only supported for
             Schannel (the native Windows SSL library).
            </simpara>
            <simpara>
             <constant>CURLSSLOPT_NATIVE_CA</constant>: use the operating system's
             native CA store for certificate verification. Works only on Windows
             when built to use OpenSSL. This option is experimental and behavior is subject to change.
            </simpara>
            <simpara>
             <constant>CURLSSLOPT_NO_PARTIALCHAIN</constant>: do not accept "partial" certificate
             chains, which cURL otherwise does by default. This option is only supported for OpenSSL
             and will fail the certificate verification if the chain ends with
             an intermediate certificate and not with a root certificate.
            </simpara>
            <simpara>
             <constant>CURLSSLOPT_REVOKE_BEST_EFFORT</constant>: ignore certificate revocation checks
             in case of missing or offline distribution points for those SSL backends where
             such behavior is present. This option is only supported for Schannel (the native Windows SSL library).
             If combined with <constant>CURLSSLOPT_NO_REVOKE</constant>, the latter takes precedence.
            </simpara>
           </entry>
           <entry valign="top">
            Added in cURL 7.25.0. Available since PHP 7.0.7.
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSL_VERIFYHOST</constant></entry>
           <entry valign="top">
            <literal>2</literal> 时验证 SSL 对等证书中的公用名称字段或主题备用名称（Subject Alternate Name，简称 SNA）字段是否与提供的主机名匹配。<literal>0</literal>
            时不检查名称。不应使用 <literal>1</literal>。在生产环境中，此选项的值应保持为 <literal>2</literal>（默认值）。
           </entry>
           <entry valign="top">
           在 cURL 7.28.1 中移除了对 <literal>1</literal> 的支持。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSLVERSION</constant></entry>
           <entry valign="top">
            <constant>CURL_SSLVERSION_DEFAULT</constant> (0)、<constant>CURL_SSLVERSION_TLSv1</constant> (1)、<constant>CURL_SSLVERSION_SSLv2</constant> (2)、<constant>CURL_SSLVERSION_SSLv3</constant> (3)、<constant>CURL_SSLVERSION_TLSv1_0</constant> (4)、<constant>CURL_SSLVERSION_TLSv1_1</constant> (5) 、<constant>CURL_SSLVERSION_TLSv1_2</constant> (6) 或
            <constant>CURL_SSLVERSION_TLSv1_3</constant> (7) 中的其中一个。
            <note>
             <para>
              最好别设置这个值并让它使用默认值。鉴于 SSLv2 和 SSLv3 中的已知漏洞，将其设置为 2 或 3 非常危险。
             </para>
            </note>
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_SSL_OPTIONS</constant></entry>
           <entry valign="top">
            设置代理 SSL 行为选项，它是以下任何常量的位掩码：
            <simpara>
             <constant>CURLSSLOPT_ALLOW_BEAST</constant>：不要尝试对 SSL3 和 TLS1.0 协议中的安全漏洞使用任何替代方法。
            </simpara>
            <simpara>
             <constant>CURLSSLOPT_NO_REVOKE</constant>：对存在此类行为的 SSL 后端禁用证书吊销检查。（curl &gt;= 7.44.0）
            </simpara>
            <simpara>
             <constant>CURLSSLOPT_NO_PARTIALCHAIN</constant>：不接受“部分”（partial）证书链，不然默认接受。（curl &gt;= 7.68.0）
            </simpara>
           </entry>
           <entry valign="top">
            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_SSL_VERIFYHOST</constant></entry>
           <entry valign="top">
            设置为 <literal>2</literal> 以根据代理名称验证 HTTPS 代理的证书名称字段。设置为 <literal>0</literal> 时，无论证书中使用的名称如何，连接都会成功。谨慎使用该能力！
            在 curl 7.28.0 及更早版本中 <literal>1</literal> 视为调试选项。从 curl 7.28.1 到 7.65.3 返回 <constant>CURLE_BAD_FUNCTION_ARGUMENT</constant>。
            从 curl 7.66.0 开始，<literal>1</literal> 和 <literal>2</literal> 被视为相同的值。在生产环境中，此选项的值应保持为 <literal>2</literal>（默认值）。
           </entry>
           <entry valign="top">
            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_SSLVERSION</constant></entry>
           <entry valign="top">
            <constant>CURL_SSLVERSION_DEFAULT</constant>、<constant>CURL_SSLVERSION_TLSv1</constant>、<constant>CURL_SSLVERSION_TLSv1_0</constant>、<constant>CURL_SSLVERSION_TLSv1_1</constant>、<constant>CURL_SSLVERSION_TLSv1_2</constant>、<constant>CURL_SSLVERSION_TLSv1_3</constant>、<constant>CURL_SSLVERSION_MAX_DEFAULT</constant>、<constant>CURL_SSLVERSION_MAX_TLSv1_0</constant>、<constant>CURL_SSLVERSION_MAX_TLSv1_1</constant>、<constant>CURL_SSLVERSION_MAX_TLSv1_2</constant>、<constant>CURL_SSLVERSION_MAX_TLSv1_3</constant>
            或 <constant>CURL_SSLVERSION_SSLv3</constant> 其中之一。
            <note>
             <para>
              最好的办法是不要设置它，使用默认的 <constant>CURL_SSLVERSION_DEFAULT</constant>，这将尝试找出远程 SSL 协议版本。
             </para>
            </note>
           </entry>
           <entry valign="top">
            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_STREAM_WEIGHT</constant></entry>
           <entry valign="top">
            设置 stream weight 数值 ( 1 和 256 之间的数字).
           </entry>
           <entry valign="top">
             cURL 7.46.0 中添加，自 PHP 7.0.7 起有效。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TCP_KEEPALIVE</constant></entry>
           <entry valign="top">
            如果设置为 <literal>1</literal>，将发送 TCP keepalive 探针。这些探针的延迟和频率可以通过 <constant>CURLOPT_TCP_KEEPIDLE</constant> 和 <constant>CURLOPT_TCP_KEEPINTVL</constant>
            选项来控制，前提是操作系统支持它们。如果设置为 <literal>0</literal>（默认值），将禁用 keepalive 探针。
           </entry>
           <entry valign="top">
            在 cURL 7.25.0 中添加。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TCP_KEEPIDLE</constant></entry>
           <entry valign="top">
            设置延迟（以秒为单位），如果启用了 <constant>CURLOPT_TCP_KEEPALIVE</constant>，操作系统将在连接空闲时等待，然后再发送
            keepalive 探针。并非所有操作系统都支持此选项。默认值为 <literal>60</literal>。
           </entry>
           <entry valign="top">
            在 cURL 7.25.0 中添加。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TCP_KEEPINTVL</constant></entry>
           <entry valign="top">
            设置间隔（以秒为单位），如果启用了 <constant>CURLOPT_TCP_KEEPALIVE</constant>，操作系统将在发送
            keepalive 探针之间等待。并非所有操作系统都支持此选项。默认值为 <literal>60</literal>。
           </entry>
           <entry valign="top">
            在 cURL 7.25.0 中添加。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TIMECONDITION</constant></entry>
           <entry valign="top">
            设置如何对待 <constant>CURLOPT_TIMEVALUE</constant>。
            使用 <parameter>CURL_TIMECOND_IFMODSINCE</parameter>，仅在页面 <constant>CURLOPT_TIMEVALUE</constant> 之后修改，才返回页面。没有修改则返回
            <literal>"304 Not Modified"</literal> 头，假设设置了 <constant>CURLOPT_HEADER</constant> 为 &true;。<parameter>CURL_TIMECOND_IFUNMODSINCE</parameter>
            则起相反的效果。使用 <constant>CURL_TIMECOND_NONE</constant> 忽略 <constant>CURLOPT_TIMEVALUE</constant> 并始终返回页面。默认为
            <parameter>CURL_TIMECOND_IFMODSINCE</parameter>。
           </entry>
           <entry valign="top">
            在 cURL 7.46.0 之前，默认值为 <constant>CURL_TIMECOND_IFMODSINCE</constant>。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TIMEOUT</constant></entry>
           <entry valign="top">
            允许 cURL 函数执行的最长秒数。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TIMEOUT_MS</constant></entry>
           <entry valign="top">
            设置cURL允许执行的最长毫秒数。
             <!-- http://curl.haxx.se/libcurl/c/curl_easy_setopt.html -->
            
            如果 libcurl 编译时使用系统标准的名称解析器（ standard system name resolver），那部分的连接仍旧使用以秒计的超时解决方案，最小超时时间还是一秒钟。
           </entry>
           <entry valign="top">
            在 cURL 7.16.2 中被加入。
           </entry>
          </row>
          
          <row>
           <entry valign="top"><constant>CURLOPT_TIMEVALUE</constant></entry>
           <entry valign="top">
            秒数，从 1970年1月1日开始。这个时间将由 <constant>CURLOPT_TIMECONDITION</constant> 使用。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_UPKEEP_INTERVAL_MS</constant></entry>
           <entry valign="top">
            Some protocols have "connection upkeep" mechanisms. These mechanisms usually send some traffic
            on existing connections in order to keep them alive. This option defines the connection upkeep interval.
            Currently, the only protocol with a connection upkeep mechanism is HTTP/2. When the connection upkeep
            interval is exceeded, an HTTP/2 PING frame is sent on the connection.
            Default is <literal>60</literal> seconds.
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_UPLOAD_BUFFERSIZE</constant></entry>
           <entry valign="top">
            Preferred buffer size in bytes for the cURL upload buffer.
            The upload buffer size by default is 64 kilobytes. The maximum buffer size allowed to be set is 2 megabytes.
            The minimum buffer size allowed to be set is 16 kilobytes.
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_MAX_RECV_SPEED_LARGE</constant></entry>
           <entry valign="top">
            如果下载速度超过了此速度(以每秒字节数来统计) ，即传输过程中累计的平均数，传输就会降速到这个参数的值。默认不限速。
           </entry>
           <entry valign="top">
             cURL 7.15.5 中添加。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_MAX_SEND_SPEED_LARGE</constant></entry>
           <entry valign="top">
            如果上传的速度超过了此速度(以每秒字节数来统计)，即传输过程中累计的平均数 
            ，传输就会降速到这个参数的值。默认不限速。
           </entry>
           <entry valign="top">
             cURL 7.15.5 中添加。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSH_AUTH_TYPES</constant></entry>
           <entry valign="top">
            A bitmask consisting of one or more of 
            <constant>CURLSSH_AUTH_PUBLICKEY</constant>, 
            <constant>CURLSSH_AUTH_PASSWORD</constant>, 
            <constant>CURLSSH_AUTH_HOST</constant>, 
            <constant>CURLSSH_AUTH_KEYBOARD</constant>. Set to 
            <constant>CURLSSH_AUTH_ANY</constant> to let libcurl pick one.
           </entry>
           <entry valign="top">
            cURL 7.16.1 中添加。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_IPRESOLVE</constant></entry>
           <entry valign="top">
            允许程序选择想要解析的 IP 地址类别。只有在地址有多种 ip 类别的时候才能用，可以的值有：
            <constant>CURL_IPRESOLVE_WHATEVER</constant>、
            <constant>CURL_IPRESOLVE_V4</constant>、
            <constant>CURL_IPRESOLVE_V6</constant>，默认是
            <constant>CURL_IPRESOLVE_WHATEVER</constant>。
           </entry>
           <entry valign="top">
            cURL 7.10.8 中添加。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FTP_FILEMETHOD</constant></entry>
           <entry valign="top">
            告诉 curl 使用哪种方式来获取 FTP(s) 服务器上的文件。可能的值有：
            <constant>CURLFTPMETHOD_DEFAULT</constant>、
            <constant>CURLFTPMETHOD_MULTICWD</constant>、
            <constant>CURLFTPMETHOD_NOCWD</constant> 和
            <constant>CURLFTPMETHOD_SINGLECWD</constant>。
           </entry>
           <entry valign="top">
            cURL 7.15.1 中添加。
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
      <para>
       对于下面的这些<parameter>option</parameter>，<parameter>value</parameter>应该被设置成 <type>string</type>：
       <informaltable>
        <tgroup cols="3">
         <thead>
          <row>
           <entry>选项</entry>
           <entry>设置的<parameter>value</parameter></entry>
           <entry>备注</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry valign="top"><constant>CURLOPT_ALTSVC</constant></entry>
           <entry valign="top">
            Pass the filename for cURL to use as the Alt-Svc cache file to read existing cache contents from and
            possibly also write it back to a after a transfer, unless <constant>CURLALTSVC_READONLYFILE</constant>
            is set via <constant>CURLOPT_ALTSVC_CTRL</constant>.
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_ALTSVC_CTRL</constant></entry>
           <entry valign="top">
            Populate the bitmask with the correct set of features to instruct cURL how to handle Alt-Svc for the
            transfers using this handle. cURL only accepts Alt-Svc headers over HTTPS. It will also only complete
            a request to an alternative origin if that origin is properly hosted over HTTPS.
            Setting any bit will enable the alt-svc engine. The options are:
            <constant>CURLALTSVC_H1</constant>,
            <constant>CURLALTSVC_H2</constant>,
            <constant>CURLALTSVC_H3</constant>, and
            <constant>CURLALTSVC_READONLYFILE</constant>.
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_AWS_SIGV4</constant></entry>
           <entry valign="top">
            <para>
             Provides AWS V4 signature authentication on HTTP(S) header.
            </para>
            <para>
             This option overrides any other authentication types that have been set in
             <constant>CURLOPT_HTTPAUTH</constant>. This method cannot be combined with other authentication types.
            </para>
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_CAINFO</constant></entry>
           <entry valign="top">
            一个保存着1个或多个用来让服务端验证的证书的文件名。这个参数仅仅在和<constant>CURLOPT_SSL_VERIFYPEER</constant>一起使用时才有意义。            .
           </entry>
           <entry valign="top">
            可能需要绝对路径。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_CAINFO_BLOB</constant></entry>
           <entry valign="top">
            The name of a PEM file holding one or more certificates to verify the
            peer with. This option overrides <constant>CURLOPT_CAINFO</constant>.
           </entry>
           <entry valign="top">
            Available as of PHP 8.2.0 and cURL 7.77.0
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_CAPATH</constant></entry>
           <entry valign="top">
            一个保存着多个CA证书的目录。这个选项是和<constant>CURLOPT_SSL_VERIFYPEER</constant>一起使用的。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_COOKIE</constant></entry>
           <entry valign="top">
            设定 HTTP 请求中<literal>"Cookie: "</literal>部分的内容。多个 cookie 用分号分隔，分号后带一个空格(例如， "<literal>fruit=apple; colour=red</literal>")。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_COOKIEFILE</constant></entry>
           <entry valign="top">
            包含 cookie 数据的文件名，cookie 文件的格式可以是 Netscape 格式，或者只是纯 HTTP 头部风格，存入文件。如果文件名是空的，不会加载 cookie，但 cookie 的处理仍旧启用。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_COOKIEJAR</constant></entry>
           <entry valign="top">
            连接结束后，比如，调用 curl_close 后，保存 cookie 信息的文件。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_COOKIELIST</constant></entry>
           <entry valign="top">
            cookie 字符串（即 Netscape/Mozilla 的单行格式，或常规 HTTP 样式的 Set-Cookie 头）将单个 cookie 添加到内部 cookie 存储中。
            <literal>"ALL"</literal> 擦除内存中保存的所有 cookie。
            <literal>"SESS"</literal> 擦除内存中保存的所有会话 cookie。
            <literal>"FLUSH"</literal> 将所有已知的 cookie 写入到 <constant>CURLOPT_COOKIEJAR</constant> 指定的文件。
            <literal>"RELOAD"</literal> 从 <constant>CURLOPT_COOKIEFILE</constant> 指定的文件中加载所有 cookie。
           </entry>
           <entry valign="top">
            自 cURL 7.14.1 起可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_CUSTOMREQUEST</constant></entry>
           <entry valign="top"><para>
            HTTP 请求时，使用自定义的 Method 来代替<literal>"GET"</literal>或<literal>"HEAD"</literal>。对 <literal>"DELETE"</literal> 或者其他更隐蔽的 HTTP 请求有用。
            有效值如 <literal>"GET"</literal>，<literal>"POST"</literal>，<literal>"CONNECT"</literal>等等；也就是说，不要在这里输入整行 HTTP 请求。例如输入<literal>"GET /index.html HTTP/1.0\r\n\r\n"</literal>是不正确的。
            <note>
             <para>
              不确定服务器支持这个自定义方法则不要使用它。
             </para>
            </note>
            </para>
           </entry>
           <entry valign="top">
           </entry>
          </row>
          
           <row>
           <entry valign="top"><constant>CURLOPT_DEFAULT_PROTOCOL</constant></entry>
           <entry valign="top"><para>
            URL不带协议的时候，使用的默认协议。
           </para></entry>
           <entry valign="top">
            cURL 7.45.0 中添加，自 PHP 7.0.7 起有效。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_DNS_INTERFACE</constant></entry>
           <entry valign="top"><para>
            Set the name of the network interface that the DNS resolver should bind to.
            This must be an interface name (not an address).
            </para></entry>
           <entry valign="top">
            Added in cURL 7.33.0. Available since PHP 7.0.7.
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_DNS_LOCAL_IP4</constant></entry>
           <entry valign="top"><para>
            Set the local IPv4 address that the resolver should bind to. The argument
            should contain a single numerical IPv4 address as a string.
            </para></entry>
           <entry valign="top">
            Added in cURL 7.33.0. Available since PHP 7.0.7.
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_DNS_LOCAL_IP6</constant></entry>
           <entry valign="top"><para>
            Set the local IPv6 address that the resolver should bind to. The argument
            should contain a single numerical IPv6 address as a string.
            </para></entry>
           <entry valign="top">
            Added in cURL 7.33.0. Available since PHP 7.0.7.
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_EGDSOCKET</constant></entry>
           <entry valign="top">
            类似<constant>CURLOPT_RANDOM_FILE</constant>，除了一个Entropy Gathering Daemon套接字。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_ENCODING</constant></entry>
           <entry valign="top">
            HTTP请求头中<literal>"Accept-Encoding: "</literal>的值。
            这使得能够解码响应的内容。
            支持的编码有<literal>"identity"</literal>，<literal>"deflate"</literal>和<literal>"gzip"</literal>。如果为空字符串<literal>""</literal>，会发送所有支持的编码类型。
           </entry>
           <entry valign="top">
            在 cURL 7.10 中被加入。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_FTPPORT</constant></entry>
           <entry valign="top">
            这个值将被用来获取供FTP"PORT"指令所需要的IP地址。
            "PORT" 指令告诉远程服务器连接到我们指定的IP地址。这个字符串可以是纯文本的IP地址、主机名、一个网络接口名（UNIX下）或者只是一个'-'来使用默认的 IP 地址。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HSTS</constant></entry>
           <entry valign="top">
            <para>
             HSTS (HTTP Strict Transport Security) cache file name.
            </para>
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HSTS_CTRL</constant></entry>
           <entry valign="top">
            <para>
             Controls HSTS (HTTP Strict Transport Security) behavior. Populate the bitmask with the correct set of
             features to instruct cURL how to handle HSTS for the transfers using this handle.
             <constant>CURLHSTS_ENABLE</constant> enables the in-memory HSTS cache. If the HSTS cache file is defined,
             set <constant>CURLHSTS_READONLYFILE</constant> to make the file read-only.
            </para>
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_INTERFACE</constant></entry>
           <entry valign="top">
            发送的网络接口（interface），可以是一个接口名、IP 地址或者是一个主机名。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_KEYPASSWD</constant></entry>
           <entry valign="top">
            使用 <constant>CURLOPT_SSLKEY</constant> 
            或 <constant>CURLOPT_SSH_PRIVATE_KEYFILE</constant> 私钥时候的密码。
           </entry>
           <entry valign="top">
            在 cURL 7.16.1 中添加。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_KRB4LEVEL</constant></entry>
           <entry valign="top">
            KRB4 (Kerberos 4) 安全级别。下面的任何值都是有效的(从低到高的顺序)：<literal>"clear"</literal>、<literal>"safe"</literal>、<literal>"confidential"</literal>、<literal>"private".</literal>。如果字符串以上这些，将使用<literal>"private"</literal>。
            这个选项设置为 &null; 时将禁用 KRB4 安全认证。目前 KRB4 安全认证只能用于 FTP 传输。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_LOGIN_OPTIONS</constant></entry>
           <entry valign="top">
            Can be used to set protocol specific login options, such as the
            preferred authentication mechanism via "AUTH=NTLM" or "AUTH=*",
            and should be used in conjunction with the
            <constant>CURLOPT_USERNAME</constant> option.
           </entry>
           <entry valign="top">
            Added in cURL 7.34.0. Available since PHP 7.0.7.
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PINNEDPUBLICKEY</constant></entry>
           <entry valign="top">
             Set the pinned public key.
             The string can be the file name of your pinned public key. The file
             format expected is "PEM" or "DER". The string can also be any
             number of base64 encoded sha256 hashes preceded by "sha256//" and
             separated by ";".
           </entry>
           <entry valign="top">
            Added in cURL 7.39.0. Available since PHP 7.0.7.
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_POSTFIELDS</constant></entry>
           <entry valign="top">
            <simpara>
            在 HTTP “POST”操作中要发送的所有数据。
            这个参数可以是 urlencoded 后的字符串，类似'<literal>para1=val1&amp;para2=val2&amp;...</literal>'，也可以使用一个以字段名为键值，字段数据为值的数组。
            如果<parameter>value</parameter>是一个数组，<literal>Content-Type</literal>头将会被设置成<literal>multipart/form-data</literal>。
            </simpara>
            <simpara>
             可以使用 <classname>CURLFile</classname> 或 <classname>CURLStringFile</classname> 发送文件，在这种情况下，<parameter>value</parameter> 必须是数组。
            </simpara>
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PRIVATE</constant></entry>
           <entry valign="top">
            Any data that should be associated with this cURL handle. This data
            can subsequently be retrieved with the
            <constant>CURLINFO_PRIVATE</constant> option of
            <function>curl_getinfo</function>. cURL does nothing with this data.
            When using a cURL multi handle, this private data is typically a
            unique key to identify a standard cURL handle.
           </entry>
           <entry valign="top">
            Added in cURL 7.10.3. 
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PRE_PROXY</constant></entry>
           <entry valign="top">
            Set a <type>string</type> holding the host name or dotted numerical 
            IP address to be used as the preproxy that curl connects to before 
            it connects to the HTTP(S) proxy specified in the 
            <constant>CURLOPT_PROXY</constant> option for the upcoming request.
            The preproxy can only be a SOCKS proxy and it should be prefixed with
            <literal>[scheme]://</literal> to specify which kind of socks is used.
            A numerical IPv6 address must be written within [brackets].
            Setting the preproxy to an empty string explicitly disables the use of a preproxy. 
            To specify port number in this string, append <literal>:[port]</literal>
            to the end of the host name. The proxy's port number may optionally be 
            specified with the separate option <constant>CURLOPT_PROXYPORT</constant>. 
            Defaults to using port 1080 for proxies if a port is not specified.
           </entry>
           <entry valign="top">
            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY</constant></entry>
           <entry valign="top">
            HTTP 代理通道。
           </entry>
           <entry valign="top">
           </entry>
          </row>
           <row>
           <entry valign="top"><constant>CURLOPT_PROXY_SERVICE_NAME</constant></entry>
           <entry valign="top">
            代理验证服务的名称。
           </entry>
           <entry valign="top">
            在 cURL 7.43.0 中添加了 HTTP 代理，在 cURL 7.49.0 中添加了 SOCKS5 代理。自 PHP 7.0.7 起可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_CAINFO</constant></entry>
           <entry valign="top">
            The path to proxy Certificate Authority (CA) bundle. Set the path as a
            <type>string</type> naming a file holding one or more certificates to
            verify the HTTPS proxy with.
            This option is for connecting to an HTTPS proxy, not an HTTPS server.
            Defaults set to the system path where libcurl's cacert bundle is assumed
            to be stored.
           </entry>
           <entry valign="top">
            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_CAINFO_BLOB</constant></entry>
           <entry valign="top">
            The name of a PEM file holding one or more certificates to verify the HTTPS proxy with.
            This option is for connecting to an HTTPS proxy, not an HTTPS server.
            Defaults set to the system path where libcurl's cacert bundle is assumed
            to be stored.
           </entry>
           <entry valign="top">
            Available as of PHP 8.2.0 and libcurl &gt;= cURL 7.77.0.
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_CAPATH</constant></entry>
           <entry valign="top">
            The directory holding multiple CA certificates to verify the HTTPS proxy with.
           </entry>
           <entry valign="top">
            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_CRLFILE</constant></entry>
           <entry valign="top">
            Set the file name with the concatenation of CRL (Certificate Revocation List) 
            in PEM format to use in the certificate validation that occurs during 
            the SSL exchange.
           </entry>
           <entry valign="top">
            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_KEYPASSWD</constant></entry>
           <entry valign="top">
            Set the string be used as the password required to use the 
            <constant>CURLOPT_PROXY_SSLKEY</constant> private key. You never needed a 
            passphrase to load a certificate but you need one to load your private key.
            This option is for connecting to an HTTPS proxy, not an HTTPS server.
           </entry>
           <entry valign="top">
            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_PINNEDPUBLICKEY</constant></entry>
           <entry valign="top">
            Set the pinned public key for HTTPS proxy. The string can be the file name 
            of your pinned public key. The file format expected is "PEM" or "DER". 
            The string can also be any number of base64 encoded sha256 hashes preceded by 
            "sha256//" and separated by ";"
           </entry>
           <entry valign="top">
            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_SSLCERT</constant></entry>
           <entry valign="top">
            The file name of your client certificate used to connect to the HTTPS proxy. 
            The default format is "P12" on Secure Transport and "PEM" on other engines, 
            and can be changed with <constant>CURLOPT_PROXY_SSLCERTTYPE</constant>.
            With NSS or Secure Transport, this can also be the nickname of the certificate 
            you wish to authenticate with as it is named in the security database. 
            If you want to use a file from the current directory, please precede it with 
            "./" prefix, in order to avoid confusion with a nickname.
           </entry>
           <entry valign="top">
            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_SSLCERTTYPE</constant></entry>
           <entry valign="top">
            The format of your client certificate used when connecting to an HTTPS proxy.
            Supported formats are "PEM" and "DER", except with Secure Transport. 
            OpenSSL (versions 0.9.3 and later) and Secure Transport 
            (on iOS 5 or later, or OS X 10.7 or later) also support "P12" for 
            PKCS#12-encoded files. Defaults to "PEM".
           </entry>
           <entry valign="top">
            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_SSL_CIPHER_LIST</constant></entry>
           <entry valign="top">
            The list of ciphers to use for the connection to the HTTPS proxy. 
            The list must be syntactically correct, it consists of one or more cipher 
            strings separated by colons. Commas or spaces are also acceptable separators 
            but colons are normally used, !, - and + can be used as operators.
           </entry>
           <entry valign="top">
            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_TLS13_CIPHERS</constant></entry>
           <entry valign="top">
            The list of cipher suites to use for the TLS 1.3 connection to a proxy.
            The list must be syntactically correct, it consists of one or more 
            cipher suite strings separated by colons. This option is currently used 
            only when curl is built to use OpenSSL 1.1.1 or later. 
            If you are using a different SSL backend you can try setting 
            TLS 1.3 cipher suites by using the <constant>CURLOPT_PROXY_SSL_CIPHER_LIST</constant> option.
           </entry>
           <entry valign="top">
            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.61.0 起可用。使用 OpenSSL &gt;= 1.1.1 编译时可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_SSLKEY</constant></entry>
           <entry valign="top">
            The file name of your private key used for connecting to the HTTPS proxy. 
            The default format is "PEM" and can be changed with 
            <constant>CURLOPT_PROXY_SSLKEYTYPE</constant>. 
            (iOS and Mac OS X only) This option is ignored if curl was built against Secure Transport.
           </entry>
           <entry valign="top">
            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。如果启用内置 TLS，则可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_SSLKEYTYPE</constant></entry>
           <entry valign="top">
            The format of your private key. Supported formats are "PEM", "DER" and "ENG".
           </entry>
           <entry valign="top">
            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_TLSAUTH_PASSWORD</constant></entry>
           <entry valign="top">
            The password to use for the TLS authentication method specified with the 
            <constant>CURLOPT_PROXY_TLSAUTH_TYPE</constant> option. Requires that the 
            <constant>CURLOPT_PROXY_TLSAUTH_USERNAME</constant> option to also be set.
           </entry>
           <entry valign="top">
            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_TLSAUTH_TYPE</constant></entry>
           <entry valign="top">
            The method of the TLS authentication used for the HTTPS connection. Supported method is "SRP".
            <note>
             <para>
              Secure Remote Password (SRP) authentication for TLS provides mutual authentication 
              if both sides have a shared secret. To use TLS-SRP, you must also set the 
              <constant>CURLOPT_PROXY_TLSAUTH_USERNAME</constant> and 
              <constant>CURLOPT_PROXY_TLSAUTH_PASSWORD</constant> options.
             </para>
            </note>
           </entry>
           <entry valign="top">
            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXY_TLSAUTH_USERNAME</constant></entry>
           <entry valign="top">
            The username to use for the HTTPS proxy TLS authentication method specified with the
            <constant>CURLOPT_PROXY_TLSAUTH_TYPE</constant> option. Requires that the
            <constant>CURLOPT_PROXY_TLSAUTH_PASSWORD</constant> option to also be set.
           </entry>
           <entry valign="top">
            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.52.0 起可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROXYUSERPWD</constant></entry>
           <entry valign="top">
            一个用来连接到代理的 <literal>"[username]:[password]"</literal> 格式的字符串。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_RANDOM_FILE</constant></entry>
           <entry valign="top">
            一个被用来生成 SSL 随机数种子的文件名。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_RANGE</constant></entry>
           <entry valign="top">
            以<literal>"X-Y"</literal>的形式，其中X和Y都是可选项获取数据的范围，以字节计。HTTP传输线程也支持几个这样的重复项中间用逗号分隔如<literal>"X-Y,N-M"</literal>。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_REFERER</constant></entry>
           <entry valign="top">
            在HTTP请求头中<literal>"Referer: "</literal>的内容。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          
          <row>
           <entry valign="top"><constant>CURLOPT_SASL_AUTHZID</constant></entry>
           <entry valign="top">
            The authorization identity (authzid) for the transfer. Only applicable to the PLAIN SASL
            authentication mechanism where it is optional. When not specified, only the authentication identity
            (authcid) as specified by the username will be sent to the server, along with the password.
            The server will derive the authzid from the authcid when not provided, which it will then use internally.
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SERVICE_NAME</constant></entry>
           <entry valign="top">
            验证服务的名称
           </entry>
           <entry valign="top">
             cURL 7.43.0 起添加，自 PHP 7.0.7 有效。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSH_HOST_PUBLIC_KEY_MD5</constant></entry>
           <entry valign="top">
            包含 32 位长的 16 进制数值。这个字符串应该是远程主机公钥（public key） 的 MD5 校验值。在不匹配的时候 libcurl 会拒绝连接。
            此选项仅用于  SCP 和 SFTP 的传输。
           </entry>
           <entry valign="top">
            cURL 7.17.1 中添加。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSH_HOST_PUBLIC_KEY_SHA256</constant></entry>
           <entry valign="top">
            Base64-encoded SHA256 hash of the remote host's public key.
            The transfer will fail if the given hash does not match the hash the remote host provides.
           </entry>
           <entry valign="top">
           </entry>
          </row>
          
          <row>
           <entry valign="top"><constant>CURLOPT_SSH_PUBLIC_KEYFILE</constant></entry>
           <entry valign="top">
            The file name for your public key. If not used, libcurl defaults to 
            $HOME/.ssh/id_dsa.pub if the HOME environment variable is set, 
            and just "id_dsa.pub" in the current directory if HOME is not set.
           </entry>
           <entry valign="top">
            Added in cURL 7.16.1. 
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSH_PRIVATE_KEYFILE</constant></entry>
           <entry valign="top">
            The file name for your private key. If not used, libcurl defaults to 
            $HOME/.ssh/id_dsa if the HOME environment variable is set, 
            and just "id_dsa" in the current directory if HOME is not set. 
            If the file is password-protected, set the password with 
            <constant>CURLOPT_KEYPASSWD</constant>.
           </entry>
           <entry valign="top">
            Added in cURL 7.16.1. 
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSL_CIPHER_LIST</constant></entry>
           <entry valign="top">
            一个SSL的加密算法列表。例如<literal>RC4-SHA</literal>和<literal>TLSv1</literal>都是可用的加密列表。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSL_EC_CURVES</constant></entry>
           <entry valign="top">
            A colon delimited list of elliptic curve algorithms. For example,
            <literal>X25519:P-521</literal> is a valid list of two elliptic curves.
            This option defines the client's key exchange algorithms in the SSL handshake,
            if the SSL backend cURL is built to use supports it.
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSLCERT</constant></entry>
           <entry valign="top">
            一个包含 PEM 格式证书的文件名。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSLCERTPASSWD</constant></entry>
           <entry valign="top">
            使用<constant>CURLOPT_SSLCERT</constant>证书需要的密码。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSLCERTTYPE</constant></entry>
           <entry valign="top">
            证书的类型。支持的格式有<literal>"PEM"</literal> (默认值), <literal>"DER"</literal>和<literal>"ENG"</literal>。
           </entry>
           <entry valign="top">
            在 cURL 7.9.3中 被加入。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSLENGINE</constant></entry>
           <entry valign="top">
            用来在<constant>CURLOPT_SSLKEY</constant>中指定的SSL私钥的加密引擎变量。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSLENGINE_DEFAULT</constant></entry>
           <entry valign="top">
            用来做非对称加密操作的变量。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSLKEY</constant></entry>
           <entry valign="top">
            包含 SSL 私钥的文件名。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSLKEYPASSWD</constant></entry>
           <entry valign="top"><para>
            在 <constant>CURLOPT_SSLKEY</constant>中指定了的SSL私钥的密码。
            <note>
             <para>
              由于这个选项包含了敏感的密码信息，记得保证这个PHP脚本的安全。
             </para>
            </note>
            </para></entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_SSLKEYTYPE</constant></entry>
           <entry valign="top">
            <constant>CURLOPT_SSLKEY</constant>中规定的私钥的加密类型，支持的密钥类型为<literal>"PEM"</literal>(默认值)、<literal>"DER"</literal>和<literal>"ENG"</literal>。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_TLS13_CIPHERS</constant></entry>
           <entry valign="top">
            用于 TLS 1.3 连接的加密套件列表。列表必须在语法上正确，它由一个或多个用冒号分隔的加密套件字符串组成。当前仅当 curl 编译为使用 OpenSSL 1.1.1
            或更高版本时才使用此选项。如果使用不同的 SSL 后端，<constant>CURLOPT_SSL_CIPHER_LIST</constant> 选项设置 TLS 1.3 加密套件。
           </entry>
           <entry valign="top">
            自 PHP 7.3.0 和 libcurl &gt;= cURL 7.61.0 起可用。使用 OpenSSL &gt;= 1.1.1 编译时可用。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_UNIX_SOCKET_PATH</constant></entry>
           <entry valign="top">
            使用 Unix 套接字作为连接，并用指定的 <type>string</type> 作为路径。
           </entry>
           <entry valign="top">
            cURL 7.40.0 中添加， PHP 7.0.7 起有效。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_URL</constant></entry>
           <entry valign="top">
            需要获取的 URL 地址，也可以在<function>curl_init</function> 初始化会话的时候。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_USERAGENT</constant></entry>
           <entry valign="top">
            在HTTP请求中包含一个<literal>"User-Agent: "</literal>头的字符串。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_USERNAME</constant></entry>
           <entry valign="top">
            用于身份验证的用户名。
           </entry>
           <entry valign="top">
            cURL 7.19.1 中添加。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PASSWORD</constant></entry>
           <entry valign="top">
            用于身份验证的密码。
           </entry>
           <entry valign="top">
            cURL 7.19.1 中添加。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_USERPWD</constant></entry>
           <entry valign="top">
            传递一个连接中需要的用户名和密码，格式为：<literal>"[username]:[password]"</literal>。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_XOAUTH2_BEARER</constant></entry>
           <entry valign="top">
            指定 OAuth 2.0 access token。
           </entry>
           <entry valign="top">
            cURL 7.33.0 中添加，自 PHP 7.0.7 添加。
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
      <para>以下<parameter>option</parameter>，<parameter>value</parameter>应该被设置成数组：
       <informaltable>
        <tgroup cols="3">
         <thead>
          <row>
           <entry>选项</entry>
           <entry>可选<parameter>value</parameter>值</entry>
           <entry>备注</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry valign="top"><constant>CURLOPT_CONNECT_TO</constant></entry>
           <entry valign="top">
            连接到指定的主机和端口，替换 URL 中的主机和端口。接受指定字符串格式的数组：
            <literal>HOST:PORT:CONNECT-TO-HOST:CONNECT-TO-PORT</literal>。
           </entry>
           <entry valign="top">
             cURL 7.49.0 中添加， PHP 7.0.7 起有效。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_HTTP200ALIASES</constant></entry>
           <entry valign="top">
            HTTP 200 响应码数组，数组中的响应码被认为是正确的响应，而非错误。
           </entry>
           <entry valign="top">
            在 cURL 7.10.3 中被加入。
           </entry>
          </row>
          
          
          
          
          
          <row>
           <entry valign="top"><constant>CURLOPT_HTTPHEADER</constant></entry>
           <entry valign="top">
            设置 HTTP 头字段的数组。格式：
            <code>
             array('Content-type: text/plain', 'Content-length: 100')
            </code>
           </entry>
           <entry valign="top">
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_POSTQUOTE</constant></entry>
           <entry valign="top">
            在 FTP 请求执行完成后，在服务器上执行的一组array格式的 FTP 命令。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          
          <row>
           <entry valign="top"><constant>CURLOPT_PROXYHEADER</constant></entry>
           <entry valign="top">
            传给代理的自定义 HTTP 头。
           </entry>
           <entry valign="top">
             cURL 7.37.0 中添加，自 PHP 7.0.7 添加。
           </entry>
          </row>
          
          
          <row>
           <entry valign="top"><constant>CURLOPT_QUOTE</constant></entry>
           <entry valign="top">
            一组先于 FTP 请求的在服务器上执行的FTP命令。
           </entry>
           <entry valign="top">
           </entry>
          </row>
          
          <row>
           <entry valign="top"><constant>CURLOPT_RESOLVE</constant></entry>
           <entry valign="top">
            提供自定义地址，指定了主机和端口。
            包含主机、端口和 ip 地址的字符串，组成 array 的，每个元素以冒号分隔。格式：
            <code>
             array("example.com:80:127.0.0.1")
            </code>
           </entry>
           <entry valign="top">
            在 cURL 7.21.3 中添加。
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
      <para>
以下 <parameter>option</parameter>，<parameter>value</parameter>应该被设置成流资源
        （例如使用<function>fopen</function>）：
       <informaltable>
        <tgroup cols="3">
         <thead>
          <row>
           <entry>选项</entry>
           <entry>可选<parameter>value</parameter>值</entry>
          </row>
         </thead>
         <tbody>
          
          
          
          
          <row>
           <entry valign="top"><constant>CURLOPT_FILE</constant></entry>
           <entry valign="top">
            设置输出文件，默认为<constant>STDOUT</constant> (浏览器)。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_INFILE</constant></entry>
           <entry valign="top">
            上传文件时需要读取的文件。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_STDERR</constant></entry>
           <entry valign="top">
            错误输出的地址，取代默认的<constant>STDERR</constant>。
           </entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_WRITEHEADER</constant></entry>
           <entry valign="top">
            设置 header 部分内容的写入的文件地址。
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
      <para>
       以下<parameter>option</parameter> 的 <parameter>value</parameter>应该是有效的函数或者闭包：
       <informaltable>
        <tgroup cols="3">
         <thead>
          <row>
           <entry>选项</entry>
           <entry>设置 <parameter>value</parameter> 为</entry>
           <entry>笔记</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry valign="top"><constant>CURLOPT_HEADERFUNCTION</constant></entry>
           <entry valign="top">
            设置一个回调函数，这个函数有两个参数，第一个是cURL的资源句柄，第二个是输出的 header 数据。header数据的输出必须依赖这个函数，返回已写入的数据大小。
           </entry>
           <entry></entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PASSWDFUNCTION</constant></entry>
           <entry valign="top">
            设置一个回调函数，有三个参数，第一个是cURL的资源句柄，第二个是一个密码提示符，第三个参数是密码长度允许的最大值。返回密码的值。
           </entry>
           <entry>从 PHP 7.3.0 开始移除。</entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_PROGRESSFUNCTION</constant></entry>
           <entry valign="top">
            <para>
            设置一个回调函数，有五个参数，第一个是cURL的资源句柄，第二个是预计要下载的总字节（bytes）数。第三个是目前下载的字节数，第四个是预计传输中总上传字节数，第五个是目前上传的字节数。
            </para>
            <note>
             <para>
              只有设置 <constant>CURLOPT_NOPROGRESS</constant>
              选项为 &false; 时才会调用这个回调函数。
             </para>
            </note>
              <para>
               返回非零值将中断传输。
               传输将设置 <constant>CURLE_ABORTED_BY_CALLBACK</constant> 错误。
            </para>
           </entry>
           <entry></entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_READFUNCTION</constant></entry>
           <entry valign="top">
            回调函数名。该函数应接受三个参数。第一个是 cURL resource；第二个是通过选项 
<constant>CURLOPT_INFILE</constant> 传给 cURL 的 stream resource；第三个参数是最大可以读取的数据的数量。回
调函数必须返回一个字符串，长度小于或等于请求的数据量（第三个参数）。一般从传入的 stream 
resource 读取。返回空字符串作为 <literal>EOF</literal>（文件结束） 信号。
           </entry>
           <entry></entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_WRITEFUNCTION</constant></entry>
           <entry valign="top">
            回调函数名。该函数应接受两个参数。第一个是 cURL resource；第二个是要写入的数据字符串。数
据必须在函数中被保存。
            函数必须准确返回写入数据的字节数，否则传输会被一个错误所中
断。
           </entry>
           <entry></entry>
          </row>
          <row>
           <entry valign="top"><constant>CURLOPT_XFERINFOFUNCTION</constant></entry>
           <entry valign="top">
            接受两个参数的回调。与 <constant>CURLOPT_PROGRESSFUNCTION</constant> 具有相似的目的，但更现代并且是 cURL 的首选选项。
           </entry>
           <entry valign="top">
            在 7.32.0 中添加。 从 PHP 8.2.0 开始可用。
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
      <para>
       其他值：
       <informaltable>
        <tgroup cols="3">
         <thead>
          <row>
           <entry>Option</entry>
           <entry>设置 <parameter>value</parameter> 为</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry valign="top"><constant>CURLOPT_SHARE</constant></entry>
           <entry valign="top"> <function>curl_share_init</function> 返回的结果。
            使 cURL 可以处理共享句柄里的数据。
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      &curl.changelog.handle-param;
      <row>
       <entry>7.3.15、7.4.3</entry>
       <entry>
        引入 <constant>CURLOPT_HTTP09_ALLOWED</constant>。
       </entry>
      </row>
      <row>
       <entry>7.3.0</entry>
       <entry>
        引入 <constant>CURLOPT_ABSTRACT_UNIX_SOCKET</constant>、<constant>CURLOPT_KEEP_SENDING_ON_ERROR</constant>、<constant>CURLOPT_PRE_PROXY</constant>、<constant>CURLOPT_PROXY_CAINFO</constant>、<constant>CURLOPT_PROXY_CAPATH</constant>、<constant>CURLOPT_PROXY_CRLFILE</constant>、<constant>CURLOPT_PROXY_KEYPASSWD</constant>、<constant>CURLOPT_PROXY_PINNEDPUBLICKEY</constant>、<constant>CURLOPT_PROXY_SSLCERT</constant>、<constant>CURLOPT_PROXY_SSLCERTTYPE</constant>、<constant>CURLOPT_PROXY_SSL_CIPHER_LIST</constant>、<constant>CURLOPT_PROXY_SSLKEY</constant>、<constant>CURLOPT_PROXY_SSLKEYTYPE</constant>、<constant>CURLOPT_PROXY_SSL_OPTIONS</constant>、<constant>CURLOPT_PROXY_SSL_VERIFYHOST</constant>、<constant>CURLOPT_PROXY_SSL_VERIFYPEER</constant>、<constant>CURLOPT_PROXY_SSLVERSION</constant>、<constant>CURLOPT_PROXY_TLSAUTH_PASSWORD</constant>、<constant>CURLOPT_PROXY_TLSAUTH_TYPE</constant>、<constant>CURLOPT_PROXY_TLSAUTH_USERNAME</constant>、<constant>CURLOPT_SOCKS5_AUTH</constant>、<constant>CURLOPT_SUPPRESS_CONNECT_HEADERS</constant>、<constant>CURLOPT_DISALLOW_USERNAME_IN_URL</constant>、<constant>CURLOPT_DNS_SHUFFLE_ADDRESSES</constant>、<constant>CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS</constant>、<constant>CURLOPT_HAPROXYPROTOCOL</constant>、<constant>CURLOPT_PROXY_TLS13_CIPHERS</constant>、<constant>CURLOPT_SSH_COMPRESSION</constant>、<constant>CURLOPT_TIMEVALUE_LARGE</constant>
        和 <constant>CURLOPT_TLS13_CIPHERS</constant>。
       </entry>
      </row>
      <row>
       <entry>7.0.7</entry>
       <entry>
        引入 <constant>CURL_HTTP_VERSION_2</constant>、<constant>CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE</constant>、
        <constant>CURL_HTTP_VERSION_2TLS</constant>、<constant>CURL_REDIR_POST_301</constant>、
        <constant>CURL_REDIR_POST_302</constant>、<constant>CURL_REDIR_POST_303</constant>、
        <constant>CURL_REDIR_POST_ALL</constant>、<constant>CURL_VERSION_KERBEROS5</constant>、
        <constant>CURL_VERSION_PSL</constant>、<constant>CURL_VERSION_UNIX_SOCKETS</constant>、
        <constant>CURLAUTH_NEGOTIATE</constant>、<constant>CURLAUTH_NTLM_WB</constant>、
        <constant>CURLFTP_CREATE_DIR</constant>、<constant>CURLFTP_CREATE_DIR_NONE</constant>、
        <constant>CURLFTP_CREATE_DIR_RETRY</constant>、<constant>CURLHEADER_SEPARATE</constant>、
        <constant>CURLHEADER_UNIFIED</constant>、<constant>CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE</constant>、
        <constant>CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE</constant>、<constant>CURLMOPT_MAX_HOST_CONNECTIONS</constant>、
        <constant>CURLMOPT_MAX_PIPELINE_LENGTH</constant>、<constant>CURLMOPT_MAX_TOTAL_CONNECTIONS</constant>、
        <constant>CURLOPT_CONNECT_TO</constant>、<constant>CURLOPT_DEFAULT_PROTOCOL</constant>、
        <constant>CURLOPT_DNS_INTERFACE</constant>、<constant>CURLOPT_DNS_LOCAL_IP4</constant>、
        <constant>CURLOPT_DNS_LOCAL_IP6</constant>、<constant>CURLOPT_EXPECT_100_TIMEOUT_MS</constant>、
        <constant>CURLOPT_HEADEROPT</constant>、<constant>CURLOPT_LOGIN_OPTIONS</constant>、
        <constant>CURLOPT_PATH_AS_IS</constant>、<constant>CURLOPT_PINNEDPUBLICKEY</constant>、
        <constant>CURLOPT_PIPEWAIT</constant>、<constant>CURLOPT_PROXY_SERVICE_NAME</constant>、
        <constant>CURLOPT_PROXYHEADER</constant>、<constant>CURLOPT_SASL_IR</constant>、
        <constant>CURLOPT_SERVICE_NAME</constant>、<constant>CURLOPT_SSL_ENABLE_ALPN</constant>、
        <constant>CURLOPT_SSL_ENABLE_NPN</constant>、<constant>CURLOPT_SSL_FALSESTART</constant>、
        <constant>CURLOPT_SSL_VERIFYSTATUS</constant>、<constant>CURLOPT_STREAM_WEIGHT</constant>、
        <constant>CURLOPT_TCP_FASTOPEN</constant>、<constant>CURLOPT_TFTP_NO_OPTIONS</constant>、
        <constant>CURLOPT_UNIX_SOCKET_PATH</constant>、<constant>CURLOPT_XOAUTH2_BEARER</constant>、
        <constant>CURLPROTO_SMB</constant>、<constant>CURLPROTO_SMBS</constant>、
        <constant>CURLPROXY_HTTP_1_0</constant>、<constant>CURLSSH_AUTH_AGENT</constant> 和
        <constant>CURLSSLOPT_NO_REVOKE</constant>。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>初始化一个新的cURL会话并获取一个网页</title>
    <programlisting role="php">
<![CDATA[
<?php
// 创建一个新cURL资源
$ch = curl_init();

// 设置URL和相应的选项
curl_setopt($ch, CURLOPT_URL, "http://www.example.com/");
curl_setopt($ch, CURLOPT_HEADER, false);

// 抓取URL并把它传递给浏览器
curl_exec($ch);

//关闭cURL资源，并且释放系统资源
curl_close($ch);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    传递一个数组到<constant>CURLOPT_POSTFIELDS</constant>，cURL会把数据编码成
    <emphasis>multipart/form-data</emphasis>，而然传递一个URL-encoded字符串时，数据会被编码成
    <emphasis>application/x-www-form-urlencoded</emphasis>。
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>curl_setopt_array</function></member>
    <member><classname>CURLFile</classname></member>
    <member><classname>CURLStringFile</classname></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
