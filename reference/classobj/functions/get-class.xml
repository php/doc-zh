<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d6fbec8b2161d13e51af9763bbd1487b0b25bd42 Maintainer: HonestQiao Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<refentry xml:id="function.get-class" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>get_class</refname>
  <refpurpose>返回对象的类名</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>get_class</methodname>
   <methodparam choice="opt"><type>object</type><parameter>object</parameter></methodparam>
  </methodsynopsis>
  <para>
   返回指定 <parameter>object</parameter> 的类名。
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>object</parameter></term>
     <listitem>
      <para>
       要测试的对象。如果在类里，此参数可以省略。
      </para>
      <note>
       <simpara>
        自 PHP 7.2.0 起，<parameter>object</parameter> 不再允许显式传递 &null;
        并抛出 <constant>E_WARNING</constant>。自 PHP 8.0.0 起，传递 &null;
        会抛出 <classname>TypeError</classname>。
       </simpara>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   返回 <parameter>object</parameter>
   实例的类名。
  </para>
  <para>
   如果在类中省略 <parameter>object</parameter>，
   则返回当前所在类的名称。
  </para>
  <para>
    如果 <parameter>object</parameter> 是命名空间中某个类的实例，则会返回带上命名空间的类名。
  </para>
 </refsect1>
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   如果用除对象外的其它类型调用 <function>get_class</function>，则会引发
   <classname>TypeError</classname>。在 PHP 8.0.0 之前，会引发
   <constant>E_WARNING</constant> 级别的错误。
  </para>
  <para>
   如果在类外不带任何参数调用 <function>get_class</function>，会引发
   <classname>Error</classname>。在 PHP 8.0.0 之前，会引发
   <constant>E_WARNING</constant> 级别的错误。
  </para>
 </refsect1>
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        在类外不带任何参数调用此函数将会触发 <classname>Error</classname>。之前会引发
        <constant>E_WARNING</constant> 并且函数会返回 &false;。
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        在此版本之前，<parameter>object</parameter> 的默认值是 
        &null;，它与不传递任何值有相同的效果。<parameter>object</parameter>
        已经移除了默认值 &null; 且不再是有效的输入。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>使用 <function>get_class</function></title>
    <programlisting role="php">
<![CDATA[
<?php

class foo {
    function name()
    {
        echo "My name is " , get_class($this) , "\n";
    }
}

// 创建对象
$bar = new foo();

// 类外调用
echo "Its name is " , get_class($bar) , "\n";

// 类内调用
$bar->name();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Its name is foo
My name is foo
]]>
    </screen>
   </example>
   <example>
    <title>父类中使用 <function>get_class</function></title>
    <programlisting role="php">
<![CDATA[
<?php

abstract class bar {
    public function __construct()
    {
        var_dump(get_class($this));
        var_dump(get_class());
    }
}

class foo extends bar {
}

new foo;

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(3) "foo"
string(3) "bar"
]]>
    </screen>
   </example>
   <example>
    <title>命名空间中的类中使用 <function>get_class</function></title>
    <programlisting role="php">
<![CDATA[
<?php

namespace Foo\Bar;

class Baz {
    public function __construct()
    {

    }
}

$baz = new \Foo\Bar\Baz;

var_dump(get_class($baz));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(11) "Foo\Bar\Baz"
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>get_called_class</function></member>
    <member><function>get_parent_class</function></member>
    <member><function>gettype</function></member>
    <member><function>get_debug_type</function></member>
    <member><function>is_subclass_of</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->