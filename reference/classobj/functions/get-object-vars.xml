<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: c9bc21cb7302db778f3c519cbe6a9c8286dc08b8 Maintainer: HonestQiao Status: ready -->
<refentry xml:id="function.get-object-vars" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>get_object_vars</refname>
  <refpurpose>返回由对象属性组成的关联数组</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>get_object_vars</methodname>
   <methodparam><type>object</type><parameter>obj</parameter></methodparam>
  </methodsynopsis>
  <para>
   返回由 <parameter>obj</parameter> 
   指定的对象中定义的属性组成的关联数组。
  </para>
  <note>
   <para>
    在 PHP 4.2.0 之前的版本中，如果在 <parameter>obj</parameter>
    对象实例中声明的变量没有被赋值，则它们将不会在返回的数组中。而在
    PHP 4.2.0 之后，这些变量作为键名将被赋予 &null; 值。
   </para>
  </note>
  <para>
   <example>
    <title>使用 <function>get_object_vars</function></title>
    <programlisting role="php">
<![CDATA[
<?php
class Point2D {
    var $x, $y;
    var $label;

    function Point2D($x, $y)
    {
        $this->x = $x;
        $this->y = $y;
    }

    function setLabel($label)
    {
        $this->label = $label;
    }

    function getPoint()
    {
        return array("x" => $this->x,
                     "y" => $this->y,
                     "label" => $this->label);
    }
}

// "$label" 已经声明但是没有定义
$p1 = new Point2D(1.233, 3.445);
print_r(get_object_vars($p1));

$p1->setLabel("point #1");
print_r(get_object_vars($p1));

?>
]]>
    </programlisting>
    &example.outputs; 
    <screen>
<![CDATA[
 Array
 (
     [x] => 1.233
     [y] => 3.445
     [label] =>
 )

 Array
 (
     [x] => 1.233
     [y] => 3.445
     [label] => point #1
 )
]]>
    </screen>
   </example>
  </para>
  <simpara>
   参见 <function>get_class_methods</function> 和
   <function>get_class_vars</function>。
  </simpara>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>object</parameter></term>
     <listitem>
      <para>
       对象实例。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   返回作用域中指定 <parameter>object</parameter> 定义的可访问且非静态属性的关联数组。 
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>get_object_vars</function> 使用</title>
    <programlisting role="php">
<![CDATA[
<?php

class foo {
    private $a;
    public $b = 1;
    public $c;
    private $d;
    static $e;
   
    public function test() {
        var_dump(get_object_vars($this));
    }
}

$test = new foo;
var_dump(get_object_vars($test));

$test->test();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(2) {
  ["b"]=>
  int(1)
  ["c"]=>
  NULL
}
array(4) {
  ["a"]=>
  NULL
  ["b"]=>
  int(1)
  ["c"]=>
  NULL
  ["d"]=>
  NULL
}
]]>
    </screen>
   </example>
  </para>
  <note>
   <para>
    未初始化的属性认为是不可访问的，因此不会在数组中包含。
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>get_class_methods</function></member>
    <member><function>get_class_vars</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
