<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: c44475e1fafcbee203ed4935a6d5d7a01379fcdc Maintainer: HonestQiao Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<refentry xml:id="function.get-class-vars" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>get_class_vars</refname>
  <refpurpose>获取类的默认属性</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>get_class_vars</methodname>
   <methodparam><type>string</type><parameter>class</parameter></methodparam>
  </methodsynopsis>
  <para>
   获取指定类的默认属性。
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>class</parameter></term>
     <listitem>
      <para>
       类名
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   返回从当前作用域中声明的可见属性组成的关联数组及其默认值。生成的数组元素采用
   <literal>varname =&gt; value</literal> 的形式，如果出现错误，则返回 &false;。
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>get_class_vars</function> 示例</title>
    <programlisting role="php">
<![CDATA[
<?php

class myclass {

    var $var1; // 这里没有默认值...
    var $var2 = "xyz";
    var $var3 = 100;
    private $var4;

    // 构造方法
    function __construct() {
        // change some properties
        $this->var1 = "foo";
        $this->var2 = "bar";
        return true;
    }

}

$my_class = new myclass();

$class_vars = get_class_vars(get_class($my_class));

foreach ($class_vars as $name => $value) {
    echo "$name : $value\n";
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
var1 :
var2 : xyz
var3 : 100
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>get_class_vars</function> 和作用域行为</title>
    <programlisting role="php">
<![CDATA[
<?php
function format($array)
{
    return implode('|', array_keys($array)) . "\r\n";
}

class TestCase
{
    public $a    = 1;
    protected $b = 2;
    private $c   = 3;

    public static function expose()
    {
        echo format(get_class_vars(__CLASS__));
    }
}

TestCase::expose();
echo format(get_class_vars('TestCase'));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
// 5.0.0
a| * b| TestCase c
a| * b| TestCase c

// 5.0.1 - 5.0.2
a|b|c
a|b|c

// 5.0.3 +
a|b|c
a
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>get_class_methods</function></member>
    <member><function>get_object_vars</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
