<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 4c9b6ff9fbc0b2516d21a3f82ad36b91ea1d0aa4 Maintainer: avenger Status: ready -->
<!-- CREDITS: mowangjuanzi, Luffy -->
<appendix xml:id="errorfunc.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants.core;

 <simpara>
  以下常量（相应的数值或其符号名称）用作位掩码来指定要报告的错误。可以使用<link
  linkend="language.operators.bitwise">按位运算符</link>来组合这些值或屏蔽某些类型的错误。
 </simpara>

 <tip>
  <simpara>
   常量的名称可以在 &php.ini; 中使用，而不是它们对应的原始数值。但是，&php.ini; 中只能理解
   <literal>|</literal>、<literal>~</literal>、<literal>^</literal>、<literal>!</literal>、<literal>&amp;</literal>
   运算符。
  </simpara>
 </tip>

 <warning>
  <simpara>
   无法在 PHP 之外使用符号名称。例如，在 &httpd.conf; 中，必须使用计算出的位掩码值。
  </simpara>
 </warning>

 <variablelist xml:id="errorfunc.constants.errorlevels">
  <varlistentry xml:id="constant.e-error">
   <term>
    <constant>E_ERROR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     致命的运行时错误。这类错误一般是不可恢复的情况，例如内存分配导致的问题。后果是导致脚本终止不再继续运行。
    </simpara>
    <simpara>
     常量值 <literal>1</literal>
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="constant.e-warning">
   <term>
    <constant>E_WARNING</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     运行时警告 (非致命错误)。仅给出提示信息，但是脚本不会终止运行。
    </simpara>
    <simpara>
     常量值：<literal>2</literal>
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="constant.e-parse">
   <term>
    <constant>E_PARSE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     编译时解析错误。解析错误只由解析器产生。
    </simpara>
    <simpara>
     常量值：<literal>4</literal>
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="constant.e-notice">
   <term>
    <constant>E_NOTICE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     运行时通知。表示脚本遇到可能会表现为错误的情况，但是在可以正常运行的脚本里面也可能会有类似的通知。
    </simpara>
    <simpara>
     常量值：<literal>8</literal>
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="constant.e-core-error">
   <term>
    <constant>E_CORE_ERROR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     在 PHP 初始化启动过程中发生的致命错误。该错误类似
     <constant>E_ERROR</constant>，但是是由 PHP 引擎核心产生。
    </simpara>
    <simpara>
     常量值：<literal>16</literal>
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="constant.e-core-warning">
   <term>
    <constant>E_CORE_WARNING</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     PHP 初始化启动过程中发生的警告 (非致命错误) 。类似 <constant>E_WARNING</constant>，但是是由 PHP 引擎核心产生。
    </simpara>
    <simpara>
     常量值：<literal>32</literal>
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="constant.e-compile-error">
   <term>
    <constant>E_COMPILE_ERROR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     致命编译时错误。类似 <constant>E_ERROR</constant>，但是是由 Zend 脚本引擎产生。
    </simpara>
    <simpara>
     常量值：<literal>64</literal>
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="constant.e-compile-warning">
   <term>
    <constant>E_COMPILE_WARNING</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     编译时警告 (非致命错误)。类似
     <constant>E_WARNING</constant>，但是是由 Zend 脚本引擎产生。
    </simpara>
    <simpara>
     常量值：<literal>128</literal>
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="constant.e-deprecated">
   <term>
    <constant>E_DEPRECATED</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     运行时弃用通知。启用后将会对在未来版本中可能无法正常工作的代码给出警告。
    </simpara>
    <simpara>
     常量值：<literal>8192</literal>
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="constant.e-user-error">
   <term>
    <constant>E_USER_ERROR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     用户产生的错误信息。类似
     <constant>E_ERROR</constant>，但是是由用户自己在代码中使用 PHP
     函数 <function>trigger_error</function> 来产生。
    </simpara>
    <simpara>
     常量值：<literal>256</literal>
    </simpara>
    <warning>
     <simpara>
      自 PHP 8.4.0 起，已弃用此常量与 <function>trigger_error</function> 一起使用的用法。建议改为
      &throw; <exceptionname>Exception</exceptionname> 或调用 <function>exit</function>。
     </simpara>
    </warning>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="constant.e-user-warning">
   <term>
    <constant>E_USER_WARNING</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     用户产生的警告信息。类似
     <constant>E_WARNING</constant>，由用户自己在代码中使用 PHP
     函数 <function>trigger_error</function> 来产生。
    </simpara>
    <simpara>
     常量值：<literal>512</literal>
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="constant.e-user-notice">
   <term>
    <constant>E_USER_NOTICE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     用户产生的通知信息。类似
      <constant>E_NOTICE</constant>，由用户自己在代码中使用 PHP
      函数 <function>trigger_error</function> 来产生。
    </simpara>
    <simpara>
     常量值：<literal>1024</literal>
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="constant.e-user-deprecated">
   <term>
    <constant>E_USER_DEPRECATED</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     用户产生的警告信息。 类似
     <constant>E_DEPRECATED</constant>, 由用户自己在代码中使用 PHP
     函数 <function>trigger_error</function> 来产生。
    </simpara>
    <simpara>
     常量值：<literal>16384</literal>
    </simpara>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="constant.e-strict">
   <term>
    <constant>E_STRICT</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     PHP 发出有关执行代码的运行时建议，以确保向前兼容。
    </simpara>
    <simpara>
     常量值：<literal>2048</literal>
    </simpara>
    <warning>
     <simpara>
      此错误级别未使用，且自 PHP 8.4.0 起已弃用。
     </simpara>
    </warning>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="constant.e-recoverable-error">
   <term>
    <constant>E_RECOVERABLE_ERROR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     旧引擎“exception”对应于可捕获的致命错误。与 <exceptionname>Error</exceptionname>
     类似，但必须通过用户定义的错误处理程序捕获（请参阅
     <function>set_error_handler</function>）。如果不处理，则其行为类似于 <constant>E_ERROR</constant>。
    </simpara>
    <simpara>
     常量值：<literal>4096</literal>
    </simpara>
    <note>
     <simpara>
      此错误级别实际上未使用，唯一可能发生这种情况的情况是将 &object; 解释为 <type>bool</type>
      失败。这只会发生在内部对象中。
     </simpara>
     <simpara>
      PHP 8.4.0 之前，最常见的示例是在条件中使用 <classname>GMP</classname> 实例。
     </simpara>
    </note>
   </listitem>
  </varlistentry>

  <varlistentry xml:id="constant.e-all">
   <term>
    <constant>E_ALL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     包含每个错误、警告和通知的位掩码。
    </simpara>
    <simpara>
     常量值：<literal>30719</literal>
    </simpara>
    <warning>
     <simpara>
      在 PHP 8.4 之前，常量值是：<literal>32767</literal>
     </simpara>
    </warning>
   </listitem>
  </varlistentry>

 </variablelist>
</appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
