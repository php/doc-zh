<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: avenger Status: ready -->
<appendix xml:id="errorfunc.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants.core;
 <note>
  <simpara>
   你可以使用它们在 &php.ini; 中的常量名称; 但是在 PHP 之外，例如在 &httpd.conf; 之中, 你必须使用二进制位掩码来代替。
  </simpara>
 </note>
 
 <table xml:id="errorfunc.constants.errorlevels">
  <title>错误和日志记录</title>
  <tgroup cols="4">
   <thead>
    <row>
     <entry>值</entry>
     <entry>常量</entry>
     <entry>说明</entry>
     <entry>备注</entry>
    </row>
   </thead>
   <tbody>
    <row xml:id="errorfunc.constants.errorlevels.e-error">
     <entry>1</entry>
     <entry>
      <constant>E_ERROR</constant> 
      (<type>int</type>)
     </entry>
     <entry>
      致命的运行时错误。这类错误一般是不可恢复的情况，例如内存分配导致的问题。后果是导致脚本终止不再继续运行。
     </entry>
     <entry></entry>
    </row>
    
    <row xml:id="errorfunc.constants.errorlevels.e-warning">
     <entry>2</entry>
     <entry>
      <constant>E_WARNING</constant> 
      (<type>int</type>)
     </entry>
     <entry>
      运行时警告 (非致命错误)。仅给出提示信息，但是脚本不会终止运行。
     </entry>
     <entry></entry>
    </row>
    
    <row xml:id="errorfunc.constants.errorlevels.e-parse">
     <entry>4</entry>
     <entry>
      <constant>E_PARSE</constant> 
      (<type>int</type>)
     </entry>
     <entry>
      编译时语法解析错误。解析错误仅仅由分析器产生。
     </entry>
     <entry></entry>
    </row>
    
    <row xml:id="errorfunc.constants.errorlevels.e-notice">
     <entry>8</entry>
     <entry>
      <constant>E_NOTICE</constant> 
      (<type>int</type>)
     </entry>
     <entry>
      运行时通知。表示脚本遇到可能会表现为错误的情况，但是在可以正常运行的脚本里面也可能会有类似的通知。
     </entry>
     <entry></entry>
    </row>
    
    <row xml:id="errorfunc.constants.errorlevels.e-core-error">
     <entry>16</entry>
     <entry>
      <constant>E_CORE_ERROR</constant> 
      (<type>int</type>)
     </entry>
     <entry>
      在 PHP 初始化启动过程中发生的致命错误。该错误类似
      <constant>E_ERROR</constant>，但是是由 PHP 引擎核心产生的。
     </entry>
     <entry></entry>
    </row>
    
    <row xml:id="errorfunc.constants.errorlevels.e-core-warning">
     <entry>32</entry>
     <entry>
      <constant>E_CORE_WARNING</constant> 
      (<type>int</type>)
     </entry>
     <entry>
      PHP 初始化启动过程中发生的警告 (非致命错误) 。类似 <constant>E_WARNING</constant>，但是是由 PHP 引擎核心产生的。
     </entry>
     <entry></entry>
    </row>
    
    <row xml:id="errorfunc.constants.errorlevels.e-compile-error">
     <entry>64</entry>
     <entry>
      <constant>E_COMPILE_ERROR</constant> 
      (<type>int</type>)
     </entry>
     <entry>
      致命编译时错误。类似 <constant>E_ERROR</constant>，但是是由 Zend 脚本引擎产生的。
     </entry>
     <entry></entry>
    </row>
    
    <row xml:id="errorfunc.constants.errorlevels.e-compile-warning">
     <entry>128</entry>
     <entry>
      <constant>E_COMPILE_WARNING</constant> 
      (<type>int</type>)
     </entry>
     <entry>
      编译时警告 (非致命错误)。类似
      <constant>E_WARNING</constant>，但是是由 Zend 脚本引擎产生的。
     </entry>
     <entry></entry>
    </row>
    
    <row xml:id="errorfunc.constants.errorlevels.e-user-error">
     <entry>256</entry>
     <entry>
      <constant>E_USER_ERROR</constant> 
      (<type>int</type>)
     </entry>
     <entry>
      用户产生的错误信息。类似
      <constant>E_ERROR</constant>，但是是由用户自己在代码中使用 PHP 函数 <function>trigger_error</function>来产生的。
     </entry>
     <entry></entry>
    </row>
    
    <row xml:id="errorfunc.constants.errorlevels.e-user-warning">
     <entry>512</entry>
     <entry>
      <constant>E_USER_WARNING</constant> 
      (<type>int</type>)
     </entry>
     <entry>
      用户产生的警告信息。类似
      <constant>E_WARNING</constant>，但是是由用户自己在代码中使用 PHP 函数 <function>trigger_error</function>来产生的。
     </entry>
     <entry></entry>
    </row>
    
    <row xml:id="errorfunc.constants.errorlevels.e-user-notice">
     <entry>1024</entry>
     <entry>
      <constant>E_USER_NOTICE</constant> 
      (<type>int</type>)
     </entry>
     <entry>
      用户产生的通知信息。类似
      <constant>E_NOTICE</constant>，但是是由用户自己在代码中使用 PHP 函数 <function>trigger_error</function>来产生的。
     </entry>
     <entry></entry>
    </row>
    
    <row xml:id="errorfunc.constants.errorlevels.e-strict">
     <entry>2048</entry>
     <entry>
      <constant>E_STRICT</constant> 
      (<type>int</type>)
     </entry>
     <entry>
      启用 PHP 对代码的修改建议，以确保代码具有最佳的互操作性和向前兼容性。
     </entry>
     <entry>PHP 5.4.0 之前的版本中不包含 <constant>E_ALL</constant></entry>
    </row>
    
    <row xml:id="errorfunc.constants.errorlevels.e-recoverable-error">
     <entry>4096</entry>
     <entry>
      <constant>E_RECOVERABLE_ERROR</constant> 
      (<type>int</type>)
     </entry>
     <entry>
      可被捕捉的致命错误。 它表示发生了一个可能非常危险的错误，但是还没有导致PHP引擎处于不稳定的状态。 如果该错误没有被用户自定义句柄捕获 (参见
      <function>set_error_handler</function>)，将成为一个 <constant>E_ERROR</constant>　从而脚本会终止运行。
     </entry>
     <entry>自 PHP 5.2.0 起</entry>
    </row>
    
    <row xml:id="errorfunc.constants.errorlevels.e-deprecated-error">
     <entry>8192</entry>
     <entry>
      <constant>E_DEPRECATED</constant> 
      (<type>int</type>)
     </entry>
     <entry>
      运行时通知。启用后将会对在未来版本中可能无法正常工作的代码给出警告。
     </entry>
     <entry>自 PHP 5.3.0 起</entry>
    </row>
    
    <row xml:id="errorfunc.constants.errorlevels.e-user-deprecated">
     <entry>16384</entry>
     <entry>
      <constant>E_USER_DEPRECATED</constant> 
      (<type>int</type>)
     </entry>
     <entry>
      用户产生的警告信息。 类似
      <constant>E_DEPRECATED</constant>, 但是是由用户自己在代码中使用PHP函数 <function>trigger_error</function>来产生的。
     </entry>
     <entry>自 PHP 5.3.0 起</entry>
    </row>
    
    <row xml:id="errorfunc.constants.errorlevels.e-all">
     <entry>32767</entry>
     <entry>
      <constant>E_ALL</constant> 
      (<type>int</type>)
     </entry>
     <entry>
      PHP 5.4.0 之前为 <constant>E_STRICT</constant> 除外的所有错误和警告信息。
     </entry>
     <entry>
      PHP 5.4.x 中为 32767,
      PHP 5.3.x 中为 30719,
      PHP 5.2.x 中为 6143,
      更早之前的 PHP 版本中为 2047。
     </entry>
    </row>
    
   </tbody>
  </tgroup>
 </table>
 
 <para>
  上面的值（数值或者符号）用于建立一个二进制位掩码，来制定要报告的错误信息。可以使用 <link linkend="language.operators.bitwise">按位运算符</link> 来组合这些值或者屏蔽某些类型的错误。请注意，在  &php.ini; 之中，只有'|', '~', '!', '^' 和 '&amp;' 会正确解析。
 </para>
</appendix> 

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
