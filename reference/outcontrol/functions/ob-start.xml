<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 6554e7e19770ac53e886b8194915d7cd09ff0bc7 Maintainer: avenger Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<refentry xml:id="function.ob-start" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>ob_start</refname>
  <refpurpose>打开输出控制缓冲</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>ob_start</methodname>
   <methodparam choice="opt"><type>callable</type><parameter>callback</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>chunk_size</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   此函数将打开输出缓冲。当输出缓冲激活后，脚本将不会输出内容（消息头除外），相反需要输出的内容被存储在内部缓冲区中。
  </para>
  <para>
    内部缓冲区的内容可以用 <function>ob_get_contents</function>
    复制到字符串变量中。想要输出存储在内部缓冲区中的内容，使用 <function>ob_end_flush</function>
    函数。另外，使用 <function>ob_end_clean</function> 函数会静默丢弃掉缓冲区的内容。
  </para>
  <warning>
   <para>
    当有正在调用的回调函数时，一些 Web 服务器（例如 Apache）会改变脚本的工作目录。可以在回调函数中再把它改回来，例如
    <literal>chdir(dirname($_SERVER['SCRIPT_FILENAME']))</literal>。
   </para>
  </warning>
  <para>
   输出缓冲区是可堆叠的，这就意味着，当有一个 <function>ob_start</function> 是活跃的时，可以调用另一个
   <function>ob_start</function>。只要确保正确调用了 <function>ob_end_flush</function>
   恰当的次数即可。如果有多重输出回调函数是活跃的，输出内容会一直按嵌套的顺序依次过滤。
  </para>
  <para>
   如果脚本结束时输出缓存仍处于激活状态，PHP 会自动输出内容。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       可选参数 <parameter>callback</parameter> 
       函数可以被指定。此函数把一个字符串当作参数并返回一个字符串。当输出缓冲区被（<function>ob_flush</function>、<function>ob_clean</function>
       或者相似的函数）冲刷（送出）或者被清洗的时候；或者在请求结束之际输出缓冲区内容被冲刷到浏览器的时候该函数将会被调用。当调用
       <parameter>callback</parameter>
       时，它将收到输出缓冲区的内容作为参数并预期返回一个新的输出缓冲区作为结果，这个新返回的输出缓冲区内容将被送到浏览器。如果这个
       <parameter>callback</parameter> 不是一个可以调用的函数，此函数会返回 &false;。以下是回调签名：
      </para>

      <para>
       <methodsynopsis>
        <type>string</type><methodname><replaceable>handler</replaceable></methodname>
        <methodparam><type>string</type><parameter>buffer</parameter></methodparam>
        <methodparam choice="opt"><type>int</type><parameter>phase</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>buffer</parameter></term>
         <listitem>
          <simpara>
           输出缓冲区中的内容。
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>phase</parameter></term>
         <listitem>
          <simpara>
           比特掩码 <link linkend="outcontrol.constants"><constant>PHP_OUTPUT_HANDLER_*</constant> 常量</link>。
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       如果 <parameter>callback</parameter> 返回 &false; ，其原来的输入内容被直接送到浏览器。
      </para>
      <para>
       这个参数 <parameter>callback</parameter> 可以通过直接给一个 &null; 值而避开。
      </para>
      <para>
       <function>ob_end_clean</function>, <function>ob_end_flush</function>,
       <function>ob_clean</function>, <function>ob_flush</function> 和
       <function>ob_start</function> 不能从一个回调函数中调用。
       如果从回调函数中调用了它们，产生的行为是不明确的。
       如果想要删除缓冲区的内容，从回调函数中返回一个"" (空字符串)。
       更不能从一个回调函数中使用像<literal>print_r($expression, true)</literal> 
       或<literal>highlight_file($filename, true)</literal> 一样的输出缓冲函数。   
      </para>
      <note>
       <para>
        <function>ob_gzhandler</function> 函数的存在有助于将 gz 编码的数据发送到支持压缩网页的 Web
        浏览器。<function>ob_gzhandler</function> 确定浏览器将接受哪种类型的内容编码并相应的返回输出。
       </para>
      </note>
     </listitem>
    </varlistentry>            
    <varlistentry>
     <term><parameter>chunk_size</parameter></term>
     <listitem>
      <para>
       如果可选参数 <parameter>chunk_size</parameter> 被赋值了，在任何一个能引起缓冲区的长度等于
       或超过 <parameter>chunk_size</parameter> 的输出操作后，缓冲区都会被刷送。
       默认值 <literal>0</literal> 意味着函数仅在最后被调用。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       <parameter>flags</parameter>
       参数代表了一个掩码位，用来控制对缓冲区的操作。默认是允许清理、刷新和移除输出缓冲区，可以通过
       <constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant> |
       <constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant> |
       <constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant> 显式设置或使用
       <constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant> 作为简写。
      </para>
      <para>
       每个标志都控制着对一组功能的访问，详细介绍如下：
       <informaltable>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>常量</entry>
           <entry>函数</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant></entry>
           <entry>
            <function>ob_clean</function>,
            <function>ob_end_clean</function> 和
            <function>ob_get_clean</function>。
           </entry>
          </row>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant></entry>
           <entry>
            <function>ob_end_flush</function>,
            <function>ob_flush</function> 和
            <function>ob_get_flush</function>。
           </entry>
          </row>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant></entry>
           <entry>
            <function>ob_end_clean</function>,
            <function>ob_end_flush</function> 和
            <function>ob_get_flush</function>。
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>用户自定义回调函数的例子</title>
    <programlisting role="php">
<![CDATA[
<?php

function callback($buffer)
{
  // replace all the apples with oranges
  return (str_replace("apples", "oranges", $buffer));
}

ob_start("callback");

?>
<html>
<body>
<p>It's like comparing apples to oranges.</p>
</body>
</html>
<?php

ob_end_flush();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
<html>
<body>
<p>It's like comparing oranges to oranges.</p>
</body>
</html>
]]>
    </screen>
   </example>
  </para>

 <para>
   <example xml:id="function.ob-start.flags-bc">
    <title>创建不可擦除的输出缓冲区</title>
    <programlisting role="php">
<![CDATA[
<?php

ob_start(null, 0, PHP_OUTPUT_HANDLER_STDFLAGS ^ PHP_OUTPUT_HANDLER_REMOVABLE);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ob_get_contents</function></member>
    <member><function>ob_end_clean</function></member>
    <member><function>ob_end_flush</function></member>
    <member><function>ob_implicit_flush</function></member>
    <member><function>ob_gzhandler</function></member>
    <member><function>ob_iconv_handler</function></member>
    <member><function>mb_output_handler</function></member>
    <member><function>ob_tidyhandler</function></member>
   </simplelist>
  </para>
 </refsect1>  

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
