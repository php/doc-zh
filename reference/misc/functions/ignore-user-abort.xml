<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 0c9c2dd669fe9395eaa73d487fbd160f9057429a Maintainer: daijie Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<refentry xml:id="function.ignore-user-abort" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>ignore_user_abort</refname>
  <refpurpose>设置客户端断开连接时是否中断脚本的执行</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>ignore_user_abort</methodname>
   <methodparam choice="opt"><type class="union"><type>bool</type><type>null</type></type><parameter>enable</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
    设置客户端断开连接时是否中断脚本的执行
  </para>
  <para>
   PHP 以命令行脚本执行时，当脚本终端结束，脚本不会被立即中止，除非设置
   <parameter>enable</parameter>为 &true;，否则脚本输出任意字符时会被中止。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>enable</parameter></term>
     <listitem>
      <para>
       如果设置了该值且不为 &null;，函数会设置 <link linkend="ini.ignore-user-abort">ignore_user_abort</link>
       ini 为 <parameter>enable</parameter>。否则，函数不会改变设置，仅会返回之前的设置。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   以整型返回之前的设置
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>enable</parameter> 现在允许为 null。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>ignore_user_abort</function>例子</title>
    <programlisting role="php">
<![CDATA[
<?php
// 忽略用户中止并允许脚本
// 永远运行
ignore_user_abort(true);
set_time_limit(0);

echo 'Testing connection handling in PHP';

// Run a pointless loop that sometime 
// hopefully will make us click away from 
// page or click the "Stop" button.
while(1)
{
    // 连接失败？
    if(connection_status() != CONNECTION_NORMAL)
    {
        break;
    }

    // 睡眠 10 秒
    sleep(10);
}

// If this is reached, then the 'break' 
// was triggered from inside the while loop

// So here we can log, or perform any other tasks
// we need without actually being dependent on the 
// browser.
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <para>
   在PHP尝试发送信息到客户端之前，不会检测到用户是否已中断连接。
   仅使用 echo 语句不能确保信息已发送，参见 <function>flush</function> 函数。 
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>connection_aborted</function></member>
    <member><function>connection_status</function></member>
    <member>
     <link linkend="features.connection-handling">Connection Handling</link>
     关于PHP连接处理的完整描述。
    </member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
