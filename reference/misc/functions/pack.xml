<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: ad0f1eaa6510e1d11231f46515ca513d2cd097c4 Maintainer: Avenger Status: ready -->
<!-- CREDITS: Luffy, mowangjuanzi -->
<refentry xml:id="function.pack" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pack</refname>
  <refpurpose>将数据打包成二进制字符串</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>pack</methodname>
   <methodparam><type>string</type><parameter>format</parameter></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter></methodparam>
  </methodsynopsis>
  <para>
   将输入参数打包成 <parameter>format</parameter> 格式的二进制字符串。
  </para>
  <para>
   这个函数的思想来自 Perl，所有格式化代码（<parameter>format</parameter>）的工作原理都与
   Perl 相同。 但是，缺少了部分格式代码，比如 Perl 的 “u”。
  </para>
  <para>
   注意，有符号值和无符号值之间的区别只影响函数
   <function>unpack</function>，在那些使用有符号和无符号格式代码的地方
   <function>pack</function> 函数产生相同的结果。
  </para>
 </refsect1>
 
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>format</parameter></term>
     <listitem>
      <para>
       <parameter>format</parameter>
       字符串由格式代码组成，后面跟着一个可选的重复参数。重复参数可以是一个整数值或者
       <literal>*</literal> 值来重复到输入数据的末尾。对于 a, A, h, H
       格式化代码，其后的重复参数指定了给定数据将会被使用几个字符串。对于
       @，其后的数字表示放置剩余数据的绝对定位（之前的数据将会被空字符串填充），对于其他所有内容，重复数量指定消耗多少个数据参数并将其打包到生成的二进制字符串中。
      </para>
      <para>
       目前已实现的格式如下：
       <table>
        <title><function>pack</function> 格式字符</title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>代码</entry>
           <entry>描述</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>a</entry>
           <entry>以 NUL 字节填充字符串</entry>
          </row>
          <row>
           <entry>A</entry>
           <entry>以 SPACE(空格) 填充字符串</entry></row>
          <row>
           <entry>h</entry>
           <entry>十六进制字符串，低位在前</entry></row>
          <row>
           <entry>H</entry>
           <entry>十六进制字符串，高位在前</entry></row>
          <row><entry>c</entry><entry>有符号字符</entry></row>
          <row>
           <entry>C</entry>
           <entry>无符号字符</entry></row>
          <row>
           <entry>s</entry>
           <entry>有符号短整型(16位，主机字节序)</entry>
          </row>
          <row>
           <entry>S</entry>
           <entry>无符号短整型(16位，主机字节序)</entry>
          </row>
          <row>
           <entry>n</entry>
           <entry>无符号短整型(16位，大端字节序)</entry>
          </row>
          <row>
           <entry>v</entry>
           <entry>无符号短整型(16位，小端字节序)</entry>
          </row>
          <row>
           <entry>i</entry>
           <entry>有符号整型(机器相关大小字节序)</entry>
          </row>
          <row>
           <entry>I</entry>
           <entry>无符号整型(机器相关大小字节序)</entry>
          </row>
          <row>
           <entry>l</entry>
           <entry>有符号长整型(32位，主机字节序)</entry>
          </row>
          <row>
           <entry>L</entry>
           <entry>无符号长整型(32位，主机字节序)</entry>
          </row>
          <row>
           <entry>N</entry>
           <entry>无符号长整型(32位，大端字节序)</entry>
          </row>
          <row>
           <entry>V</entry>
           <entry>无符号长整型(32位，小端字节序)</entry>
          </row>
          <row>
           <entry>q</entry>
           <entry>有符号长长整型(64位，主机字节序)</entry>
          </row>
          <row>
           <entry>Q</entry>
           <entry>无符号长长整型(64位，主机字节序)</entry>
          </row>
          <row>
           <entry>J</entry>
           <entry>无符号长长整型(64位，大端字节序)</entry>
          </row>
          <row>
           <entry>P</entry>
           <entry>无符号长长整型(64位，小端字节序)</entry>
          </row>
          <row>
           <entry>f</entry>
           <entry>单精度浮点型(机器相关大小)</entry>
          </row>
          <row>
           <entry>g</entry>
           <entry>单精度浮点型(机器相关大小，小端字节序)</entry>
          </row>
          <row>
           <entry>G</entry>
           <entry>单精度浮点型(机器相关大小，大端字节序)</entry>
          </row>
          <row>
           <entry>d</entry>
           <entry>双精度浮点型(机器相关大小)</entry>
          </row>
          <row>
           <entry>e</entry>
           <entry>双精度浮点型(机器相关大小，小端字节序)</entry>
          </row>
          <row>
           <entry>E</entry>
           <entry>双精度浮点型(机器相关大小，大端字节序)</entry>
          </row>
          <row>
           <entry>x</entry>
           <entry>NUL 字节</entry>
          </row>
          <row>
           <entry>X</entry>
           <entry>回退一字节</entry>
          </row>
          <row>
           <entry>Z</entry>
           <entry>以 NUL 结尾（ASCIIZ）字符串，将用 NUL 填充</entry>
          </row>
          <row>
           <entry>@</entry>
           <entry>NUL 填充到绝对位置</entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>values</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   返回包含数据的二进制字符串。
  </para>
 </refsect1>
 
 <refsect1 role="changelog"><!-- {{{ -->
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        此函数不再在失败时返回 &false;。
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        <type>float</type> 和 <type>double</type> 类型支持大端和小端。
       </entry>
      </row>
      <row>
       <entry>7.0.15，7.1.1</entry>
       <entry>
        添加了 “e”,“E”,“g” 和 “G” 代码以启用 float 和 double 的字节顺序支持。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>pack</function> 示例</title>
    <programlisting role="php">
<![CDATA[
<?php
$binarydata = pack("nvc*", 0x1234, 0x5678, 65, 66);
?>
]]>
    </programlisting>
    <para>
     输出结果为长度为 6 字节的二进制字符串，包含以下序列
     0x12, 0x34, 0x78, 0x56, 0x41, 0x42。
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <simpara>格式代码 <literal>q</literal>、 <literal>Q</literal>、<literal>J</literal> 和 <literal>P</literal> 在 32 位 PHP 构建中不可用。</simpara>
  </caution>
  <caution>
   <para>
    注意，PHP 内部将以有符号的形式存储 <type>int</type> 值，其大小取决于机器。整数文字和运算的结果超出 <type>int</type>
    类型范围，将存储为 <type>float</type>。将这些浮点数打包为整数时，首先会转换为整数类型。这一过程可能不会产生预期的字节模式。
   </para>
   <para>
    最典型的情况是当要打包那些无符号 <type>int</type> 类型就可以表示的无符号数字。在 <type>int</type> 类型为 32
    位的系统中，转换通常会产生与 <type>int</type> 类型为无符号时相同的字节模式（尽管这取决于 C 标准中定义的、由具体实现决定的无符号转有符号规则）。对于
    <type>int</type> 类型为 64 位的系统，<type>float</type> 可能无法提供足够的尾数位数来保存值而不会损失精度。如果这些系统也支持本地 64 位 C
    <literal>int</literal> 类型（多数类 UNIX 系统并不支持），那么要在高范围使用 <literal>I</literal> 打包格式的唯一办法就是创建与预期的无符号值具有相同字节表示的负整数值。
   </para>
  </caution>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>unpack</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
