<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 52bd05eb26b2851eb4ae34b12607582d56a33897 Maintainer: HonestQiao Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<refentry xml:id="function.unset" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unset</refname>
  <refpurpose>清除指定变量</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>unset</methodname>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>vars</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>unset</function> 销毁指定变量。
  </para>
  <para>
   <function>unset</function> 在函数中的行为会依赖于想要销毁的变量的类型而有所不同。
  </para>
  <para>
   如果在函数中 <function>unset</function> 
   一个全局变量，则只是局部变量被销毁，而在调用环境中的变量将保持调用
   <function>unset</function> 之前一样的值。
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function destroy_foo() 
{
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
bar
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   如果您想在函数中 <function>unset</function>
   一个全局变量，可使用 <varname>$GLOBALS</varname>
   数组来实现：
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo() 
{
    unset($GLOBALS['bar']);
}

$bar = "something";
foo();
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   如果在函数中 <function>unset</function> 
   一个通过引用传递的变量，则只是局部变量被销毁，而在调用环境中的变量将保持调用
   <function>unset</function> 之前一样的值。
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo(&$bar) 
{
    unset($bar);
    $bar = "blah";
}

$bar = 'something';
echo "$bar\n";

foo($bar);
echo "$bar\n";
?>
]]>
    </programlisting>
   </informalexample>
  </para>
   &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
something
something
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   如果在函数中 <function>unset</function> 
   一个静态变量，那么在函数内部此静态变量将被销毁。但是，当再次调用此函数时，此静态变量将被复原为上次被销毁之前的值。
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    static $bar;
    $bar++;
    echo "Before unset: $bar, ";
    unset($bar);
    $bar = 23;
    echo "after unset: $bar\n";
}

foo();
foo();
foo();
?>
]]>
    </programlisting>
   </informalexample>
  </para>
   &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
Before unset: 1, after unset: 23
Before unset: 2, after unset: 23
Before unset: 3, after unset: 23
]]>
    </screen>
   </informalexample>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       要销毁的变量。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>vars</parameter></term>
     <listitem>
      <para>
       更多变量。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>unset</function> 示例</title>
    <programlisting role="php">
<![CDATA[
<?php
// 销毁单个变量
unset ($foo);

// 销毁单个数组元素
unset ($bar['quux']);

// 销毁一个以上的变量
unset($foo1, $foo2, $foo3);
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>使用 <literal>(unset)</literal> 类型强制转换</title>
    <para>
     <link linkend="language.types.null.casting"><literal>(unset)</literal></link>
     类型强制转换常常和函数 <function>unset</function> 引起困惑。为了完整性，<literal>(unset)</literal>
     是作为 <literal>NULL</literal> 类型的强制转换。它不会改变变量的类型。自
     PHP 7.2.0 起，弃用 (unset) 强制转换，自 8.0.0 起移除。
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$name = 'Felipe';

var_dump((unset) $name);
var_dump($name);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NULL
string(6) "Felipe"
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.language-construct;
  <note>
   <para>
    It is possible to unset even object properties visible in current context.
   </para>
  </note>
  <note>
   <para>
    无法在对象里销毁 <literal>$this</literal>。
   </para>
  </note>
  <note>
   <para>
    在 <function>unset</function> 一个无法访问的对象属性时，如果定义了
    <link linkend="object.unset">__unset()</link> 则对调用这个重载方法。
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>isset</function></member>
    <member><function>empty</function></member>
    <member><link linkend="object.unset">__unset()</link></member>
    <member><function>array_splice</function></member>
    <member><link linkend="language.types.null.casting">(unset) 强制转换</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
