<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 8cdc6621f9826d04abc3e50438c010804d7e8683 Maintainer: mowangjuanzi Status: ready -->
<refentry xml:id="function.serialize" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>serialize</refname>
   <refpurpose>生成值的可存储表示</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <type>string</type><methodname>serialize</methodname>
    <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   </methodsynopsis>
  <para>
   生成值的可存储表示。
  </para>
  <para>
   这有利于存储或传递 PHP 的值，同时不丢失其类型和结构。
  </para>
  <para>
    想要将已序列化的字符串变回 PHP 的值，可使用
    <function>unserialize</function>。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       要序列化的值。<function>serialize</function> 处理所有的类型，除了 <type>resource</type> 类型和一些
       <type>object</type>（见下面的注释）。<function>serialize</function>
       甚至可以序列化包含对自身引用的数组。数组/对象内的循环引用也会被存储。其它任何引用都会丢失。
      </para>
      <para>
       序列化对象时，PHP 将尝试在序列化之前调用成员函数 <link linkend="object.serialize">__serialize()</link> 或
       <link linkend="object.sleep">__sleep()</link>。这是为了允许对象在序列化之前进行最后一分钟的清理等等。同样，当使用
       <function>unserialize</function> 恢复对象时，会调用 <link linkend="object.unserialize">__unserialize()</link>
       或 <link linkend="object.wakeup">__wakeup()</link> 成员函数。
      </para>
      <note>
       <para>
        对象的 private 成员会在名前添加类名；protected 成员会在名前添加“*”；这些前置值在两边都有 null 字节。
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   返回字符串，包含 <parameter>value</parameter> 的字节流表示，可以存储在任何地方。
  </para>
  <para>
   注意这可能是包含 null 字节的二进制字符串，需要按原样存储和处理。例如，<function>serialize</function>
   的输出通常应该存储在数据库中 的 BLOB 字段，而不是 CHAR 或 TEXT 字段。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>serialize</function> 示例</title>
    <programlisting role="php">
<![CDATA[
<?php
// $sssion_data 是多维数组，包含当前用户的
// 会话信息。可以在请求结束时使用 serialize()
// 将其存储在数据库中。

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn,
      "UPDATE sessions SET data = ? WHERE id = ?");
$sqldata = array (serialize($session_data), $_SERVER['PHP_AUTH_USER']);
if (!odbc_execute($stmt, $sqldata)) {
    $stmt = odbc_prepare($conn,
     "INSERT INTO sessions (id, data) VALUES(?, ?)");
    if (!odbc_execute($stmt, array_reverse($sqldata))) {
        /* Something went wrong.. */
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    注意许多内置 PHP 对象不能序列化。然而，要么实现 <interfacename>Serializable</interfacename> 接口，要么实现 <link
    linkend="object.serialize">__serialize()</link>/<link linkend="object.unserialize">__unserialize()</link>
    或 <link linkend="object.sleep">__sleep()</link>/<link linkend="object.wakeup">__wakeup()</link>
    魔术方法的则是可以的。如果内部类不满足这些其中任意一个，则就不能可靠的进行序列化。
   </para>
   <para>
    上述规则有一些历史例外，一些内部对象可以在不实现接口或公开方法的情况下，使其序列化。
   </para>
  </note>
  <warning>
   <para>
    当 <function>serialize</function> 序列化对象时，命名空间中的类名不要以反斜线开头，以便实现最大兼容性。
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>unserialize</function></member>
    <member><function>var_export</function></member>
    <member><function>json_encode</function></member>
    <member><link linkend="language.oop5.serialization">序列化对象</link></member>
    <member><link linkend="object.sleep">__sleep()</link></member>
    <member><link linkend="object.wakeup">__wakeup()</link></member>
    <member><link linkend="object.serialize">__serialize()</link></member>
    <member><link linkend="object.unserialize">__unserialize()</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
