<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 8cdc6621f9826d04abc3e50438c010804d7e8683 Maintainer: mowangjuanzi Status: ready -->
<refentry xml:id="function.serialize" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>serialize</refname>
   <refpurpose>生成值的可存储表示</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <type>string</type><methodname>serialize</methodname>
    <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   </methodsynopsis>
  <para>
   生成值的可存储表示。
  </para>
  <para>
   这有利于存储或传递 PHP 的值，同时不丢失其类型和结构。
  </para>
  <para>
    想要将已序列化的字符串变回 PHP 的值，可使用
    <function>unserialize</function>。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       要序列化的值。<function>serialize</function> 处理所有的类型，除了 <type>resource</type> 类型和一些
       <type>object</type>（见下面的注释）。<function>serialize</function>
       甚至可以序列化包含对自身引用的数组。数组/对象内的循环引用也会被存储。其它任何引用都会丢失。
      </para>
      <para>
       When serializing objects, PHP will attempt to call the member functions
       <link linkend="object.serialize">__serialize()</link> or
       <link linkend="object.sleep">__sleep()</link> prior to serialization.
       This is to allow the object to do any last minute clean-up, etc. prior 
       to being serialized. Likewise, when the object is restored using 
       <function>unserialize</function> the <link linkend="object.unserialize">__unserialize()</link> or
       <link linkend="object.wakeup">__wakeup()</link> member function is called.
      </para>
      <note>
       <para>
       Object's private members have the class name prepended to the member
       name; protected members have a '*' prepended to the member name.
       These prepended values have null bytes on either side.
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns a string containing a byte-stream representation of 
   <parameter>value</parameter> that can be stored anywhere.
  </para>
  <para>
   Note that this is a binary string which may include null bytes, and needs
   to be stored and handled as such. For example,
   <function>serialize</function> output should generally be stored in a BLOB
   field in a database, rather than a CHAR or TEXT field.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>serialize</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
// $session_data contains a multi-dimensional array with session
// information for the current user.  We use serialize() to store
// it in a database at the end of the request.

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn,
      "UPDATE sessions SET data = ? WHERE id = ?");
$sqldata = array (serialize($session_data), $_SERVER['PHP_AUTH_USER']);
if (!odbc_execute($stmt, $sqldata)) {
    $stmt = odbc_prepare($conn,
     "INSERT INTO sessions (id, data) VALUES(?, ?)");
    if (!odbc_execute($stmt, array_reverse($sqldata))) {
        /* Something went wrong.. */
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Note that many built-in PHP objects cannot be serialized. However, those with 
    this ability either implement the <interfacename>Serializable</interfacename> interface or the 
    magic <link linkend="object.serialize">__serialize()</link>/<link linkend="object.unserialize">__unserialize()</link>
    or <link linkend="object.sleep">__sleep()</link>/<link linkend="object.wakeup">__wakeup()</link> methods. If an
    internal class does not fulfill any of those requirements, it cannot reliably be 
    serialized.
   </para>
   <para>
    There are some historical exceptions to the above rule, where some internal objects 
    could be serialized without implementing the interface or exposing the methods.
   </para>
  </note>
  <warning>
   <para>
    When <function>serialize</function> serializes objects, the leading backslash is not included in the class name of namespaced classes for maximum compatibility.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>unserialize</function></member>
    <member><function>var_export</function></member>
    <member><function>json_encode</function></member>
    <member><link linkend="language.oop5.serialization">Serializing Objects</link></member>
    <member><link linkend="object.sleep">__sleep()</link></member>
    <member><link linkend="object.wakeup">__wakeup()</link></member>
    <member><link linkend="object.serialize">__serialize()</link></member>
    <member><link linkend="object.unserialize">__unserialize()</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
