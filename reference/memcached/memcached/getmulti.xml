<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 066ad854aafc2b673b4a4299e6ac7f0d01422753 Maintainer: daijie Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<refentry xml:id="memcached.getmulti" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Memcached::getMulti</refname>
  <refpurpose>检索多个元素</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>mixed</type><methodname>Memcached::getMulti</methodname>
   <methodparam><type>array</type><parameter>keys</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>Memcached::getMulti</function> 与 <methodname>Memcached::get</methodname> 类似，但是这个方法用来检索
    <parameter>keys</parameter> 数组指定的多个 key 对应的元素。
   <note>
    <para>
     在 v3.0 之前，使用的第二个参数是 <parameter role="reference">cas_tokens</parameter>。
     它会填充进元素的 CAS token 值。
     在本扩展里，<parameter role="reference">cas_tokens</parameter> 参数在 v3.0 中已经移除。
     它被新的附加选项（flag） <constant>Memcached::GET_EXTENDED</constant> 代替，需要在 <parameter>flags</parameter> 值里使用。
    </para>
   </note>
  </para>
  <para>
   <parameter>flags</parameter>参数可以用做指定<function>Memcached::getMulti</function>的附加选项。
   当前，仅可以指定为<constant>Memcached::GET_PRESERVE_ORDER</constant>以保证返回的key的顺序和请求时一致。
   <constant>Memcached::GET_EXTENDED</constant> 可以确保同时返回了 CAS token 信息。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>keys</parameter></term>
     <listitem>
      <para>
       要检索的key的数组。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Get 操作的附加选项。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   返回检索到的元素的数组&return.falseforfailure;。
   &memcached.result.getresultcode;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>PECL memcached 3.0.0</entry>
      <entry>
       移除 <parameter role="reference">cas_tokens</parameter> 参数。
       新增 <constant>Memcached::GET_EXTENDED</constant>，当作为 flag 传递时，确保获取到 CAS token。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>Memcached::getMulti</function> 的 Memcached v3 示例</title>
    <programlisting role="php">
<![CDATA[
<?php
// 扩展版本 v3 有效

$m = new Memcached();
$m->addServer('localhost', 11211);

$items = array(
    'key1' => 'value1',
    'key2' => 'value2',
    'key3' => 'value3'
);
$m->setMulti($items);
$result = $m->getMulti(array('key1', 'key3', 'badkey'));
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(2) {
  ["key1"]=>
  string(6) "value1"
  ["key3"]=>
  string(6) "value3"
}
]]>
    </screen>
   </example>
  </para>
  
  <para>
   <example>
    <title><function>Memcached::getMulti</function> 的 Memcached v1 和 v2 示例</title>
    <programlisting role="php">
<![CDATA[
<?php
// 仅在扩展版本 v1 和 v2 中有效

$m = new Memcached();
$m->addServer('localhost', 11211);

$items = array(
    'key1' => 'value1',
    'key2' => 'value2',
    'key3' => 'value3'
);
$m->setMulti($items);
$result = $m->getMulti(array('key1', 'key3', 'badkey'), $cas);
var_dump($result, $cas);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(2) {
  ["key1"]=>
  string(6) "value1"
  ["key3"]=>
  string(6) "value3"
}
array(2) {
  ["key1"]=>
  float(2360)
  ["key3"]=>
  float(2362)
}
]]>
    </screen>
   </example>
  </para>


 
  <para>
   <example>
    <title><constant>Memcached::GET_PRESERVE_ORDER</constant> 的 Memcached v3 示例</title>
    <programlisting role="php">
<![CDATA[
<?php
//  v3 扩展有效

$m = new Memcached();
$m->addServer('localhost', 11211);

$data = array(
    'foo' => 'foo-data',
    'bar' => 'bar-data',
    'baz' => 'baz-data',
    'lol' => 'lol-data',
    'kek' => 'kek-data',
);

$m->setMulti($data, 3600);

$keys = array_keys($data);
$keys[] = 'zoo';
$got = $m->getMulti($keys, Memcached::GET_PRESERVE_ORDER);

foreach ($got as $k => $v) {
    echo "$k $v\n";
}
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
foo foo-data
bar bar-data
baz baz-data
lol lol-data
kek kek-data
zoo 
]]>
    </screen>
   </example>
  </para>

  <para>
   <example>
    <title><constant>Memcached::GET_PRESERVE_ORDER</constant> 的 Memcached v1 和 v2 示例</title>
    <programlisting role="php">
<![CDATA[
<?php
// 在扩展版本 v1 和 v2  中有效

$m = new Memcached();
$m->addServer('localhost', 11211);

$data = array(
    'foo' => 'foo-data',
    'bar' => 'bar-data',
    'baz' => 'baz-data',
    'lol' => 'lol-data',
    'kek' => 'kek-data',
);

$m->setMulti($data, 3600);

$null = null;
$keys = array_keys($data);
$keys[] = 'zoo';
$got = $m->getMulti($keys, $null, Memcached::GET_PRESERVE_ORDER);

foreach ($got as $k => $v) {
    echo "$k $v\n";
}
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
foo foo-data
bar bar-data
baz baz-data
lol lol-data
kek kek-data
zoo 
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>Memcached::getMultiByKey</methodname></member>
    <member><methodname>Memcached::get</methodname></member>
    <member><methodname>Memcached::getDelayed</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
