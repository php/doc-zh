<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: Altair Status: ready -->
<!-- CREDITS: dallas -->

  <chapter xml:id="language.expressions" xmlns="http://docbook.org/ns/docbook">
   <title>表达式</title>

   <simpara>
    表达式是 PHP 最重要的构建部分。在 PHP
    中，几乎所写的任何东西都是一个表达式。简单但却最精确的定义一个表达式的方式就是“任何有值的东西”。
   </simpara>

   <simpara>
    最基本的表达式形式是常量和变量。当键入“<varname>$a</varname> = 5”，即将值“5”分配给变量
    <varname>$a</varname>。“5”，很明显，其值为 5，换句话说“5”是一个值为 5
    的表达式（在这里，“5”是一个整型常量）。
   </simpara>


   <simpara>
    赋值之后，所期待情况是 <varname>$a</varname> 的值为 5，因而如果写下
    <varname>$b</varname> = <varname>$a</varname>，期望的是它犹如 <varname>$b</varname> = 5 一样。换句话说，<varname>$a</varname> 是一个值也为 5
    的表达式。如果一切运行正确，那这正是将要发生的正确结果。
   </simpara>

   <para>
    稍微复杂的表达式例子就是函数。例如，考虑下面的函数：

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo ()
{
    return 5;
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <simpara>
    假定已经熟悉了函数的概念（果不是的话，请看一下<link
    linkend="language.functions">函数</link>的相关章节），那么键入
    <literal>$c = foo()</literal> 从本质上来说就如写下
    <literal>$c = 5</literal>，这没错。函数也是表达式，表达式的值即为它们的返回值。既然
    <literal>foo()</literal> 返回 5，表达式“<literal>foo()</literal>”的值也是 5。通常函数不会仅仅返回一个静态值，而可能会计算一些东西。
   </simpara>

   <simpara>
    当然，PHP 中的值常常并非是整型的。PHP
    支持四种标量值（标量值不能拆分为更小的单元，例如和数组不同）类型：整型值（<type>int</type>），浮点数值（<type>float</type>），字符串值（<type>string</type>）和布尔值（<type>bool</type>）。PHP
    也支持两种复合类型：数组和对象。这两种类型具可以赋值给变量或者从函数返回。
   </simpara>

   <simpara>
    PHP 和其它语言一样在表达式的道路上发展，但推进得更深远。PHP
    是一种面向表达式的语言，从这一方面来讲几乎一切都是表达式。考虑刚才已经研究过的例子，“<varname>$a</varname> =
    5”。很显然这里涉及到两个值，整型常量 5 的值以及而且变量 $a
    的值，它也被更新为 5。但是事实是这里还涉及到一个额外的值，即附值语句本身的值。赋值语句本身求值为被赋的值，即
    5。实际上这意味着“<varname>$a</varname> = 5”，不必管它是做什么的，是一个值为 5
    的表达式。因而，这样写“<varname>$b</varname> = (<varname>$a</varname> = 5)”和这样写“<varname>$a</varname> =5;
    <varname>$b</varname>=5”（分号标志着语句的结束）是一样的。因为赋值操作的顺序是由右到左的，也可以这么写“<varname>$b</varname> = <varname>$a</varname> =5”。
   </simpara>

   <simpara>
    另外一个很好的面向表达式的例子就是前、后递增和递减。PHP
    和多数其它语言的用户应该比较熟悉变量 ++ 和变量 -- 符号。即<link
    linkend="language.operators.increment">递增和递减运算符</link>。在
    PHP 和 C 语言 中，有两种类型的递增前递增和后递增，本质上来讲，前递增和后递增均增加了变量的值，并且对于变量的影响是相同的。不同的是递增表达式的值。前递增，写做“++$variable”，求增加后的值（PHP
    在读取变量的值之前，增加变量的值，因而称之为“前递增”）。后递增，写做“$variable++”，求变量未递增之前的原始值（PHP
    在读取变量的值之后，增加变量的值，因而叫做“后递增”）。
   </simpara>

   <simpara>
    一个常用到表达式类型是<link
    linkend= "language.operators.comparison">比较表达式</link>。这些表达式求值
    &false; 或 &true;。PHP
    支持 &gt;（大于），&gt;=（大于等于），==（等于），!=（不等于），&lt;（小于），&lt;= (小于等于)。PHP
    还支持全等运算符 ===（值和类型均相同）和非全等运算符
    !==（值或者类型不同）。这些表达式都是在条件判断语句，比如，<literal>if</literal>
    语句中最常用的。
   </simpara>

   <simpara>
    这里，将要研究的最后一个例子是组合的运算赋值表达式。已经知道如果想要为变量
    $a 加1，可以简单的写“$a++”或者“++$a”。但是如果想为变量增加大于
    1 的值，比如 3，该怎么做？可以多次写“$a++”，但这样明显不是一种高效舒适的方法，一个更加通用的做法是“$a
    = $a + 3”。“$a + 3”计算 $a 加上 3 的值，并且得到的值重新赋予变量
    $a，于是 $a 的值增加了3。在 PHP 及其它几种类似 C
    的语言中，可以以一种更加简短的形式完成上述功能，因而也更加清楚快捷。为
    $a 的当前值加 3，可以这样写：“$a += 3”。这里的意思是“取变量 $a 的值，加
    3，得到的结果再次分配给变量 $a”。除了更简略和清楚外，也可以更快的运行。“$a +=
    3”的值，如同一个正常赋值操作的值，是赋值后的值。注意它不是 3，而是
    $a 的值加上3 之后的值（此值将被赋给 $a）。任何二元运算符都可以用运算赋值模式，例如“$a -= 5”（从变量
    $a 的值中减去 5），“$b *= 7”（变量 $b 乘以 7），等等。
   </simpara>

   <para>
    还有一个表达式，如果没有在别的语言中看到过的话，可能看上去很奇怪，即三元条件运算符：
    <informalexample>
     <programlisting role="php">
<![CDATA[
$first ? $second : $third
]]>
     </programlisting>
    </informalexample>
    如果第一个子表达式的值是 &true;（非零），那么计算第二个子表达式的值，其值即为整个表达式的值。否则，将是第三个子表达式的值。
   </para>

   <para>
    下面的例子一般来说应该有助于理解前、后递增和表达式：
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function double($i)
{
    return $i*2;
}
$b = $a = 5;        /* assign the value five into the variable $a and $b */
$c = $a++;          /* post-increment, assign original value of $a
                       (5) to $c */
$e = $d = ++$b;     /* pre-increment, assign the incremented value of
                       $b (6) to $d and $e */

/* at this point, both $d and $e are equal to 6 */

$f = double($d++);  /* assign twice the value of $d before
                       the increment, 2*6 = 12 to $f */
$g = double(++$e);  /* assign twice the value of $e after
                       the increment, 2*7 = 14 to $g */
$h = $g += 10;      /* first, $g is incremented by 10 and ends with the
                       value of 24. the value of the assignment (24) is
                       then assigned into $h, and $h ends with the value
                       of 24 as well. */
?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <simpara>
    一些表达式可以被当成语句。这时，一条语句的形式是 'expr' ';'，即一个表达式加一个分号结尾。在“$b=$a=5;”中，$a=5
    是一个有效的表达式，但它本身不是一条语句。“$b=$a=5;”是一条有效的语句。
   </simpara>

   <simpara>
    最后一件值得提起的事情就是表达式的真值。在许多事件中，大体上主要是在条件执行和循环中，不要专注于表达式中明确的值，反而要注意表达式的值是否是
    &true; 或者 &false;。常量 &true; 和 &false;（大小写无关）是两种可能的
    Boolean 值。如果有必要，一个表达式将自动转换为 Boolean。参见<link
    linkend="language.types.typecasting">类型强制转换</link>一节。
   </simpara>
   <simpara>
    PHP 提供了一套完整强大的表达式，而为它提供完整的文件资料已经超出了本手册的范围。上面的例子应该为你提供了一个好的关于什么是表达式和怎样构建一个有用的表达式的概念。在本手册的其余部分，我们将始终使用
    <varname>expr</varname> 来表示一个有效的 PHP 表达式。
   </simpara>

  </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
