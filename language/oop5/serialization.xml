<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 9ee9eccf455188ab6eb352194eb6f9eb99e15606 Maintainer: daijie Status: ready -->
<!-- TODO Rewrite to remove usage of "you" and talk about __serialize/_unserialize -->
 <sect1 xml:id="language.oop5.serialization" xmlns="http://docbook.org/ns/docbook">
  <title>对象序列化</title>
  <title>序列化对象 - 在会话中存放对象</title>

  <para>
   所有php里面的值都可以使用函数<function>serialize</function>来返回一个包含字节流的字符串来表示。<function>unserialize</function>函数能够重新把字符串变回php原来的值。
   序列化一个对象将会保存对象的所有变量，但是不会保存对象的方法，只会保存类的名字。
  </para>
  
  <para>
   为了能够<function>unserialize</function>一个对象，这个对象的类必须已经定义过。如果序列化类A的一个对象，将会返回一个跟类A相关，而且包含了对象所有变量值的字符串。
   如果要想在另外一个文件中反序列化一个对象，这个对象的类必须在反序列化之前定义，可以通过包含一个定义该类的文件或使用函数<function>spl_autoload_register</function>来实现。
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// classa.inc:
  
  class A {
      public $one = 1;
    
      public function show_one() {
          echo $this->one;
      }
  }
  
// page1.php:

  include("classa.inc");
  
  $a = new A;
  $s = serialize($a);
  // 把变量$s保存起来以便文件page2.php能够读到
  file_put_contents('store', $s);

// page2.php:
  
  // 要正确反序列化，必须包含下面一个文件
  include("classa.inc");

  $s = file_get_contents('store');
  $a = unserialize($s);

  // 现在可以使用对象$a里面的函数 show_one()
  $a->show_one();
?>
]]>
   </programlisting>
  </informalexample>
  
  <para>
   在应用程序中序列化对象以便在之后使用，强烈推荐在整个应用程序都包含对象的类的定义。
   不然有可能出现在反序列化对象的时候，没有找到该对象的类的定义，从而把没有方法的类<classname>__PHP_Incomplete_Class_Name</classname>作为该对象的类，导致返回一个没有用的对象。
  </para>
  
  <para>
   所以在上面的例子中，当运行<literal>session_register("a")</literal>，把变量<varname>$a</varname>放在会话里之后，需要在每个页面都包含文件<literal>classa.inc</literal>，而不是只有文件<filename>page1.php</filename>和<filename>page2.php</filename>。
  </para>
  
  <para>
   除了以上建议，可以在对象上使用 
   <link linkend="object.sleep">__sleep()</link> 和
   <link linkend="object.wakeup">__wakeup()</link> 方法对序列化/反序列化事件挂载钩子。
   使用
   <link linkend="object.sleep">__sleep()</link> 也能够让你仅序列化对象的某些属性。
  </para>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
