<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 9ee9eccf455188ab6eb352194eb6f9eb99e15606 Maintainer: Haohappy Status: ready -->
 <sect1 xml:id="language.oop5.late-static-bindings" xmlns="http://docbook.org/ns/docbook">
  <title>后期静态绑定</title>
  <para>
   PHP 增加了一个叫做后期静态绑定的功能，用于在继承范围内引用静态调用的类。
  </para>

  <para>
   准确说，后期静态绑定工作原理是存储了在上一个“非转发调用”（non-forwarding
   call）的类名。当进行静态方法调用时，该类名即为明确指定的那个（通常在
   <link linkend="language.oop5.paamayim-nekudotayim"><literal>::</literal></link>
   运算符左侧部分）；当进行非静态方法调用时，即为该对象所属的类。所谓的“转发调用”（forwarding
   call）指的是通过以下几种方式进行的静态调用：<literal>self::</literal>，<literal>parent::</literal>，<literal>static::</literal>
   以及 <function>forward_static_call</function>。可用 <function>get_called_class</function>
   函数来得到被调用的方法所在的类名，<literal>static::</literal> 则指出了其范围。
  </para>

  <para>
   该功能从语言内部角度考虑被命名为“后期静态绑定”。“后期绑定”的意思是说，<literal>static::</literal>
   不再被解析为定义当前方法所在的类，而是在实际运行时计算的。也可以称之为“静态绑定”，因为它可以用于（但不限于）静态方法的调用。
  </para>

  <sect2 xml:id="language.oop5.late-static-bindings.self">
   <title><literal>self::</literal> 的限制</title>
   <para>
    使用 <literal>self::</literal> 或者
    <literal>__CLASS__</literal> 对当前类的静态引用，取决于定义当前方法所在的类：
   </para>
   <example>
    <title><literal>self::</literal> 用法</title>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function who() {
        echo __CLASS__;
    }
    public static function test() {
        self::who();
    }
}

class B extends A {
    public static function who() {
        echo __CLASS__;
    }
}

B::test();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A
]]>
    </screen>
   </example>

  </sect2>

  <sect2 xml:id="language.oop5.late-static-bindings.usage">
   <title>后期静态绑定的用法</title>

   <para>
    后期静态绑定本想通过引入一个新的关键字表示运行时最初调用的类来绕过限制。简单地说，这个关键字能在上述例子中调用
    <literal>test()</literal> 时引用的类是 <literal>B</literal> 而不是
    <literal>A</literal>。最终决定不引入新的关键字，而是使用已经预留的 <literal>static</literal> 关键字。
   </para>

   <example>
    <title><literal>static::</literal> 简单用法</title>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function who() {
        echo __CLASS__;
    }
    public static function test() {
        static::who(); // 后期静态绑定从这里开始
    }
}

class B extends A {
    public static function who() {
        echo __CLASS__;
    }
}

B::test();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
B
]]>
    </screen>
   </example>
   <note>
    <para>
     在非静态环境下，所调用的类即为该对象实例所属的类。由于 <literal>$this-></literal>
     会在同一作用范围内尝试调用私有方法，而 <literal>static::</literal>
     则可能给出不同结果。另一个区别是 <literal>static::</literal> 只能用于静态属性。
    </para>
   </note>
   <example>
    <title>非静态环境下使用 <literal>static::</literal></title>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    private function foo() {
        echo "success!\n";
    }
    public function test() {
        $this->foo();
        static::foo();
    }
}

class B extends A {
   /* foo() 将复制给 B，因此它的作用域将是 A 并调用成功 */
}

class C extends A {
    private function foo() {
        /* 替换原来的方法；新的作用域是 C */
    }
}

$b = new B();
$b->test();
$c = new C();
$c->test();   //fails
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
success!
success!
success!


Fatal error:  Call to private method C::foo() from context 'A' in /tmp/test.php on line 9
]]>
    </screen>
   </example>
   <note>
    <para>
     后期静态绑定的解析会一直到取得一个完全解析了的静态调用为止。另一方面，如果静态调用使用
     <literal>parent::</literal> 或者 <literal>self::</literal> 将转发调用信息。
    </para>
    <example>
     <title>转发和非转发调用</title>
     <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function foo() {
        static::who();
    }

    public static function who() {
        echo __CLASS__."\n";
    }
}

class B extends A {
    public static function test() {
        A::foo();
        parent::foo();
        self::foo();
    }

    public static function who() {
        echo __CLASS__."\n";
    }
}
class C extends B {
    public static function who() {
        echo __CLASS__."\n";
    }
}

C::test();
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
A
C
C
]]>
     </screen>
    </example>
   </note>
  </sect2>
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
