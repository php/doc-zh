<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 2ef411d8ef4f8e3ecbcb9c23fbb8017061e44501 Maintainer: lm92 Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<sect1 xml:id="language.oop5.paamayim-nekudotayim" xmlns="http://docbook.org/ns/docbook">
 <title>范围解析操作符 （::）</title>

 <para>
  范围解析操作符（也可称作 Paamayim Nekudotayim）或者更简单地说是一对冒号，可以用于访问<link
  linkend="language.oop5.static">静态</link>成员，<link
  linkend="language.oop5.constants">类常量</link>，还可以用于覆盖类中的属性和方法。
 </para>

 <para>
  当在类定义之外引用到这些项目时，要使用类名。
 </para>

 <para>
  可以通过变量来引用类，该变量的值不能是关键字（如
  <literal>self</literal>，<literal>parent</literal> 和 <literal>static</literal>）。
 </para>
 <para>
  把 Paamayim Nekudotayim 选作双冒号操作符的名字似乎有些奇怪。然而，这是 Zend
  开发小组在写 Zend Engine 0.5（被用于 PHP 3
  中）时所作出的决定。事实上这个词在希伯莱文就是双冒号的意思。
 </para>

 <example>
  <title>在类的外部使用 :: 操作符</title>
  <programlisting role="php">
<![CDATA[
<?php
class MyClass {
    const CONST_VALUE = 'A constant value';
}

$classname = 'MyClass';
echo $classname::CONST_VALUE;

echo MyClass::CONST_VALUE;
?>
]]>
  </programlisting>
 </example>

 <para>
  <varname>self</varname>，<varname>parent</varname> 和 <varname>static</varname>
  这三个特殊的关键字是用于在类定义的内部对其属性或方法进行访问的。
 </para>

 <example>
  <title>在类定义内部使用 ::</title>
  <programlisting role="php">
<![CDATA[
<?php
class OtherClass extends MyClass
{
    public static $my_static = 'static var';

    public static function doubleColon() {
        echo parent::CONST_VALUE . "\n";
        echo self::$my_static . "\n";
    }
}

$classname = 'OtherClass';
$classname::doubleColon();

OtherClass::doubleColon();
?>
]]>
  </programlisting>
 </example>

 <para>
  当一个子类覆盖其父类中的方法时，PHP
  不会调用父类中已被覆盖的方法。是否调用父类的方法取决于子类。这种机制也作用于<link
  linkend="language.oop5.decon">构造函数和析构函数</link>，<link
  linkend="language.oop5.overloading">重载</link>以及<link linkend="language.oop5.magic">魔术方法</link>。
 </para>

 <example>
  <title>调用父类的方法</title>
  <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
    protected function myFunc() {
        echo "MyClass::myFunc()\n";
    }
}

class OtherClass extends MyClass
{
    // 覆盖了父类的定义
    public function myFunc()
    {
        // 但还是可以调用父类中被覆盖的方法
        parent::myFunc();
        echo "OtherClass::myFunc()\n";
    }
}

$class = new OtherClass();
$class->myFunc();
?>
]]>
  </programlisting>
 </example>
 <para>
  参见 <link linkend="language.oop5.basic.class.this"> 伪变量的示例</link>。
 </para>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

