<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 6e69d9342ef5b124a62c8a255cb0d9a091d07b5e Maintainer: Haohappy Status: ready -->
<!-- CREDITS: Luffy -->
<sect1 xml:id="language.oop5.inheritance" xmlns="http://docbook.org/ns/docbook">
 <title>对象继承</title>
 <para>
  继承已为大家所熟知的一个程序设计特性，PHP 的对象模型也使用了继承。继承将会影响到类与类，对象与对象之间的关系。
 </para>
 <para>
  比如，当扩展一个类，子类就会继承父类所有 public 和 protected 的方法，属性和常量。除非子类覆盖了父类的方法，被继承的方法都会保留其原有功能。
 </para>
 <para>
  继承有助于功能的设计和抽象，在实现类似的对象、增加新功能时，无须重复编写这些公用的功能。
 </para>
  <para>
   子类无法访问父类的私有方法。因此，子类无需考虑正常的继承规则而重新实现私有方法。
   然而，在 PHP 8.0.0 之前， <literal>final</literal> 和 <literal>static</literal>
   的限制会应用于 private 方法。
   从 PHP 8.0.0 开始，仅 <literal>private final</literal> 的构造器是唯一受限的 private 方法；
   想要“禁用”构造器，我们通常用静态工厂方法作为代替。
  </para>
 <para>
  方法，属性和常量的 <link linkend="language.oop5.visibility">可见性</link>
  可以放宽，例如 <literal>protected</literal> 方法可以标记为 <literal>public</literal>，
  但不能增加限制，例如标记 <literal>public</literal> 属性为 <literal>private</literal>。
 </para>

 <note>
  <para>
   除非使用了自动加载，否则一个类必须在使用之前被定义。如果一个类扩展了另一个，则父类必须在子类之前被声明。此规则适用于类继承其它类与接口。
  </para>
 </note>
 <note>
  <para>
   It is not allowed to override a read-write property with a <link linkend="language.oop5.properties.readonly-properties">readonly property</link> or vice versa.
   <example>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    public int $prop;
}
class B extends A {
    // Illegal: read-write -> readonly
    public readonly int $prop;
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </note>

 <sect2 xml:id="language.oop5.inheritance.examples">
  <example xml:id="language.oop5.inheritance.examples.ex1">
   <title>继承示例</title>
   <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public function printItem($string)
    {
        echo 'Foo: ' . $string . PHP_EOL;
    }
    
    public function printPHP()
    {
        echo 'PHP is great.' . PHP_EOL;
    }
}

class Bar extends Foo
{
    public function printItem($string)
    {
        echo 'Bar: ' . $string . PHP_EOL;
    }
}

$foo = new Foo();
$bar = new Bar();
$foo->printItem('baz'); // 输出: 'Foo: baz'
$foo->printPHP();       // 输出: 'PHP is great' 
$bar->printItem('baz'); // 输出: 'Bar: baz'
$bar->printPHP();       // 输出: 'PHP is great'

?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.inheritance.internal-classes">
  <title>Return Type Compatibility with Internal Classes</title>

  <para>
   Prior to PHP 8.1, most internal classes or methods didn't declare their return types,
   and any return type was allowed when extending them.
  </para>

  <para>
   As of PHP 8.1.0, most internal methods started to "tentatively" declare their return type,
   in that case the return type of methods should be compatible with the parent being extended;
   otherwise, a deprecation notice is emitted.
   Note that lack of an explicit return declaration is also considered a signature mismatch,
   and thus results in the deprecation notice.
  </para>

  <para>
   If the return type cannot be declared for an overriding method due to PHP cross-version compatibility concerns,
   a <classname>ReturnTypeWillChange</classname> attribute can be added to silence the deprecation notice.
  </para>

  <example>
   <title>The overriding method does not declare any return type</title>
   <programlisting role="php">
    <![CDATA[
<?php
class MyDateTime extends DateTime
{
    public function modify(string $modifier) { return false; }
}

// "Deprecated: Return type of MyDateTime::modify(string $modifier) should either be compatible with DateTime::modify(string $modifier): DateTime|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice" as of PHP 8.1.0
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>The overriding method declares a wrong return type</title>
   <programlisting role="php">
    <![CDATA[
<?php
class MyDateTime extends DateTime
{
    public function modify(string $modifier): ?DateTime { return null; }
}

// "Deprecated: Return type of MyDateTime::modify(string $modifier): ?DateTime should either be compatible with DateTime::modify(string $modifier): DateTime|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice" as of PHP 8.1.0
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>The overriding method declares a wrong return type without a deprecation notice</title>
   <programlisting role="php">
    <![CDATA[
<?php
class MyDateTime extends DateTime
{
    /**
     * @return DateTime|false
     */
    #[\ReturnTypeWillChange]
    public function modify(string $modifier) { return false; }
}

// No notice is triggered
?>
]]>
   </programlisting>
  </example>

 </sect2>

</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
