<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 5e15a6c3e4d5819102361ae78e73c90a06238c8a Maintainer: Haohappy Status: ready -->
<!-- CREDITS: Luffy, mowangjuanzi -->
 <sect1 xml:id="language.oop5.magic" xmlns="http://docbook.org/ns/docbook">
  <title>魔术方法</title>
  <para>
   魔术方法是一种特殊的方法，当对对象执行某些操作时会覆盖 PHP 的默认操作。
  </para>
  <caution>
   <simpara>
    PHP 保留所有以 <literal>__</literal> 开头的方法名称。
    因此，除非覆盖 PHP 的行为，否则不建议使用此类方法名称。
   </simpara>
  </caution>
  <para>
   下列方法名被认为是魔术方法：
   <!-- Should be an itemized list ? -->
   <link linkend="object.construct">__construct()</link>、
   <link linkend="object.destruct">__destruct()</link>、
   <link linkend="object.call">__call()</link>、
   <link linkend="object.callstatic">__callStatic()</link>、
   <link linkend="object.get">__get()</link>、
   <link linkend="object.set">__set()</link>、
   <link linkend="object.isset">__isset()</link>、
   <link linkend="object.unset">__unset()</link>、
   <link linkend="object.sleep">__sleep()</link>、
   <link linkend="object.wakeup">__wakeup()</link>、
   <link linkend="object.serialize">__serialize()</link>、
   <link linkend="object.unserialize">__unserialize()</link>、
   <link linkend="object.tostring">__toString()</link>、
   <link linkend="object.invoke">__invoke()</link>、
   <link linkend="object.set-state">__set_state()</link>、
   <link linkend="object.clone">__clone()</link>、
   <link linkend="object.debuginfo">__debugInfo()</link>。
  </para>

  <warning>
   <!-- See for a code example of this behaviour: https://3v4l.org/Bov34 -->
   <simpara>
    除了 <link linkend="object.construct">__construct()</link>、
    <link linkend="object.destruct">__destruct()</link> 和
    <link linkend="object.clone">__clone()</link> 之外的所有魔术方法都<emphasis>必须</emphasis>声明为 <literal>public</literal>，
    否则会发出 <constant>E_WARNING</constant>。
    在 PHP 8.0.0 之前没有为魔术方法
    <link linkend="object.sleep">__sleep()</link>、<link linkend="object.wakeup">__wakeup()</link>、<link linkend="object.serialize">__serialize()</link>、<link linkend="object.unserialize">__unserialize()</link>、<link linkend="object.set-state">__set_state()</link> 发出诊断信息。
   </simpara>
  </warning>
  <warning>
   <para>
    如果定义魔术方法时使用类型声明，它们必须与本文档中描述的签名相同，否则会发出致命错误。
    在 PHP 8.0.0 之前，不会发出诊断信息。
    然而，<link linkend="object.construct">__construct()</link> 和
    <link linkend="object.destruct">__destruct()</link> 不能声明返回类型，
    否则会发出致命错误。
   </para>
  </warning>
 
  <sect2 xml:id="language.oop5.magic.sleep">
   <title>
    <link linkend="object.sleep">__sleep()</link> 和
    <link linkend="object.wakeup">__wakeup()</link>
   </title>
   
   <methodsynopsis xml:id="object.sleep">
    <modifier>public</modifier> <type>array</type><methodname>__sleep</methodname>
    <void/>
   </methodsynopsis>
   <methodsynopsis xml:id="object.wakeup">
    <modifier>public</modifier> <type>void</type><methodname>__wakeup</methodname>
    <void/>
   </methodsynopsis>
   
   <para>
    <function>serialize</function> 函数会检查类中是否存在一个魔术方法
    <link linkend="object.sleep">__sleep()</link>。如果存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。
    如果该方法未返回任何内容，则 &null; 被序列化，并产生一个 <constant>E_NOTICE</constant> 级别的错误。
    </para>
   <note>
    <para>
     <link linkend="object.sleep">__sleep()</link> 不能返回父类的私有成员的名字。这样做会产生一个
     <constant>E_NOTICE</constant> 级别的错误。使用
     <link linkend="object.serialize">__serialize()</link> 接口替代。
    </para>
   </note>
   <note>
    <para>
     自 PHP 8.0.0 起，<link linkend="object.sleep">__sleep()</link> 的返回值不是数组会生成 warning。之前生成 notice。
    </para>
   </note>
   <para>
    <link linkend="object.sleep">__sleep()</link> 方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用。
   </para>
   <para>
    与之相反，<function>unserialize</function> 会检查是否存在一个 <link linkend="object.wakeup">__wakeup()</link>
    方法。如果存在，则会先调用 <literal>__wakeup</literal> 方法，预先准备对象需要的资源。
   </para>
   <para>
    <link linkend="object.wakeup">__wakeup()</link> 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。
   </para>
   <example>
    <title>Sleep 和 wakeup</title>
    <programlisting role="php">
<![CDATA[
<?php
class Connection 
{
    protected $link;
    private $server, $username, $password, $db;
    
    public function __construct($server, $username, $password, $db)
    {
        $this->server = $server;
        $this->username = $username;
        $this->password = $password;
        $this->db = $db;
        $this->connect();
    }
    
    private function connect()
    {
        $this->link = mysql_connect($this->server, $this->username, $this->password);
        mysql_select_db($this->db, $this->link);
    }
    
    public function __sleep()
    {
        return array('server', 'username', 'password', 'db');
    }
    
    public function __wakeup()
    {
        $this->connect();
    }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.serialize">
   <title>
    <link linkend="object.serialize">__serialize()</link> 和
    <link linkend="object.unserialize">__unserialize()</link>
   </title>

   <methodsynopsis xml:id="object.serialize">
    <modifier>public</modifier> <type>array</type><methodname>__serialize</methodname>
    <void/>
   </methodsynopsis>
   <methodsynopsis xml:id="object.unserialize">
    <modifier>public</modifier> <type>void</type><methodname>__unserialize</methodname>
    <methodparam><type>array</type><parameter>data</parameter></methodparam>
   </methodsynopsis>

   <para>
    <function>serialize</function> 函数会检查类中是否存在一个魔术方法
    <link linkend="object.serialize">__serialize()</link> 
    。如果存在，该方法将在任何序列化之前优先执行。它必须以一个代表对象序列化形式的 键/值 成对的关联数组形式来返回，如果没有返回数组，将会抛出一个
    <classname>TypeError</classname> 错误。
   </para>
   <note>
    <para>
     如果类中同时定义了 <link linkend="object.serialize">__serialize()</link> 和 <link linkend="object.sleep">__sleep()</link>
     两个魔术方法，则只有 <link linkend="object.serialize">__serialize()</link> 方法会被调用。
     <link linkend="object.sleep">__sleep()</link> 方法会被忽略掉。如果对象实现了 <link linkend="class.serializable">Serializable</link>
     接口，接口的 <literal>serialize()</literal> 方法会被忽略，做为代替类中的 <link linkend="object.serialize">__serialize()</link> 方法会被调用。
    </para>
   </note>
   <para>
    <link linkend="object.serialize">__serialize()</link> 的预期用途是定义对象序列化友好的任意表示。
    数组的元素可能对应对象的属性，但是这并不是必须的。
   </para>
   <para>
    相反，<function>unserialize</function> 检查是否存在具有名为 
    <link linkend="object.unserialize">__unserialize()</link>
    的魔术方法。此函数将会传递从 <link linkend="object.serialize">__serialize()</link>
    返回的恢复数组。然后它可以根据需要从该数组中恢复对象的属性。
   </para>
   <note>
    <para>
     如果类中同时定义了 <link linkend="object.unserialize">__unserialize()</link> 和 <link linkend="object.wakeup">__wakeup()</link>
     两个魔术方法，则只有 <link linkend="object.unserialize">__unserialize()</link> 方法会生效，<link linkend="object.wakeup">__wakeup()</link> 方法会被忽略。
    </para>
   </note>
   <note>
    <para>
      此特性自 PHP 7.4.0 起可用。
    </para>
   </note>
   <example>
    <title>序列化和反序列化</title>
    <programlisting role="php">
<![CDATA[
<?php
class Connection
{
    protected $link;
    private $dsn, $username, $password;

    public function __construct($dsn, $username, $password)
    {
        $this->dsn = $dsn;
        $this->username = $username;
        $this->password = $password;
        $this->connect();
    }

    private function connect()
    {
        $this->link = new PDO($this->dsn, $this->username, $this->password);
    }

    public function __serialize(): array
    {
        return [
          'dsn' => $this->dsn,
          'user' => $this->username,
          'pass' => $this->password,
        ];
    }

    public function __unserialize(array $data): void
    {
        $this->dsn = $data['dsn'];
        $this->username = $data['user'];
        $this->password = $data['pass'];

        $this->connect();
    }
}?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.tostring">
   <title><link linkend="object.tostring">__toString()</link></title>
   <methodsynopsis xml:id="object.tostring">
    <modifier>public</modifier> <type>string</type><methodname>__toString</methodname>
    <void/>
   </methodsynopsis>
   
   <para>
    <link linkend="object.tostring">__toString()</link> 方法用于一个类被当成字符串时应怎样回应。例如
    <literal>echo $obj;</literal> 应该显示些什么。
   </para>
   <warning>
    <para>
     从 PHP 8.0.0 起，返回值遵循标准的 PHP 类型语义，
     这意味着如果禁用 <link linkend="language.types.declarations.strict">严格类型</link>
     ，它将会强制转换为字符串。
    </para>
    <para>
     如果启用<link linkend="language.types.declarations.strict">严格类型</link>，则声明的 <type>string</type> 类型将<emphasis>不会</emphasis>接受
     <interfacename>Stringable</interfacename> 对象。如果需要这种行为，类型声明必须接受 <interfacename>Stringable</interfacename> 和 <type>string</type> 的联合类型。
    </para>
    <para>
     从 PHP 8.0.0 起，任何包含 <link linkend="object.tostring">__toString()</link>
     方法的类都将隐性实现 <interfacename>Stringable</interfacename> 接口，
     因此将通过该接口的类型检查。推荐无论如何应显式实现该接口。
    </para>
    <para>
     在 PHP 7.4 中，返回值 <emphasis>必须</emphasis> 是 <type>string</type>
     ，否则会抛出 <classname>Error</classname> 。
    </para>
    <para>
     在 PHP 7.4.0 之前，返回值 <emphasis>必须</emphasis> 是 <type>string</type>
     ，否则会抛出致命错误 <constant>E_RECOVERABLE_ERROR</constant> 。
    </para>
   </warning>
   <warning>
    <simpara>
     在 PHP 7.4.0 之前不能在 <link linkend="object.tostring">__toString()</link>
     方法中抛出异常。这么做会导致致命错误。
    </simpara>
   </warning>
   <example>
    <title>简单示例</title>
    <programlisting role="php">
<![CDATA[
<?php
// 声明一个简单的类
class TestClass
{
    public $foo;

    public function __construct($foo) 
    {
        $this->foo = $foo;
    }

    public function __toString() {
        return $this->foo;
    }
}

$class = new TestClass('Hello');
echo $class;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.invoke">
   <title><link linkend="object.invoke">__invoke()</link></title>
   <methodsynopsis xml:id="object.invoke">
    <type>mixed</type><methodname>__invoke</methodname>
    <methodparam rep="repeat"><parameter>values</parameter></methodparam>
   </methodsynopsis>
   <para>
    当尝试以调用函数的方式调用一个对象时，<link linkend="object.invoke">__invoke()</link> 方法会被自动调用。
   </para>
   <example>
    <title>使用 <link linkend="object.invoke">__invoke()</link></title>
    <programlisting role="php">
<![CDATA[
<?php
class CallableClass 
{
    function __invoke($x) {
        var_dump($x);
    }
}
$obj = new CallableClass;
$obj(5);
var_dump(is_callable($obj));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(5)
bool(true)
]]>
    </screen>
   </example>
   <example>
    <title>使用 <link linkend="object.invoke">__invoke()</link></title>
    <programlisting role="php">
<![CDATA[
<?php
class Sort
{
    private $key;
    public function __construct(string $key)
    {
        $this->key = $key;
    }
    public function __invoke(array $a, array $b): int
    {
        return $a[$this->key] <=> $b[$this->key];
    }
}
$customers = [
    ['id' => 1, 'first_name' => 'John', 'last_name' => 'Do'],
    ['id' => 3, 'first_name' => 'Alice', 'last_name' => 'Gustav'],
    ['id' => 2, 'first_name' => 'Bob', 'last_name' => 'Filipe']
];
// sort customers by first name
usort($customers, new Sort('first_name'));
print_r($customers);
// sort customers by last name
usort($customers, new Sort('last_name'));
print_r($customers);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [id] => 3
            [first_name] => Alice
            [last_name] => Gustav
        )
    [1] => Array
        (
            [id] => 2
            [first_name] => Bob
            [last_name] => Filipe
        )
    [2] => Array
        (
            [id] => 1
            [first_name] => John
            [last_name] => Do
        )
)
Array
(
    [0] => Array
        (
            [id] => 1
            [first_name] => John
            [last_name] => Do
        )
    [1] => Array
        (
            [id] => 2
            [first_name] => Bob
            [last_name] => Filipe
        )
    [2] => Array
        (
            [id] => 3
            [first_name] => Alice
            [last_name] => Gustav
        )
)
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.set-state">
   <title><link linkend="object.set-state">__set_state()</link></title>
   <methodsynopsis xml:id="object.set-state">
    <modifier>static</modifier> <type>object</type><methodname>__set_state</methodname>
    <methodparam><type>array</type><parameter>properties</parameter></methodparam>
   </methodsynopsis>
   <para>
    当调用 <function>var_export</function> 导出类时，此<link
    linkend="language.oop5.static">静态</link> 方法会被调用。
   </para>
   <para>
    本方法的唯一参数是一个数组，其中包含按 <literal>['property' => value, ...]</literal> 格式排列的类属性。
   </para>
   <example>
    <title>使用 <link linkend="object.set-state">__set_state()</link>></title>
    <programlisting role="php">
<![CDATA[
<?php

class A
{
    public $var1;
    public $var2;

    public static function __set_state($an_array)
    {
        $obj = new A;
        $obj->var1 = $an_array['var1'];
        $obj->var2 = $an_array['var2'];
        return $obj;
    }
}

$a = new A;
$a->var1 = 5;
$a->var2 = 'foo';

$b = var_export($a, true);
var_dump($b);
eval('$c = ' . $b . ';');
var_dump($c);
var_dump($b);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(60) "A::__set_state(array(
   'var1' => 5,
   'var2' => 'foo',
))"
object(A)#2 (2) {
  ["var1"]=>
  int(5)
  ["var2"]=>
  string(3) "foo"
}
]]>
    </screen>
   </example>
   <note>
    <simpara>
     导出对象时，<function>var_export</function> 不会检查对象类是否实现了
     <link linkend="object.set-state">__set_state()</link> ，
     所以如果 <link linkend="object.set-state">__set_state()</link> 没有实现，
     重新导入对象会触发 <classname>Error</classname> 异常。特别是这会影响内部(内置)类。
    </simpara>
    <simpara>
     程序员有责任验证要重新导入的类是否实现了 
     <link linkend="object.set-state">__set_state()</link> 。
    </simpara>
   </note>
  </sect2>
  <sect2 xml:id="language.oop5.magic.debuginfo">
   <title><link linkend="object.debuginfo">__debugInfo()</link></title>
   <methodsynopsis xml:id="object.debuginfo">
    <type>array</type><methodname>__debugInfo</methodname>
    <void/>
   </methodsynopsis>
   <para>
    当通过 <function>var_dump</function> 转储对象，获取应该要显示的属性的时候，
    该函数就会被调用。如果对象中没有定义该方法，那么将会展示所有的公有、受保护和私有的属性。
   </para>
   <example>
    <title>使用 <link linkend="object.debuginfo">__debugInfo()</link></title>
    <programlisting role="php">
<![CDATA[
<?php
class C {
    private $prop;

    public function __construct($val) {
        $this->prop = $val;
    }

    public function __debugInfo() {
        return [
            'propSquared' => $this->prop ** 2,
        ];
    }
}

var_dump(new C(42));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(C)#1 (1) {
  ["propSquared"]=>
  int(1764)
}
]]>
    </screen>
   </example>
  </sect2>
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
