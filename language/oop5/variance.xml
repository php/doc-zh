<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 161dde4fe721309398dd324edbf02aec409f127b Maintainer: daijie Status: ready -->
<!-- CREDITS: Luffy -->
<sect1 xml:id="language.oop5.variance" xmlns="http://docbook.org/ns/docbook">
 <title>协变与逆变</title>

 <para>
  在 PHP 7.2.0 里，通过对子类方法里参数的类型放宽限制，实现对逆变的部分支持。
  自 PHP 7.4.0 起开始支持完整的协变和逆变。
 </para>
 <para>
  协变使子类比父类方法能返回更具体的类型；
  逆变使子类比父类方法参数类型能接受更模糊的类型。
 </para>
 <para>
  在以下情况下，类型声明被认为更具体：
  <itemizedlist>
   <listitem>
    <simpara>
     在 <link linkend="language.types.type-system.composite.union">联合类型</link> 中删除类型
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     在
     <link linkend="language.types.type-system.composite.intersection">交集类型</link> 中添加类型
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     类类型（class type）修改为子类类型
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <type>iterable</type> 修改为 <type>array</type> 或者 <classname>Traversable</classname>
    </simpara>
   </listitem>
  </itemizedlist>

  如果情况相反，则类型类被认为是模糊的。
 </para>

 <sect2 xml:id="language.oop5.variance.covariance">
  <title>协变</title>

  <para>
   创建一个名为 <varname>Animal</varname> 的简单的抽象父类，用于演示什么是协变。
   两个子类：<varname>Cat</varname> 和 <varname>Dog</varname> 扩展（extended）了 <varname>Animal</varname>。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

abstract class Animal
{
    protected string $name;

    public function __construct(string $name)
    {
        $this->name = $name;
    }

    abstract public function speak();
}

class Dog extends Animal
{
    public function speak()
    {
        echo $this->name . " barks";
    }
}

class Cat extends Animal 
{
    public function speak()
    {
        echo $this->name . " meows";
    }
}
]]>
   </programlisting>
  </informalexample>

  <para>
   注意：在这个例子中，没有方法返回了值。
   将通过添加个别工厂方法，创建并返回 <varname>Animal</varname>、<varname>Cat</varname>、<varname>Dog</varname> 
   类型的新对象。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

interface AnimalShelter
{
    public function adopt(string $name): Animal;
}

class CatShelter implements AnimalShelter
{
    public function adopt(string $name): Cat // 返回类的类型不仅限于 Animal，还可以是 Cat 类型
    {
        return new Cat($name);
    }
}

class DogShelter implements AnimalShelter
{
    public function adopt(string $name): Dog // 返回类的类型不仅限于 Animal，还可以是 Dog 类型
    {
        return new Dog($name);
    }
}

$kitty = (new CatShelter)->adopt("Ricky");
$kitty->speak();
echo "\n";

$doggy = (new DogShelter)->adopt("Mavrick");
$doggy->speak();
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Ricky meows
Mavrick barks
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="language.oop5.variance.contravariance">
  <title>逆变</title>

  <para>
   继续上一个例子，除了 <varname>Animal</varname>、
   <varname>Cat</varname>、<varname>Dog</varname>，我们还添加了 <varname>Food</varname>、<varname>AnimalFood</varname> 类，
   同时为抽象类 <varname>Animal</varname> 添加了一个 <varname>eat(AnimalFood $food)</varname> 方法。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

class Food {}

class AnimalFood extends Food {}

abstract class Animal
{
    protected string $name;

    public function __construct(string $name)
    {
        $this->name = $name;
    }

    public function eat(AnimalFood $food)
    {
        echo $this->name . " eats " . get_class($food);
    }
}
]]>
   </programlisting>
  </informalexample>

  <para>
   为了演示什么是逆变，<varname>Dog</varname> 类重写（overridden）了 <varname>eat</varname> 方法，
   允许传入任意 <varname>Food</varname> 类型的对象。
   而 <varname>Cat</varname> 类保持不变。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

class Dog extends Animal
{
    public function eat(Food $food) {
        echo $this->name . " eats " . get_class($food);
    }
}
]]>
   </programlisting>
  </informalexample>

  <para>
  下面的例子展示了逆变。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$kitty = (new CatShelter)->adopt("Ricky");
$catFood = new AnimalFood();
$kitty->eat($catFood);
echo "\n";

$doggy = (new DogShelter)->adopt("Mavrick");
$banana = new Food();
$doggy->eat($banana);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Ricky eats AnimalFood
Mavrick eats Food
]]>
   </screen>

   <para>
   但 <varname>$kitty</varname> 若尝试 
   <varname>eat</varname> <varname>$banana</varname>
   会发生什么呢？
   </para>

   <programlisting role="php">
<![CDATA[
$kitty->eat($banana);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Fatal error: Uncaught TypeError: Argument 1 passed to Animal::eat() must be an instance of AnimalFood, instance of Food given
]]>
   </screen>
  </informalexample>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
