<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 9ee9eccf455188ab6eb352194eb6f9eb99e15606 Maintainer: HaoHappy Status: ready -->
<!-- CREDITS: Luffy -->
 <sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
  <title>属性</title>

  <para>
   类的变量成员叫做 <emphasis>属性</emphasis>，或者叫 <emphasis>字段</emphasis>，在本文档统一称为 <emphasis>属性</emphasis> 。从 PHP 7.4 开始，属性声明是由关键字
   <literal>public</literal>，<literal>protected</literal> 或者
   <literal>private</literal> 开头，然后是类型声明，然后跟一个普通的变量声明来组成。属性中的变量可以初始化，但是初始化的值必须是 <link linkend="language.constants">常数</link> 。
  </para>
  <para>
   有关 <literal>public</literal>，<literal>protected</literal>
   和 <literal>private</literal> 的更多详细信息，请查看<xref linkend="language.oop5.visibility" />。
  </para>
  <note>
   <para>
    另一种不推荐的声明类属性的方法是使用 <literal>var</literal> 关键字，因为它是为了向后兼容 PHP 4。
    如果使用，会将其视为 <literal>public</literal>。
   </para>
   <para>
   </para>
  </note>
  <para>
   在类的成员方法里面，可以用 <literal>-&gt;</literal>（对象运算符）：<varname>$this-&gt;property</varname>（其中
   <literal>property</literal> 是该属性名）这种方式来访问非静态属性。静态属性则是用
   <literal>::</literal>（双冒号）：<varname>self::$property</varname>
   来访问。更多静态属性与非静态属性的区别参见 <link linkend="language.oop5.static">Static 关键字</link>。
  </para>
  <para>
   当一个方法在类定义内部被调用时，有一个可用的伪变量
   <varname>$this</varname>。<varname>$this</varname>
   是一个到主叫对象的引用（通常是该方法所从属的对象，但如果是从第二个对象<link
   linkend="language.oop5.static">静态</link>调用时也可能是另一个对象）。
  </para>

  <para>
   <example>
    <title>属性声明</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   public $var1 = 'hello ' . 'world';
   public $var2 = <<<EOD
hello world
EOD;
   public $var3 = 1+2;
   // 正确的属性声明
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // 正确的属性声明
   public $var6 = myConstant;
   public $var7 = array(true, false);

   public $var8 = <<<'EOD'
hello world
EOD;
}
?>
]]>
    </programlisting>   
   </example>
  </para>

  <note>
   <para>
    更多关于类／对象的处理函数，请查看<link linkend="ref.classobj">类／对象函数</link>。
   </para>
  </note>

 <sect2 xml:id="language.oop5.properties.typed-properties">
  <title>类型声明</title>
  <para>
   从 PHP 7.4.0 开始，属性定义可以包含 <xref linkend="language.types.declarations" /> ，
   但 <type>callable</type> 除外。
   <example>
    <title>类型声明的示例</title>
    <programlisting role="php">
<![CDATA[
<?php

class User
{
    public int $id;
    public ?string $name;

    public function __construct(int $id, ?string $name)
    {
        $this->id = $id;
        $this->name = $name;
    }
}

$user = new User(1234, null);

var_dump($user->id);
var_dump($user->name);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
     <![CDATA[
int(1234)
NULL
]]>
    </screen>
   </example>
  </para>

  <para>
   类型属性必须在访问前初始化，否则会抛出 <classname>Error</classname> 。
   <example>
    <title>访问属性</title>
    <programlisting role="php">
     <![CDATA[
<?php

class Shape
{
    public int $numberOfSides;
    public string $name;

    public function setNumberOfSides(int $numberOfSides): void
    {
        $this->numberOfSides = $numberOfSides;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getNumberOfSides(): int
    {
        return $this->numberOfSides;
    }

    public function getName(): string
    {
        return $this->name;
    }
}

$triangle = new Shape();
$triangle->setName("triangle");
$triangle->setNumberofSides(3);
var_dump($triangle->getName());
var_dump($triangle->getNumberOfSides());

$circle = new Shape();
$circle->setName("circle");
var_dump($circle->getName());
var_dump($circle->getNumberOfSides());
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
     <![CDATA[
string(8) "triangle"
int(3)
string(6) "circle"

Fatal error: Uncaught Error: Typed property Shape::$numberOfSides must not be accessed before initialization
]]>
    </screen>
   </example>
  </para>
 </sect2>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
