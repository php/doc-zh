<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 6e042e0ae6a574641bc9082344ed60819f732765 Maintainer: HaoHappy Status: ready -->
<!-- CREDITS: Luffy, mowangjuanzi -->
 <sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
  <title>属性</title>

  <para>
   类的变量成员叫做<emphasis>属性</emphasis>，或者叫<emphasis>字段</emphasis>，在本文档统一称为<emphasis>属性</emphasis>。
   属性开头至少使用一个修饰符（比如 <xref linkend="language.oop5.visibility"/>， <xref linkend="language.oop5.static"/>，
   或者自 PHP 8.1.0 起支持的 <link linkend="language.oop5.properties.readonly-properties">readonly</link>），
   除了 <code>readonly</code> 属性之外都是可选的，然后自 PHP 7.4 
   起可以跟一个类型声明，然后跟一个普通的变量声明来组成。属性中的变量可以初始化，但是初始化的值必须是 <link linkend="language.constants">常量</link>值。
  </para>
  <note>
   <para>
    另一种过时的声明类属性的方法是使用 <literal>var</literal> 关键字，而不是使用修饰符。
   </para>
  </note>
  <note>
   <simpara>
    没有声明 <xref linkend="language.oop5.visibility"/> 修饰符的属性将默认声明为 <literal>public</literal>。
   </simpara>
  </note>
  <para>
   在类的成员方法里面，可以用 <literal>-&gt;</literal>（对象运算符）：<varname>$this-&gt;property</varname>（其中
   <literal>property</literal> 是该属性名）这种方式来访问非静态属性。静态属性则是用
   <literal>::</literal>（双冒号）：<varname>self::$property</varname>
   来访问。更多静态属性与非静态属性的区别参见 <xref linkend="language.oop5.static" />。
  </para>
  <para>
   当一个方法在类定义内部被调用时，有一个可用的伪变量
   <varname>$this</varname>。<varname>$this</varname>
   是一个到主叫对象的引用（通常是该方法所从属的对象，但如果是从第二个对象<link
   linkend="language.oop5.static">静态</link>调用时也可能是另一个对象）。
  </para>

  <para>
   <example>
    <title>属性声明</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   public $var1 = 'hello ' . 'world';
   public $var2 = <<<EOD
hello world
EOD;
   public $var3 = 1+2;
   // 正确的属性声明
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // 正确的属性声明
   public $var6 = myConstant;
   public $var7 = array(true, false);

   public $var8 = <<<'EOD'
hello world
EOD;

   // 没有访问控制修饰符：
   static $var9;
   readonly int $var10;
}
?>
]]>
    </programlisting>   
   </example>
  </para>

  <note>
   <para>
    更多关于类／对象的处理函数，请查看<link linkend="ref.classobj">类／对象函数</link>。
   </para>
  </note>

 <sect2 xml:id="language.oop5.properties.typed-properties">
  <title>类型声明</title>
  <para>
   从 PHP 7.4.0 开始，属性定义可以包含<xref linkend="language.types.declarations" />，但
   <type>callable</type> 除外。
   <example>
    <title>类型声明的示例</title>
    <programlisting role="php">
<![CDATA[
<?php

class User
{
    public int $id;
    public ?string $name;

    public function __construct(int $id, ?string $name)
    {
        $this->id = $id;
        $this->name = $name;
    }
}

$user = new User(1234, null);

var_dump($user->id);
var_dump($user->name);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
     <![CDATA[
int(1234)
NULL
]]>
    </screen>
   </example>
  </para>

  <para>
   类型属性必须在访问前初始化，否则会抛出 <classname>Error</classname> 。
   <example>
    <title>访问属性</title>
    <programlisting role="php">
     <![CDATA[
<?php

class Shape
{
    public int $numberOfSides;
    public string $name;

    public function setNumberOfSides(int $numberOfSides): void
    {
        $this->numberOfSides = $numberOfSides;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getNumberOfSides(): int
    {
        return $this->numberOfSides;
    }

    public function getName(): string
    {
        return $this->name;
    }
}

$triangle = new Shape();
$triangle->setName("triangle");
$triangle->setNumberofSides(3);
var_dump($triangle->getName());
var_dump($triangle->getNumberOfSides());

$circle = new Shape();
$circle->setName("circle");
var_dump($circle->getName());
var_dump($circle->getNumberOfSides());
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
     <![CDATA[
string(8) "triangle"
int(3)
string(6) "circle"

Fatal error: Uncaught Error: Typed property Shape::$numberOfSides must not be accessed before initialization
]]>
    </screen>
   </example>
  </para>
 </sect2>

 <sect2 xml:id="language.oop5.properties.readonly-properties">
  <title>Readonly properties</title>
  <para>
   As of PHP 8.1.0, a property can be declared with the <code>readonly</code> modifier, which prevents modification of the property after initialization.
   <example>
    <title>Example of readonly properties</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test {
   public readonly string $prop;
   public function __construct(string $prop) {
       // Legal initialization.
       $this->prop = $prop;
   }
}
$test = new Test("foobar");
// Legal read.
var_dump($test->prop); // string(6) "foobar"
// Illegal reassignment. It does not matter that the assigned value is the same.
$test->prop = "foobar";
// Error: Cannot modify readonly property Test::$prop
?>
]]>
    </programlisting>
   </example>
   <note>
    <para>
     The readonly modifier can only be applied to <link linkend="language.oop5.properties.typed-properties">typed properties</link>.
     A readonly property without type constraints can be created using the <xref linkend="language.types.declarations.mixed" /> type.
    </para>
   </note>
   <note>
    <para>
     Readonly static properties are not supported.
    </para>
   </note>
  </para>
  <para>
   A readonly property can only be initialized once, and only from the scope where it has been declared. Any other assignment or modification of the property will result in an <classname>Error</classname> exception.
   <example>
    <title>Illegal initialization of readonly properties</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test1 {
    public readonly string $prop;
}
$test1 = new Test1;
// Illegal initialization outside of private scope.
$test1->prop = "foobar";
// Error: Cannot initialize readonly property Test1::$prop from global scope
?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <para>
    Specifying an explicit default value on readonly properties is not allowed, because a readonly property with a default value is essentially the same as a constant, and thus not particularly useful.
    <example>
     <programlisting role="php">
<![CDATA[
<?php
class Test {
    // Fatal error: Readonly property Test::$prop cannot have default value
    public readonly int $prop = 42;
}
?>
]]>
     </programlisting>
    </example>
   </para>
  </note>
  <note>
   <para>
    Readonly properties cannot be <function>unset</function> once they are initialized. However, it is possible to unset a readonly property prior to initialization, from the scope where the property has been declared.
   </para>
  </note>
  <para>
   Modifications are not necessarily plain assignments, all of the following will also result in an <classname>Error</classname> exception:
   <example>
    <programlisting role="php">
<![CDATA[
<?php
class Test {
    public function __construct(
        public readonly int $i = 0,
        public readonly array $ary = [],
    ) {}
}
$test = new Test;
$test->i += 1;
$test->i++;
++$test->i;
$test->ary[] = 1;
$test->ary[0][] = 1;
$ref =& $test->i;
$test->i =& $ref;
byRef($test->i);
foreach ($test as &$prop);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   However, readonly properties do not preclude interior mutability. Objects (or resources) stored in readonly properties may still be modified internally:
   <example>
    <programlisting role="php">
<![CDATA[
<?php
class Test {
    public function __construct(public readonly object $obj) {}
}
$test = new Test(new stdClass);
// Legal interior mutation.
$test->obj->foo = 1;
// Illegal reassignment.
$test->obj = new stdClass;
?>
]]>
    </programlisting>
   </example>
  </para>
 </sect2>

 <sect2 xml:id="language.oop5.properties.dynamic-properties">
  <title>Dynamic properties</title>
  <para>
   If trying to assign to a non existant property on an &object;,
   PHP will automatically create a corresponding property.
   This dynamically created property will <emphasis>only</emphasis> be
   available on this class instance.
  </para>

  <warning>
   <simpara>
    Dynamic properties are deprecated as of PHP 8.2.0.
    It is recommended to declare the property instead.
    To handle arbitrary property names, the class should implement the magic
    methods <link linkend="object.get">__get()</link> and
    <link linkend="object.set">__set()</link>.
    At last resort the class can be marked with the
    <code>#[\AllowDynamicProperties]</code> attribute.
   </simpara>
  </warning>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
