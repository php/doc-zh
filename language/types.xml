<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 19e8122137a1d42ed60f17fe2c0c2b69b0b2d16b Maintainer: dallas Status: ready -->
<!-- CREDITS: HonestQiao, Gregory, Haohappy, mowangjuanzi -->
<chapter xml:id="language.types" xmlns="http://docbook.org/ns/docbook">
 <title>类型</title>

 <sect1 xml:id="language.types.intro">
  <title>简介</title>
  
  <simpara>
   PHP 支持 10 种原始数据类型。
  </simpara>
  
  <para>
   四种标量类型：
  </para>

  <itemizedlist>

   <listitem>
    <simpara>
     <type>bool</type>（布尔型）
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <type>int</type>（整型）
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <type>float</type>（浮点型)
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <type>string</type>（字符串）
    </simpara>
   </listitem>

  </itemizedlist>

  <para>
   四种复合类型：
  </para>

  <itemizedlist>

   <listitem>
    <simpara>
     <type>array</type>（数组）
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <type>object</type>（对象）
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <type>callable</type>（可调用）
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <type>iterable</type>（可迭代）
    </simpara>
   </listitem>

  </itemizedlist>

  <para>
   最后是两种特殊类型：
  </para>

  <itemizedlist>

   <listitem>
    <simpara>
     <type>resource</type>（资源）
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <type>NULL</type>（无类型）
    </simpara>
   </listitem>
   
  </itemizedlist>
  
  <simpara>
   变量的类型通常不是由程序员设定的，确切地说，是由 PHP
   根据该变量使用的上下文在运行时决定的。
  </simpara>

  <note>
   <simpara>
    如果想查看某个<link linkend="language.expressions">表达式</link>的值和类型，用
    <function>var_dump</function> 函数。
   </simpara>

   <para>
    如果只是想得到一个易读懂的类型的表达方式用于调试，用
    <function>gettype</function> 函数。要检验某个类型，<emphasis>不要</emphasis>用
    <function>gettype</function>，而用 <literal>is_<replaceable>type</replaceable></literal> 函数。以下是一些范例：
   </para>
   
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a_bool = TRUE;   // 布尔值 boolean
$a_str  = "foo";  // 字符串 string
$a_str2 = 'foo';  // 字符串 string
$an_int = 12;     // 整型 integer

echo gettype($a_bool); // 输出:  boolean
echo gettype($a_str);  // 输出:  string

// 如果是整型，就加上 4
if (is_int($an_int)) {
    $an_int += 4;
}

// 如果 $bool 是字符串，就打印出来
// (啥也没打印出来)
if (is_string($a_bool)) {
    echo "String: $a_bool";
}
?>
]]>
    </programlisting>
   </informalexample>
  </note>

  <simpara>
   如果要将一个变量强制转换为某类型，可以对其使用<link
   linkend="language.types.typecasting">强制转换</link>或者 <function>settype</function> 函数。
  </simpara>

  <simpara>
   注意变量根据其当时的类型在特定场合下会表现出不同的值。更多信息见<link
   linkend="language.types.type-juggling">类型转换的判别</link>。此外，还可以参考
   <link linkend="types.comparisons">PHP 类型比较表</link>看不同类型相互比较的例子。
  </simpara>
 </sect1>
 
 &language.types.boolean;
 &language.types.integer;
 &language.types.float;
 &language.types.string;
 &language.types.numeric-strings;
 &language.types.array;
 &language.types.iterable;
 &language.types.object;
 &language.types.enumerations;
 &language.types.resource;
 &language.types.null;
 &language.types.callable;
 &language.types.declarations;
 &language.types.type-juggling;
 
</chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
