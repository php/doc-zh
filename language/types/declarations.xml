<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: b57f8f256a4773fc09d19733c70ef8816074d12d Maintainer: avenger Status: ready -->
<sect1 xml:id="language.types.declarations">
 <title>类型声明</title>

 <para>
  类型声明可以用于函数的参数、返回值，PHP 7.4.0
  起还可以用于类的属性，来显性的指定需要的类型，如果预期类型在调用时不匹配，则会抛出一个
  <classname>TypeError</classname> 异常。
 </para>

 <!-- Find better place where to put this note -->
 <note>
  <!-- TODO Link to covariance section -->
  <para>
   当子类覆盖父方法时，子类的方法必须匹配父类的类型声明。如果父类没有定义返回类型，那么子方法可以指定自己的返回类型。
  </para>
 </note>

 <sect2 xml:id="language.types.declarations.base">
  <title>单一类型</title>
  <informaltable>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>&Type;</entry>
      <entry>&Description;</entry>
      <entry>&Version;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>类/接口 名称</entry>
      <entry>
        值必须为指定类和接口的实例化对象 &instanceof; 
      </entry>
      <entry/>
     </row>
     <row>
      <entry><type>self</type></entry>
      <entry>
      值必须是用于类型声明相同类的 &instanceof; 。
       仅可在类中使用。
      </entry>
      <entry/>
     </row>
     <row>
      <entry><type>parent</type></entry>
      <entry>
       值必须是用于类型声明父级类的 &instanceof; ，
       仅可在类中使用。
      </entry>
      <entry/>
     </row>
     <row>
      <entry><type>array</type></entry>
      <entry>
        值必须为 <type>array</type>。
      </entry>
      <entry/>
     </row>
     <row>
      <entry><type>callable</type></entry>
      <entry>
       值必定是一个有效的 <type>callable</type>。
       不能用于类属性的类型声明。
      </entry>
      <entry/>
     </row>
     <row>
      <entry><type>bool</type></entry>
      <entry>
        值必须为一个布尔值。
      </entry>
      <entry/>
     </row>
     <row>
      <entry><type>float</type></entry>
      <entry>
        值必须为一个浮点数字。
      </entry>
      <entry/>
     </row>
     <row>
      <entry><type>int</type></entry>
      <entry>
        值必须为一个整型数字。
      </entry>
      <entry/>
     </row>
     <row>
      <entry><type>string</type></entry>
      <entry>
        值必须为一个 <type>string</type>。
      </entry>
      <entry/>
     </row>
     <row>
      <entry><type>iterable</type></entry>
      <entry>
        值必须为 <type>array</type> 或 &instanceof; <classname>Traversable</classname>。
      </entry>
      <entry>PHP 7.1.0</entry>
     </row>
     <row>
      <entry><type>object</type></entry>
      <entry>
        值必须为<type>object</type>。
      </entry>
      <entry>PHP 7.2.0</entry>
     </row>
     <row>
      <entry><type>mixed</type></entry>
      <entry>
        值可以为任何类型。
      </entry>
      <entry>PHP 8.0.0</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>

  <warning>
   <para>
    不支持上述标量类型的别名。相反，它们被视为类或接口名。例如，使用
    <literal>boolean</literal> 作为类型声明，将要求值是一个 &instanceof; 类或接口
    <literal>boolean</literal>，而不能是类型
    <type>bool</type>。
   </para>
   <para>
    <example>
     <programlisting role="php">
<![CDATA[
<?php
    function test(boolean $param) {}
    test(true);
?>
]]>
     </programlisting>
     &example.outputs.8;
     <screen>
<![CDATA[
Warning: "boolean" will be interpreted as a class name. Did you mean "bool"? Write "\boolean" to suppress this warning in /in/9YrUX on line 2

Fatal error: Uncaught TypeError: test(): Argument #1 ($param) must be of type boolean, bool given, called in - on line 3 and defined in -:2
Stack trace:
#0 -(3): test(true)
#1 {main}
  thrown in - on line 2
]]>
     </screen>
    </example>
   </para>
  </warning>

  <sect3 xml:id="language.types.declarations.mixed">
  <title>mixed</title>

  <para>
   <type>mixed</type> 等同于 <link linkend="language.types.declarations.composite.union">联合类型</link>
   <type class="union">
    <type>object</type><type>resource</type><type>array</type><type>string</type>
    <type>int</type><type>float</type><type>bool</type><type>null</type>
   </type>。PHP 8.0.0 起可用。
  </para>
 </sect3>

  <sect3 xml:id="language.types.declarations.examples">
   &reftitle.examples;
   <example>
    <title>在类中使用类型声明</title>
    <programlisting role="php">
<![CDATA[
<?php
class C {}
class D extends C {}

// 它没有 extend C。
class E {}

function f(C $c) {
    echo get_class($c)."\n";
}

f(new C);
f(new D);
f(new E);
?>
]]>
    </programlisting>
    &example.outputs.8;
    <screen>
<![CDATA[
C
D

Fatal error: Uncaught TypeError: f(): Argument #1 ($c) must be of type C, E given, called in /in/gLonb on line 14 and defined in /in/gLonb:8
Stack trace:
#0 -(14): f(Object(E))
#1 {main}
  thrown in - on line 8
]]>
    </screen>
   </example>

   <example>
    <title>在接口中使用类型声明</title>
    <programlisting role="php">
<![CDATA[
<?php
interface I { public function f(); }
class C implements I { public function f() {} }

// 它没有 implement I。
class E {}

function f(I $i) {
    echo get_class($i)."\n";
}

f(new C);
f(new E);
?>
]]>
    </programlisting>
    &example.outputs.8;
    <screen>
<![CDATA[
C

Fatal error: Uncaught TypeError: f(): Argument #1 ($i) must be of type I, E given, called in - on line 13 and defined in -:8
Stack trace:
#0 -(13): f(Object(E))
#1 {main}
  thrown in - on line 8
]]>
    </screen>
   </example>

   <example>
    <title>返回类型声明</title>
    <programlisting role="php">
<![CDATA[
<?php
function sum($a, $b): float {
    return $a + $b;
}

// 注意必须返回一个 float。
var_dump(sum(1, 2));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
float(3)
]]>
    </screen>
   </example>

   <example>
    <title>返回一个对象</title>
    <programlisting role="php">
<![CDATA[
<?php
class C {}

function getC(): C {
    return new C;
}

var_dump(getC());
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(C)#1 (0) {
}
]]>
    </screen>
   </example>
  </sect3>
 </sect2>

 <sect2 xml:id="language.types.declarations.nullable">
  <title>允许为 null 的类型</title>

  <para>
    自 PHP 7.1.0 起，类型声明允许前置一个问号 (<literal>?</literal>)
    用来声明这个值允许为指定类型，或者为 &null;。
  </para>

  <para>
   <example>
    <title>声明可为 null 的参数类型</title>
    <programlisting role="php">
<![CDATA[
<?php
class C {}

function f(?C $c) {
    var_dump($c);
}

f(new C);
f(null);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(C)#1 (0) {
}
NULL
]]>
    </screen>
   </example>

   <example>
    <title>声明可为 null 的返回类型</title>
    <programlisting role="php">
<![CDATA[
<?php
function get_item(): ?string {
    if (isset($_GET['item'])) {
        return $_GET['item'];
    } else {
        return null;
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>

  <note>
   <para>
    可以通过设置参数的默认值为 <literal>null</literal>
    来实现允许为空的参数。不建议这样做，因为影响到类的继承调用。
   </para>
   <example>
    <title>旧版本中实现允许为空参数的示例</title>
    <programlisting role="php">
<![CDATA[
<?php
class C {}

function f(C $c = null) {
    var_dump($c);
}

f(new C);
f(null);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(C)#1 (0) {
}
NULL
]]>
    </screen>
   </example>
  </note>
 </sect2>

 <sect2 xml:id="language.types.declarations.composite">
  <title>复合类型</title>
  <para>
   还可以组合简单类型为复合类型。
   PHP 支持以下方式复合类型：
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     简单类型联合。PHP 8.0.0 起可用。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     class-type（接口、类名）类型交集。PHP 8.1.0 起可用。
    </simpara>
   </listitem>
  </itemizedlist>

  <caution>
   <simpara>
    无法复合交集类型与联合类型。
   </simpara>
  </caution>

  <sect3 xml:id="language.types.declarations.composite.union">
   <title>联合类型</title>
   <para>
     联合类型接受多个不同的简单类型做为参数。声明联合类型的语法为
     <literal>T1|T2|...</literal>。联合类型自 PHP 8.0.0 起可用。
   </para>

   <sect4 xml:id="language.types.declarations.composite.union.nullable">
    <title>允许为空的联合类型</title>
    <para>
     <literal>null</literal> 类型允许在联合类型中使用，例如
     <literal>T1|T2|null</literal> 代表接受一个空值为参数。已经存在的 <literal>?T</literal>
     语法可以视为以下联合类型的一个简写 <literal>T|null</literal>。
    </para>

    <caution>
     <simpara>
      <literal>null</literal> 不能作为一个独立的类型使用。
     </simpara>
    </caution>
   </sect4>

   <sect4 xml:id="language.types.declarations.composite.union.false">
    <title>false 伪类型</title>
    <para>
     通过联合类型支持字面类型（Literal Type）<literal>false</literal>，
     出于历史原因，很多内部函数在失败时返回了 <literal>false</literal> 而不是 <literal>null</literal>。
     这类函数的典型例子是 <function>strpos</function>。
    </para>

    <caution>
     <simpara>
      <literal>false</literal> 不能单独作为类型使用（包括可为 null 独立类型）。因此，不可以用
      <literal>false</literal>、<literal>false|null</literal>、<literal>?false</literal>。
     </simpara>
    </caution>
    <caution>
     <simpara>
      <literal>true</literal> 字面类型<emphasis>不存在</emphasis>。
     </simpara>
    </caution>
   </sect4>
  </sect3>

  <sect3 xml:id="language.types.declarations.composite.intersection">
   <title>交集类型</title>
   <para>
    只要能满足 class-type 的值，都可以在交集类型声明中使用，并且可使用多个值。
    交集类型用 <literal>T1&amp;T2&amp;...</literal> 这样的语法指定。
    交集类型从 PHP 8.1.0 可以使用。
   </para>
  </sect3>

  <sect3 xml:id="language.types.declarations.composite.redundant">
   <title>重复冗余的类型</title>
   <para>
    为了能捕获复合类型声明中的简单错误，不需要类加载检测到的冗余类型将导致编译时错误。包含：

    <itemizedlist>
     <listitem>
      <simpara>
       解析出来的类型只能出现一次。例如这样的类型 <literal>int|string|INT</literal> 或
       <literal>Countable&amp;Traversable&amp;COUNTABLE</literal> 会导致错误。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       使用 <type>mixed</type> 会导致错误。
      </simpara>
     </listitem>
     <listitem>
      <simpara>对于联合类型：</simpara>
      <itemizedlist>
       <listitem>
        <simpara>
         使用了 <type>bool</type> 时就不能再附带使用 <type>false</type>。
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         使用了 <type>object</type> 时就不能再附带使用 class 类型。
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         使用了 <type>iterable</type> 时，不能再附带使用 <type>array</type>
         和 <classname>Traversable</classname>。
        </simpara>
       </listitem>
      </itemizedlist>
     </listitem>
     <listitem>
      <simpara>对于交集类型：</simpara>
      <itemizedlist>
       <listitem>
        <simpara>
         使用 class-type 以外的类型会导致错误。
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         使用 <type>self</type>、<type>parent</type>
         或 <type>static</type> 都会导致错误。
        </simpara>
       </listitem>
      </itemizedlist>
     </listitem>
    </itemizedlist>
   </para>

   <note>
    <simpara>
     不过它不能确保类型最小化，因为要达到这样的效果，还要加载使用类型的 class。
    </simpara>
   </note>

   <para>
    例如，假设 <literal>A</literal> 和 <literal>B</literal> 都是一个类的别名，
    而 <literal>A|B</literal> 仍然是有效的，哪怕它可以被简化为
    <literal>A</literal> 或
    <literal>B</literal>。
    同样的，如果 <code>B extends A {}</code>，那 <literal>A|B</literal>
    仍然是有效的联合类型，尽管它可以被简化为
    <literal>A</literal>。

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo(): int|INT {} // 不允许
function foo(): bool|false {} // 不允许
function foo(): int&Traversable {} // 不允许
function foo(): self&Traversable {} // 不允许

use A as B;
function foo(): A|B {} // 不允许 ("use" 是名称解析的一部分)
function foo(): A&B {} // 不允许 ("use" 是名称解析的一部分)

class_alias('X', 'Y');
function foo(): X|Y {} // 允许 (运行时才能知道重复性)
function foo(): X&Y {} // 允许 (运行时才能知道重复性)
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="language.types.declarations.return-only">
  <title>仅仅返回类型</title>

  <sect3 xml:id="language.types.declarations.void">
   <title>void</title>
   <para>
    <literal>void</literal> 是一个返回类型，用于标识函数没有返回值。
    它不能是联合类型的一部分。
    PHP 7.1.0 起可用。
   </para>
   <note>
    <para>
     从 PHP 8.1.0 起弃用引用返回 <type>void</type> 的函数，
     因为这样的函数是矛盾的。
     之前，它在调用时已经发出如下 <constant>E_NOTICE</constant>：
     <literal>Only variable references should be returned by reference</literal>。

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function &test(): void {}
?>
]]>
      </programlisting>
     </informalexample>
    </para>
   </note>
  </sect3>

  <sect3 xml:id="language.types.declarations.never">
   <title>never</title>
   <para>
    <literal>never</literal> 是一种表示没有返回的返回类型。这意味着它可能是调用 <function>exit</function>，
    抛出异常或者是一个无限循环。所以，它不能作为联合类型的一部分。PHP 8.1.0 起可用。
   </para>
   <para>
    在类型理论用于中，<type>never</type> 是底层类型。
    意味着它是其它所有类型的子类型，并且可以在继承期间替换任何其他返回类型。
   </para>
  </sect3>

  <sect3 xml:id="language.types.declarations.static">
   <title>static</title>
   <para>
    它的值必须是一个 class 的 &instanceof;，该 class 是调用方法所在的同一个类。
    PHP 8.0.0 起有效。
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="language.types.declarations.strict">
  <title>严格类型</title>

  <para>
   默认如果可能，PHP 会强制转化不合适的类型为想要的标量类型。
   比如，参数想要 <type>string</type>，传入的是 <type>int</type>，
   则会获取 <type>string</type> 类型的变量。
  </para>

  <para>
   可以按文件开启严格模式。
   在严格模式下，只能接受完全匹配的类型，否则会抛出 <classname>TypeError</classname>。
   唯一的例外是 <type>int</type> 值也可以传入声明为 <type>float</type> 的类型。
  </para>

  <warning>
   <simpara>
    通过内部函数调用函数时，不会受 <literal>strict_types</literal> 声明影响。
   </simpara>
  </warning>

  <para>
   要开启严格模式，使用 &declare; 开启
   <literal>strict_types</literal>：
  </para>

  <note>
   <para>
    文件开启严格类型后的<emphasis>内部</emphasis>调用函数将应用严格类型，
    而不是在声明函数的文件内开启。
    如果文件没有声明开启严格类型，而被调用的函数所在文件有严格类型声明，
    那将遵循调用者的设置（开启类型强制转化），
    值也会强制转化。
   </para>
  </note>

  <note>
   <para>
    只有为标量类型的声明开启严格类型。
   </para>
  </note>

  <example>
   <title>参数值的严格类型</title>
   <programlisting role="php">
<![CDATA[
<?php
declare(strict_types=1);

function sum(int $a, int $b) {
    return $a + $b;
}

var_dump(sum(1, 2));
var_dump(sum(1.5, 2.5));
?>
]]>
   </programlisting>
   &example.outputs.8;
   <screen>
<![CDATA[
int(3)

Fatal error: Uncaught TypeError: sum(): Argument #1 ($a) must be of type int, float given, called in - on line 9 and defined in -:4
Stack trace:
#0 -(9): sum(1.5, 2.5)
#1 {main}
  thrown in - on line 4
]]>
   </screen>
  </example>

  <example>
   <title>参数值的类型强制转化</title>
   <programlisting role="php">
<![CDATA[
<?php
function sum(int $a, int $b) {
    return $a + $b;
}

var_dump(sum(1, 2));

// 以下会强制转化为整型，注意以下内容输出！
var_dump(sum(1.5, 2.5));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(3)
int(3)
]]>
   </screen>
  </example>

  <example>
   <title>返回值的严格类型</title>
   <programlisting role="php">
<![CDATA[
<?php
declare(strict_types=1);

function sum($a, $b): int {
    return $a + $b;
}

var_dump(sum(1, 2));
var_dump(sum(1, 2.5));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(3)

Fatal error: Uncaught TypeError: sum(): Return value must be of type int, float returned in -:5
Stack trace:
#0 -(9): sum(1, 2.5)
#1 {main}
  thrown in - on line 5
]]>
   </screen>
  </example>
 </sect2>

 <sect2 xml:id="language.types.declarations.union.coercive">
  <title>联合类型的内部隐式强制转化</title>
  <para>
   没有开启 <literal>strict_types</literal> 时，标量类型可能会限制内部隐式类型转化。
   如果值的类型不是联合类型中的一部分，则目标类型会按以下顺序：

   <orderedlist>
    <listitem>
     <simpara>
      <type>int</type>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <type>float</type>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <type>string</type>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <type>bool</type>
     </simpara>
    </listitem>
   </orderedlist>
   如果类型出现在组合中，值可以按 PHP 现有的类型语义检测进行内部隐式强制转化，则会选择该类型。
   否则会尝试下一个类型。
  </para>

  <caution>
   <para>
    有一个例外：当值是字符串，而 int 与 float 同时在组合中，将按现有的“数字字符串”检测语义，识别首选的类型。
    例如，<literal>"42"</literal> 会选择 <type>int</type> 类型，
    而 <literal>"42.0"</literal> 会选择 <type>float</type> 类型。
   </para>
  </caution>

  <note>
   <para>
    没有出现在上面列表中的类型则不是有效的内部隐式转化目标。
    尤其是不会出现内部隐式转化 <literal>null</literal> 和 <literal>false</literal> 类型。
   </para>
  </note>

  <example>
   <title>类型强制转换为联合类型的例子</title>
   <programlisting role="php">
<![CDATA[
<?php
// int|string
42    --> 42          // 类型完全匹配
"42"  --> "42"        // 类型完全匹配
new ObjectWithToString --> "__toString() 的结果"
                      // object 不兼容 int，降级到 string
42.0  --> 42          // float 与 int 兼容
42.1  --> 42          // float 与 int 兼容
1e100 --> "1.0E+100"  // float 比 int 大太多了，降级到 string
INF   --> "INF"       // float 比 int 大太多了，降级到 string
true  --> 1           // bool 与 int 兼容
[]    --> TypeError   // array 不兼容 int 或 string

// int|float|bool
"45"    --> 45        // int 的数字字符串
"45.0"  --> 45.0      // float 的数字字符串

"45X"   --> true      // 不是数字字符串，降级到 bool
""      --> false     // 不是数字字符串，降级到 bool
"X"     --> true      // 不是数字字符串，降级到 bool
[]      --> TypeError // array 不兼容 int、float、bool
?>
]]>
   </programlisting>
  </example>
 </sect2>

<!-- TODO figure out what do to with these things -->
 <sect2 xml:id="language.types.declarations.misc">
  <title>其他</title>
   <example>
    <title>传引用参数的类型</title>
    <simpara>
     仅仅会在函数入口检查传引用的参数类型，而不是在函数返回时检查。
     所以函数返回时，参数类型可能会发生变化。
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
function array_baz(array &$param)
{
    $param = 1;
}
$var = [];
array_baz($var);
var_dump($var);
array_baz($var);
?>
]]>
    </programlisting>
    &example.outputs.8;
    <screen>
<![CDATA[
int(1)

Fatal error: Uncaught TypeError: array_baz(): Argument #1 ($param) must be of type array, int given, called in - on line 9 and defined in -:2
Stack trace:
#0 -(9): array_baz(1)
#1 {main}
  thrown in - on line 2
]]>
    </screen>
   </example>

   <example>
    <title>捕获 <classname>TypeError</classname></title>
    <programlisting role="php">
<![CDATA[
<?php
declare(strict_types=1);

function sum(int $a, int $b) {
    return $a + $b;
}

try {
    var_dump(sum(1, 2));
    var_dump(sum(1.5, 2.5));
} catch (TypeError $e) {
    echo 'Error: ', $e->getMessage();
}
?>
]]>
    </programlisting>
    &example.outputs.8;
    <screen>
<![CDATA[
int(3)
Error: sum(): Argument #1 ($a) must be of type int, float given, called in - on line 10
]]>
    </screen>
   </example>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
