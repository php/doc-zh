<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author: eniac2008 -->
<!-- EN-Revision: c4de1a06045b84afa79ac0b6503fa4f60400359c Maintainer: Avenger Status: ready -->
<!-- CREDITS: Geogory, dallas, Altair -->
<sect1 xml:id="language.types.type-juggling">
 <title>类型转换的判别</title>

 <simpara>
  PHP 在变量定义中不需要（或不支持）明确的类型定义；变量类型是根据使用该变量的上下文所决定的。也就是说，如果把一个 <type>string</type> 值赋给变量
<varname>$var</varname>，<varname>$var</varname>
  就成了一个 <type>string</type>。如果又把一个<type>int</type> 赋给
  <varname>$var</varname>，那它就成了一个<type>int</type>。
 </simpara>

 <para>
  PHP 的自动类型转换的一个例子是乘法运算符“*”。如果任何一个操作数是<type>float</type>，
  则所有的操作数都被当成<type>float</type>，结果也是<type>float</type>。
  否则操作数会被解释为<type>int</type>，结果也是<type>int</type>。
  注意这并<emphasis>没有</emphasis>改变这些操作数本身的类型；
  改变的仅是这些操作数如何被求值以及表达式本身的类型。
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php
$foo = "1";  // $foo 是字符串 (ASCII 49)
$foo *= 2;   // $foo 现在是一个整数 (2)
$foo = $foo * 1.3;  // $foo 现在是一个浮点数 (2.6)
$foo = 5 * "10 Little Piggies"; // $foo 是整数 (50)
$foo = 5 * "10 Small Pigs";     // $foo 是整数 (50)
?>
]]>
<!-- bad example, no real operator (must be used with variable, modifies it too)
$foo++;      // $foo is the string "2" (ASCII 50)

TODO: explain ++/- - behaviour with strings

examples:

++'001' = '002'
++'abc' = 'abd'
++'xyz' = 'xza'
++'9.9' = '9.0'
++'-3'  = '-4'
- -'9'   = 8 (integer!)
- -'5.5' = '5.5'
- -'-9'  = -10 (integer)
- -'09'  = 8 (integer)
- -'abc' = 'abc'

-->
  </programlisting>
 </informalexample>

 <simpara>
  如果上面两个例子看上去古怪的话，参见如何将
  <link linkend="language.types.numeric-strings">数字字符串</link>转换为数值。
 </simpara>

 <simpara>
  如果要强制将一个变量当作某种类型来求值，参见<link
  linkend="language.types.typecasting">类型强制转换</link>一节。如果要改变一个变量的类型，参见 <function>settype</function>。
 </simpara>

 <para>
  如果想要测试本节中任何例子的话，可以用 <function>var_dump</function> 函数。
 </para>

 <note>
  <para>
   自动转换为 <type>数组</type> 的行为目前没有定义。
  </para>

  <para>
   此外，由于 PHP 支持使用和数组下标同样的语法访问字符串下标，以下例子在所有 PHP 版本中都有效：
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$a    = 'car'; // $a 是 string
$a[0] = 'b';   // $a 仍然是 string
echo $a;       // bar
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   请参阅<link linkend="language.types.string.substr">存取和修改字符串中的字符</link>一节以获取更多信息。
  </para>
 </note>

 <sect2 xml:id="language.types.typecasting">
  <title>类型强制转换</title>

  <para>
   PHP 中的类型强制转换和 C 中的非常像：在要转换的变量之前加上用括号括起来的目标类型。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$foo = 10;   // $foo is an integer
$bar = (boolean) $foo;   // $bar is a boolean
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   允许的强制转换有：
  </para>

  <itemizedlist>
   <listitem>
    <simpara>(int), (integer) - 转换为整形 <type>int</type></simpara>
   </listitem>
   <listitem>
    <simpara>(bool), (boolean) - 转换为布尔类型 <type>bool</type></simpara>
   </listitem>
   <listitem>
    <simpara>(float), (double), (real) - 转换为浮点型 <type>float</type></simpara>
   </listitem>
   <listitem>
    <simpara>(string) - 转换为字符串 <type>string</type></simpara>
   </listitem>
   <listitem>
    <simpara>(array) - 转换为数组 <type>array</type></simpara>
   </listitem>
   <listitem>
    <simpara>(object) - 转换为对象 <type>object</type></simpara>
   </listitem>
   <listitem>
    <simpara>(unset) - 转换为 <type>NULL</type></simpara>
   </listitem>
  </itemizedlist>

  <para>
   向前兼容 (binary) 转换和 b 前缀转换。注意 (binary)
   转换和 (string)
   基本相同，但是不应该依赖它。
  </para>

  <para>
   (unset) 转换在 PHP 7.2.0 中已被废弃。请注意 (unset)
   转换等于将值赋予 <type>NULL</type>。(unset)
   转换已经在 PHP 8.0.0 中被移除。
  </para>

  <para>
   注意在括号内允许有空格和制表符，所以下面两个例子功能相同：
  </para>
   
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$foo = (int) $bar;
$foo = ( int ) $bar;
?>
]]>
   </programlisting>

   <para>
    将字符串文字和变量转换为二进制字符串：
   </para>

   <programlisting role="php">
<![CDATA[
<?php
$binary = (binary)$string;
$binary = b"binary string";
?>
]]>
   </programlisting>
  </informalexample>

  <note>
   <para>
    可以将变量放置在双引号中的方式来代替将变量转换成字符串：
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$foo = 10;            // $foo 是一个整数
$str = "$foo";        // $str 是一个字符串
$fst = (string) $foo; // $fst 也是一个字符串

// 输出 "they are the same"
if ($fst === $str) {
    echo "they are the same";
}
?>
]]>
    </programlisting>
   </informalexample>
  </note>
   
  <para>
   有时在类型之间强制转换时确切地会发生什么可能不是很明显。更多信息见如下小节：
  </para>
  
  <itemizedlist>
   <listitem>
    <simpara>
     <link linkend="language.types.boolean.casting">转换为布尔型</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.integer.casting">转换为整型</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.float.casting">转换为浮点型</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.string.casting">转换为字符串</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.array.casting">转换为数组</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.object.casting">转换为对象</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.resource.casting">转换为资源</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.null.casting">转换为 NULL</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="types.comparisons">类型比较表</link>
    </simpara>
   </listitem>
  </itemizedlist>

 </sect2>
</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
