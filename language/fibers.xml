<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 4985eb0aa7bb240fa3bf7c17f76e1609faef327e Maintainer: Rytia Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<chapter xml:id="language.fibers" xmlns="http://docbook.org/ns/docbook">
 <title>纤程</title>

 <simplesect xml:id="language.fibers.overview">
  <title>纤程概述</title>
  <?phpdoc print-version-for="fiber"?>
  <para>
   纤程（Fiber）表示一组有完整栈、可中断的功能。
   纤程可以在调用堆栈中的任何位置被挂起，在纤程内暂停执行，直到稍后恢复。
  </para>
  <para>
   纤程可以暂停整个执行堆栈，所以该函数的直接调用者不需要改变调用这个函数的方式。
  </para>
  <para>
   你可以在调用堆栈的任意地方使用 <methodname>Fiber::suspend</methodname> 
   中断执行（也就是说，<methodname>Fiber::suspend</methodname> 
   的调用位置可以在一个深度嵌套的函数中，甚至可以不存在）。
  </para>
  <para>
   与无栈的 <classname>Generator</classname> 不同, 每一个
   <classname>Fiber</classname> 拥有自己的调用栈，并允许在一个深度前度的函数调用中将它们暂停。
   声明了中断（interruption）点的函数（即调用 <methodname>Fiber::suspend</methodname>）
   不需要改变自己的返回类型，不像使用 &yield; 一样需要返回一个
   <classname>Generator</classname> 实例。
  </para>
  <para>
   纤程可以在任意函数调用中被暂停，包括那些在 PHP VM 中被调用的函数。
   例如被用于 <function>array_map</function> 的函数或者提供
   <classname>Iterator</classname> 对象以被 &foreach; 调用的方法。
  </para>
  <para>
   纤程一旦被暂停，可以使用 <methodname>Fiber::resume</methodname> 
   传递任意值、或者使用 <methodname>Fiber::throw</methodname> 
   向纤程抛出一个异常以恢复运行。这个值或者异常将会在
   <methodname>Fiber::suspend</methodname> 中被返回（抛出）。
  </para>
  <note>
   <simpara>
    由于当前限制，不能在对象的析构函数中打开或关闭纤程。
   </simpara>
  </note>

  <example xml:id="language.fiber.example.basic"><!-- {{{ -->
   <title>基础用法</title>
   <programlisting role="php">
    <![CDATA[
<?php
$fiber = new Fiber(function (): void {
   $value = Fiber::suspend('fiber');
   echo "Value used to resume fiber: ", $value, PHP_EOL;
});

$value = $fiber->start();

echo "Value from fiber suspending: ", $value, PHP_EOL;

$fiber->resume('test');
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
    <![CDATA[
Value from fiber suspending: fiber
Value used to resume fiber: test
]]>
   </screen>
  </example><!-- }}} -->

 </simplesect>

</chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
