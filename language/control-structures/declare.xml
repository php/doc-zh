<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- Reviewed: yes Maintainer: dallas -->
<!-- EN-Revision: 17297101a4e423420de52d6ef389403bfbd3cf7f Maintainer: dallas Status: ready -->

<sect1 xml:id="control-structures.declare" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>declare</title>
 <?phpdoc print-version-for="declare"?>
 <para>
  <literal>declare</literal> 结构用来设定一段代码的执行指令。<literal>declare</literal>
  的语法和其它流程控制结构相似：
  <informalexample>
   <programlisting>
<![CDATA[
declare (directive)
    statement
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  <literal>directive</literal> 部分允许设定 <literal>declare</literal>
  代码段的行为。目前只认识三个指令：<literal>ticks</literal>（更多信息见下面
  <link linkend="control-structures.declare.ticks">ticks</link> 指令）、
  <literal>encoding</literal>（更多信息见下面 <link 
  linkend="control-structures.declare.encoding">encoding</link> 指令）、
 <literal>strict_types</literal> 指令 (更多信息见类型声明页面
     <link linkend="language.types.declarations.strict">严格类型</link>
   章节)。
 </para>
 <para>
     因为本指令是在文件编译时处理的，所以指令只接受字面量的值。
     无法使用变量和常量。下面为你演示：
    <informalexample>
        <programlisting role="php">
            <![CDATA[
<?php
// 这样是有效的：
declare(ticks=1);

// 这样是无效的：
const TICK_VALUE = 1;
declare(ticks=TICK_VALUE);
?>
]]>
        </programlisting>
    </informalexample>
 </para>
 <para>
  <literal>declare</literal> 代码段中的 <literal>statement</literal>
  部分将被执行——怎样执行以及执行中有什么副作用出现取决于
  <literal>directive</literal> 中设定的指令。
 </para>
 <para>
  <literal>declare</literal> 结构也可用于全局范围，影响到其后的所有代码（但如果有
  <literal>declare</literal> 结构的文件被其它文件包含，则对包含它的父文件不起作用）。
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// 两者相等：

// 可以这样用：
declare(ticks=1) {
    // 这里写完整的脚本
}

// 也可以这样用：
declare(ticks=1);
// 这里写完整的脚本
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 
 <sect2 xml:id="control-structures.declare.ticks">
  <title>Ticks</title>
  <para>
   Tick（时钟周期）是一个在 <literal>declare</literal> 代码段中解释器每执行
   <varname>N</varname> 条可计时的低级语句就会发生的事件。<varname>N</varname>
   的值是在 <literal>declare</literal> 中的 <literal>directive</literal> 部分用
   <code>ticks=<varname>N</varname></code> 来指定的。
  </para>
  <para>
   不是所有语句都可计时。通常条件表达式和参数表达式都不可计时。
  </para>
  <para>
   在每个 tick 中出现的事件是由 <function>register_tick_function</function>
   来指定的。更多细节见下面的例子。注意每个 tick 中可以出现多个事件。
  </para>
  <para>
   <example>
    <title>Tick 的用法示例</title>
    <programlisting role="php">
<![CDATA[
<?php

declare(ticks=1);

// 每次 tick 事件都会调用该函数
function tick_handler()
{
    echo "tick_handler() called\n";
}

register_tick_function('tick_handler'); // 引起 tick 事件

$a = 1; // 引起 tick 事件

if ($a > 0) {
    $a += 2; // 引起 tick 事件
    print($a); // 引起 tick 事件
}

?>
]]>
   </programlisting>
  </example>
  </para>
  <simpara>
   参见 <function>register_tick_function</function> 和
   <function>unregister_tick_function</function>。
  </simpara>
 </sect2>
 
 <sect2 xml:id="control-structures.declare.encoding">
  <title>Encoding</title>
  <para>
   可以用 <literal>encoding</literal> 指令来对每段脚本指定其编码方式。
   <example>
    <title>对脚本指定编码方式</title>
    <programlisting role="php">
<![CDATA[
<?php
declare(encoding='ISO-8859-1');
// 在这里写代码
?>
]]>
   </programlisting>
   </example>
  </para>
  
  <caution>
   <simpara>
    当和命名空间结合起来时 declare 的唯一合法语法是
    <literal>declare(encoding='...');</literal>，其中 <literal>...</literal>
    是编码的值。而 <literal>declare(encoding='...') {}</literal>
    将在与命名空间结合时产生解析错误。
   </simpara>
  </caution>
  <para>
   参见 <link linkend="ini.zend.script-encoding">zend.script_encoding</link>。
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
