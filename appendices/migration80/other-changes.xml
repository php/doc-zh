<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 4c41f6fa0ebe4afe8b7a3468e7e26dfd0c0e4131 Maintainer: avenger Status: partial -->
<!-- CREDITS: mowangjuanzi -->
<sect1 xml:id="migration80.other-changes" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>其他变更</title>

 <sect2 xml:id="migration80.other-changes.sapi">
  <title>SAPI 模块变更</title>

  <sect3 xml:id="migration80.other-changes.sapi.apache2handler">
   <title>Apache2Handler</title>

   <para>
    PHP 模块从 <literal>php7_module</literal> 重命名为
    <literal>php_module</literal>。
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration80.other-changes.functions">
  <title>函数变更</title>

  <sect3 xml:id="migration80.other-changes.functions.reflection">
   <title>Reflection</title>

   <para>
    可通过新参数 <parameter>filter</parameter> 来过滤 <methodname>ReflectionClass::getConstants</methodname> 和
    <methodname>ReflectionClass::getReflectionConstants</methodname> 的返回结果。
    新增三个常量，搭配使用：
   </para>
   <para>
    <simplelist>
     <member><constant>ReflectionClassConstant::IS_PUBLIC</constant></member>
     <member><constant>ReflectionClassConstant::IS_PROTECTED</constant></member>
     <member><constant>ReflectionClassConstant::IS_PRIVATE</constant></member>
    </simplelist>
   </para>
  </sect3>

  <sect3 xml:id="migration80.other-changes.functions.standard">
   <title>标准</title>

   <para>
    The math functions <function>abs</function>, <function>ceil</function>,
    <function>floor</function> and <function>round</function> now properly heed
    <link linkend="language.types.declarations.strict">the <literal>strict_types</literal> directive</link>.
    Previously, they coerced the first argument even in strict type mode.
   </para>
  </sect3>

  <sect3 xml:id="migration80.other-changes.functions.zip">
   <title>Zip</title>

   <itemizedlist>
    <listitem>
     <para>
      <methodname>ZipArchive::addGlob</methodname> 和
      <methodname>ZipArchive::addPattern</methodname> 方法中 
      <parameter>options</parameter> 数组参数可接受更多的值：
     </para>
     <para>
      <simplelist>
       <member><literal>flags</literal></member>
       <member><literal>comp_method</literal></member>
       <member><literal>comp_flags</literal></member>
       <member><literal>env_method</literal></member>
       <member><literal>enc_password</literal></member>
      </simplelist>
     </para>
    </listitem>
    <listitem>
     <para>
      <methodname>ZipArchive::addEmptyDir</methodname>、<methodname>ZipArchive::addFile</methodname>、
      <methodname>ZipArchive::addFromString</methodname>
      方法新增 <parameter>flags</parameter> 参数。
      
      可用于名称编码
      (<constant>ZipArchive::FL_ENC_*</constant>) 与条目（entry）替换
      (<constant>ZipArchive::FL_OVERWRITE</constant>)。
     </para>
    </listitem>
    <listitem>
     <para>
      <methodname>ZipArchive::extractTo</methodname> 现在会储存文件的修改时间。
     </para>
    </listitem>
   </itemizedlist>
  </sect3>
 </sect2>

 <sect2 xml:id="migration80.other-changes.extensions">
  <title>其他扩展变更</title>

  <sect3 xml:id="migration80.other-changes.extensions.curl">
   <title>CURL</title>

   <itemizedlist>
    <listitem>
     <para>
      现在 CURL 扩展要求 libcurl 版本至少为 7.29.0。
     </para>
    </listitem>
    <listitem>
     <para>
     移除了 <function>curl_version</function> 废弃的参数 <parameter>version</parameter>。
     </para>
    </listitem>
   </itemizedlist>
  </sect3>

  <sect3 xml:id="migration80.other-changes.extensions.date">
   <title>日期/时间</title>

   <para>
    现在 <classname>DatePeriod</classname> 实现（implements）了 <interfacename>IteratorAggregate</interfacename>
    (之前是 <interfacename>Traversable</interfacename>)。
   </para>
  </sect3>

  <sect3 xml:id="migration80.other-changes.extensions.dom">
   <title>DOM</title>

   <para>
    现在 <classname>DOMNamedNodeMap</classname> 与 <classname>DOMNodeList</classname> 实现（implements）了
    <interfacename>IteratorAggregate</interfacename> (之前是
    <interfacename>Traversable</interfacename>)。
   </para>
  </sect3>

  <sect3 xml:id="migration80.other-changes.extensions.intl">
   <title>国际化</title>

   <para>
    现在 <classname>IntlBreakIterator</classname> 与 <classname>ResourceBundle</classname> 实现（implements）了
    <interfacename>IteratorAggregate</interfacename> (之前是 <interfacename>Traversable</interfacename>)。
   </para>
  </sect3>

  <sect3 xml:id="migration80.other-changes.extensions.enchant">
   <title>Enchant</title>

   <para>
    现在环境允许时，enchant 会默认使用 libenchant-2。
    仍然支持 libenchant 1，但已经废弃，并将在未来移除。
   </para>
  </sect3>

  <sect3 xml:id="migration80.other-changes.extensions.gd">
   <title>GD</title>

   <itemizedlist>
    <listitem>
     <para>
      <function>imagepolygon</function>、
      <function>imageopenpolygon</function>、<function>imagefilledpolygon</function> 
      的参数 <parameter>num_points</parameter> 现在为可选参数。
      这些函数可用三或四个参数去调用。
      省略参数时，会按 <code>count($points)/2</code> 计算。
     </para>
    </listitem>
    <listitem>
     <para>
      新增函数 <function>imagegetinterpolation</function>，可获取当前的插值（interpolation）。
     </para>
    </listitem>
   </itemizedlist>
  </sect3>

  <sect3 xml:id="migration80.other-changes.extensions.json">
   <title>JSON</title>

   <para>
    现在无法禁用 JSON 扩展，将是任意 PHP 版本的内置功能，类似 date 扩展。
   </para>
  </sect3>

  <sect3 xml:id="migration80.other-changes.extensions.mbstring">
   <title>MBString</title>

   <para>
   更新 Unicode 数据表版本到 13.0.0。
   </para>
  </sect3>

  <sect3 xml:id="migration80.other-changes.extensions.pdo">
   <title>PDO</title>

   <para>
    现在 <classname>PDOStatement</classname> 实现（implements）了
    <interfacename>IteratorAggregate</interfacename> (之前是
    <interfacename>Traversable</interfacename>)。
   </para>
  </sect3>

  <sect3 xml:id="migration80.other-changes.extensions.libxml">
   <title>LibXML</title>

   <para>
    现在要求 libxml 最小版本为 2.9.0。
    这代表着确保了默认情况下禁用了外部实体加载（external entity loading）的功能。
    无需额外步骤即可防范 XML 外部实体注入攻击（XXE attacks）。
   </para>
  </sect3>

  <sect3 xml:id="migration80.other-changes.extensions.mysqli">
   <title>MySQLi / PDO MySQL</title>

   <itemizedlist>
    <listitem>
     <para>
     未使用 mysqlnd 时（也是默认且推荐的做法），
     支持的最小 libmysqlclient 版本为 5.5。
     </para>
    </listitem>
    <listitem>
     <para>
      现在 <classname>mysqli_result</classname> 实现（implements）了
      <interfacename>IteratorAggregate</interfacename> (之前是
      <interfacename>Traversable</interfacename>)。
     </para>
    </listitem>
   </itemizedlist>
  </sect3>

  <sect3 xml:id="migration80.other-changes.extensions.pgsql">
   <title>PGSQL / PDO PGSQL</title>

   <para>
    PGSQL 与 PDO PGSQL 扩展需要 libpq 的版本号至少为 9.1。
   </para>
  </sect3>

  <sect3 xml:id="migration80.other-changes.extensions.readline">
   <title>Readline</title>

   <para>
    在交互提示开始之前调用 <function>readline_completion_function</function>
    （例如在 <link linkend="ini.auto-prepend-file">auto_prepend_file</link> 中），
    将重写默认的交互输入补全函数。
    之前，只有交互提示（interactive prompt）开始后，
    <function>readline_completion_function</function> 才会运行。
   </para>
  </sect3>

  <sect3 xml:id="migration80.other-changes.extensions.simplexml">
   <title>SimpleXML</title>

   <para>
    现在 <classname>SimpleXMLElement</classname> 实现（implements）了
    <interfacename>RecursiveIterator</interfacename> 并吸收了
    <classname>SimpleXMLIterator</classname> 的功能。
    <classname>SimpleXMLIterator</classname> 是 
    <classname>SimpleXMLElement</classname> 的一个空扩展。
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration80.other-changes.ini">
  <title>INI 文件处理的变更</title>

  <itemizedlist>
   <listitem>
    <para>
     <!--<link linkend="ini.com.dotnet-version">-->com.dotnet_version<!--</link>-->
     是一个新的 INI 指令，用于选择 <classname>dotnet</classname> 对象的 .NET framework 版本。
    </para>
   </listitem>
   <listitem>
    <para>
     <!--<link linkend="ini.zend.exception-string-param-max-len">-->zend.exception_string_param_max_len<!--</link>-->
     是一个新的 INI 指令，用于设置字符串化的调用栈（stack strace）的最大字符串长度。
    </para>
   </listitem>
   </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.other-changes.ebcdic">
  <title>EBCDIC</title>

  <para>
   不再支持 EBCDIC targets，虽然它不太可能还在当初的地方继续运行。
  </para>
 </sect2>

 <sect2 xml:id="migration80.other-changes.performance">
  <title>性能</title>

  <itemizedlist>
   <listitem>
    <para>
     opcache 扩展新增了即时编译(JIT) 支持。
     <!-- https://wiki.php.net/rfc/jit -->
    </para>
   </listitem>
   <listitem>
    <para>
     <function>array_slice</function> 用于没有空隙的数组时，
     将不会扫描整个数组去查找开始的位移（offset）。
     在 offset 较大、长度较小时，会显著减少函数的运行时间。
    </para>
   </listitem>
   <listitem>
    <para>
     当本地化 <constant>LC_CTYPE</constant> 为 <literal>"C"</literal> 时（也是默认值），
     <function>strtolower</function> 会使用 SIMD 的实现。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
