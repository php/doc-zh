<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 3cbeb27388aa9e1f644971a92f5a606c70d3f1de Maintainer: avenger Status: partial -->
<!-- CREDITS: mowangjuanzi -->
<sect1 xml:id="migration80.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>新特性</title>

 <sect2 xml:id="migration80.new-features.core">
  <title>PHP 核心中的新特性</title>

  <sect3 xml:id="migration80.new-features.core.named-arguments">
   <title>命名参数</title>

   <para>
    <!-- RFC: https://wiki.php.net/rfc/named_params -->
    新增<link linkend="functions.named-arguments">命名参数</link>的功能。
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.attributes">
   <title>注解（Attributes）</title>

   <para>
    新增<link linkend="language.attributes">注解</link>的功能。
    <!-- RFC: https://wiki.php.net/rfc/attributes_v2 -->
    <!-- RFC: https://wiki.php.net/rfc/attribute_amendments -->
    <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax -->
    <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax_change -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.property-promotion">
   <title>构造器属性提升（Constructor Property Promotion）</title>

   <para>
    新增<link linkend="language.oop5.decon.constructor.promotion">构造器属性提升</link>功能
    在构造函数中声明类的属性）。
    <!-- RFC: https://wiki.php.net/rfc/constructor_promotion -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.union-types">
   <title>联合类型</title>

   <para>
    新增 <link linkend="language.types.declarations.composite.union">联合类型</link>。
    <!-- RFC: https://wiki.php.net/rfc/union_types_v2 -->
   </para> 
  </sect3>

  <sect3 xml:id="migration80.new-features.core.match">
   <title>Match 表达式</title>

   <para>
    新增 <link linkend="control-structures.match"><literal>match</literal> 表达式</link>。
    <!-- RFC: https://wiki.php.net/rfc/match_expression_v2 -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.nullsafe-operator">
   <title>Nullsafe 运算符</title>

   <para>
    新增<link linkend="language.oop5.basic.nullsafe">Nullsafe 运算符</link>(<literal>?-></literal>)。
    <!-- RFC: https://wiki.php.net/rfc/nullsafe_operator -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.others">
   <title>其他新特性</title>

   <itemizedlist>
    <listitem>
     <para>
      新增 <link linkend="class.weakmap">WeakMap</link> 类。
      <!-- RFC: https://wiki.php.net/rfc/weak_maps -->
     </para>
    </listitem>
    <listitem>
     <para>
      新增 <classname>ValueError</classname> 类。
     </para>
    </listitem>
    <listitem>
     <para>
      现在，只要类型兼容，任意数量的函数参数都可以用一个可变参数替换。
      例如允许编写下面的代码：
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
class A {
     public function method(int $many, string $parameters, $here) {}
}
class B extends A {
     public function method(...$everything) {}
}
?>
]]>
      </programlisting>
     </para>
    </listitem>
    <listitem>
     <para>
      <type>static</type> ("后期静态绑定"中) 可以作为返回类型：
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
class Test {
     public function create(): static {
          return new static();
     }
}
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/static_return_type -->
     </para>
    </listitem>
    <listitem>
     <para>
      现在可以通过 <code>$object::class</code> 获取类名，返回的结果和 <code>get_class($object)</code> 一致。
      <!-- RFC: https://wiki.php.net/rfc/class_name_literal_on_object -->
     </para>
    </listitem>
    <listitem>
     <para>
      &new;、&instanceof; 可用于任何表达式，
      用法为 <code>new (expression)(...$args)</code> 和 <code>$obj instanceof (expression)</code>。
      <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
     </para>
    </listitem>
    <listitem>
     <para>
      添加对一些变量语法一致性的修复，例如现在能够编写
      <code>Foo::BAR::$baz</code>。
      <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
     </para>
    </listitem>
    <listitem>
     <para>
      添加 <interfacename>Stringable</interfacename> interface，
      当一个类定义 <link linkend="object.tostring">__toString()</link> 方法后会自动实现该接口。
      <!-- RFC: https://wiki.php.net/rfc/stringable -->
     </para>
    </listitem>
    <listitem>
     <para>
      Trait 可以定义私有抽象方法（abstract private method）。
      类必须实现 trait 定义的该方法。
      <!-- RFC: https://wiki.php.net/rfc/abstract_trait_method_validation -->
     </para>
    </listitem>
    <listitem>
     <para>
      可作为表达式使用 <literal>throw</literal>。
      使得可以编写以下用法：
      <programlisting role="php">
<![CDATA[
<?php
$fn = fn() => throw new Exception('Exception in arrow function');
$user = $session->user ?? throw new Exception('Must have user');
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/throw_expression -->
     </para>
    </listitem>
    <listitem>
     <para>
      参数列表中的末尾逗号为可选。
      <programlisting role="php">
<![CDATA[
<?php
function functionWithLongSignature(
    Type1 $parameter1,
    Type2 $parameter2, // <-- 这个逗号也被允许了
) {
}
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/trailing_comma_in_parameter_list -->
     </para>
    </listitem>
    <listitem>
     <para>
     现在允许 <code>catch (Exception)</code> 一个 exception 而无需捕获到变量中。
      <!-- RFC: https://wiki.php.net/rfc/non-capturing_catches -->
     </para>
    </listitem>
    <listitem>
     <para>
      支持 <type>mixed</type> 类型。
      <!-- RFC: https://wiki.php.net/rfc/mixed_type_v2 -->
     </para>
    </listitem>
    <listitem>
     <para>
      父类中声明的私有方法不在对子类中的方法执行任何继承规则（final private 构造函数除外）。下列示例说明删除了那些限制：
      <programlisting role="php">
<![CDATA[
<?php
class ParentClass {
    private function method1() {}
    private function method2() {}
    private static function method3() {}
    // 抛出警告，因为“final”不再有效：
    private final function method4() {}
}
class ChildClass extends ParentClass {
    // 现在允许以下所有内容，即使修饰符与父类中的私有方法不同。
    public abstract function method1() {}
    public static function method2() {}
    public function method3() {}
    public function method4() {}
}
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/inheritance_private_methods -->
     </para>
    </listitem>
    <listitem>
     <para>
      新增 <function>get_resource_id</function>，返回值跟 <code>(int) $resource</code>
      相同。其在更清晰的 API 下提供了相同的功能。
     </para>
    </listitem>
    <listitem>
     <para>
      新增 <classname>InternalIterator</classname>。
     </para>
    </listitem>
   </itemizedlist>
  </sect3>
 </sect2>

 <sect2 xml:id="migration80.new-features.date">
  <title>日期和时间</title>
  
  <itemizedlist>
   <listitem>
    <para>
     新增 <methodname>DateTime::createFromInterface</methodname> 和
     <methodname>DateTimeImmutable::createFromInterface</methodname>。
    </para>
   </listitem>
   <listitem>
    <para>
     新增 DateTime 格式化标识符 <literal>p</literal>，跟 <literal>P</literal> 相同，但对于 UTC
     返回 <literal>Z</literal> 而不是 <literal>+00:00</literal>。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.dom">
  <title>DOM</title>

  <para>
   新增新遍历和操作 API：<interfacename>DOMParentNode</interfacename> 和
   <interfacename>DOMChildNode</interfacename>。
   <!-- RFC: https://wiki.php.net/rfc/dom_living_standard_api-->
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.filter">
  <title>Filter</title>

  <para>
   新增 <constant>FILTER_VALIDATE_BOOL</constant>，是 <constant>FILTER_VALIDATE_BOOLEAN</constant>
   的别名。首选新名称，因为其使用规范类型名称。
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.enchant">
  <title>Enchant</title>

  <para>
   新增 <function>enchant_dict_add</function>、<function>enchant_dict_is_added</function>
   和 <constant>LIBENCHANT_VERSION</constant>。
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.fpm">
  <title>FPM</title>

  <para>
   新增新选项 <literal>pm.status_listen</literal>，允许从不同的端点（例如端口或者 UDS
   文件）获取状态。这对于所有的子进程忙于处理长时间运行的请求时获取状态特别有用。
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.hash">
  <title>Hash</title>

  <para>
   <classname>HashContext</classname> 对象现在可序列化。
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.intl">
  <title>国际化函数</title>

  <para>
   新增 <constant>IntlDateFormatter::RELATIVE_FULL</constant>、<constant>IntlDateFormatter::RELATIVE_LONG</constant>、<constant>IntlDateFormatter::RELATIVE_MEDIUM</constant>
   和 <constant>IntlDateFormatter::RELATIVE_SHORT</constant> 常量。
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.ldap">
  <title>LDAP</title>

  <para>
   <function>ldap_count_references</function> has been added, which returns the number
   of reference messages in a search result.
  </para>
 </sect2>
 <sect2 xml:id="migration80.new-features.opcache">
  <title>OPcache</title>

  <para>
   If the <!--<link linkend="ini.opcache.record-warnings">-->opcache.record_warnings<!--</link>--> ini setting is
   enabled, OPcache will record compile-time warnings and replay them on the next include, even if
   it is served from cache.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.openssl">
  <title>OpenSSL</title>

  <para>
   Added Cryptographic Message Syntax (CMS) (<link xlink:href="&url.rfc;5652">RFC 5652</link>)
   support composed of functions for encryption, decryption, signing, verifying and reading. The API
   is similar to the API for PKCS #7 functions with an addition of new encoding constants:
   <constant>OPENSSL_ENCODING_DER</constant>, <constant>OPENSSL_ENCODING_SMIME</constant>
   and <constant>OPENSSL_ENCODING_PEM</constant>:
   <simplelist>
    <member>
     <function>openssl_cms_encrypt</function> encrypts the message in the file with the certificates
     and outputs the result to the supplied file.
    </member>
    <member>
     <function>openssl_cms_decrypt</function> that decrypts the S/MIME message in the file and outputs
     the results to the supplied file.
    </member>
    <member>
     <function>openssl_cms_read</function> that exports the CMS file to an array of PEM certificates.
    </member>
    <member>
     <function>openssl_cms_sign</function> that signs the MIME message in the file with a cert and key
     and output the result to the supplied file.
    </member>
    <member>
     <function>openssl_cms_verify</function> that verifies that the data block is intact, the signer
     is who they say they are, and returns the certs of the signers.
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.pcre">
  <title>正则表达式（兼容 Perl）</title>

  <para>
   新增 <function>preg_last_error_msg</function>，返回最后一条人可读的 PCRE
   错误消息。它是对 <function>preg_last_error</function> （返回整数枚举值）的补充。
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.reflection">
  <title>反射</title>

  <itemizedlist>
   <listitem>
    <para>
     下列方法现在返回内部函数参数默认值的相关信息：
    </para>
    <para>
     <simplelist>
      <member><methodname>ReflectionParameter::isDefaultValueAvailable</methodname></member>
      <member><methodname>ReflectionParameter::getDefaultValue</methodname></member>
      <member><methodname>ReflectionParameter::isDefaultValueConstant</methodname></member>
      <member><methodname>ReflectionParameter::getDefaultValueConstantName</methodname></member>
     </simplelist>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.sqlite3">
  <title>SQLite3</title>

  <para>
   <methodname>SQLite3::setAuthorizer</methodname> and respective class constants have been added
   to set a userland callback that will be used to authorize or not an action on the database.
   <!-- PR: https://github.com/php/php-src/pull/4797 -->
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.standard">
  <title>标准库</title>

  <itemizedlist>
   <listitem>
    <para>
     新增 <function>str_contains</function>、<function>str_starts_with</function> 和
     <function>str_ends_with</function>，分别检查 <parameter>haystack</parameter>
     是否包含 <parameter>needle</parameter> 或以 <parameter>needle</parameter> 开头/结尾。
     <!-- RFC: https://wiki.php.net/rfc/str_contains -->
     <!-- RFC: https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions -->
    </para>
   </listitem>
   <listitem>
    <para>
     <function>fdiv</function> has been added, which performs a floating-point division under IEEE 754 semantics.
     Division by zero is considered well-defined and will return one of <literal>Inf</literal>,
     <literal>-Inf</literal> or <literal>NaN</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>get_debug_type</function> has been added, which returns a type useful for error messages. Unlike
     <function>gettype</function>, it uses canonical type names, returns class names for objects, and
     indicates the resource type for resources.
     <!-- RFC: https://wiki.php.net/rfc/get_debug_type -->
    </para>
   </listitem>
   <listitem>
    <para>
     <function>printf</function> and friends now support the <literal>%h</literal> and
     <literal>%H</literal> format specifiers. These are the same as <literal>%g</literal> and
     <literal>%G</literal>, but always use <literal>"."</literal> as the decimal separator, rather
     than determining it through the <constant>LC_NUMERIC</constant> locale.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>printf</function> and friends now support using <literal>"*"</literal> as width or
     precision, in which case the width/precision is passed as an argument to printf. This also allows
     using precision <literal>-1</literal> with <literal>%g</literal>, <literal>%G</literal>,
     <literal>%h</literal> and <literal>%H</literal>. For example, the following code can be used to
     reproduce PHP's default floating point formatting:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
printf("%.*H", (int) ini_get("precision"), $float);
printf("%.*H", (int) ini_get("serialize_precision"), $float);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     <function>proc_open</function> now supports pseudo-terminal (PTY) descriptors. The following
     attaches <literal>stdin</literal>, <literal>stdout</literal> and <literal>stderr</literal> to the
     same PTY:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$proc = proc_open($command, [['pty'], ['pty'], ['pty']], $pipes);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     <function>proc_open</function> now supports socket pair descriptors. The following attaches a
     distinct socket pair to <literal>stdin</literal>, <literal>stdout</literal> and
     <literal>stderr</literal>:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$proc = proc_open($command, [['socket'], ['socket'], ['socket']], $pipes);
?>
]]>
     </programlisting>
    </para>
    <para>
     Unlike pipes, sockets do not suffer from blocking I/O issues on Windows. However, not all
     programs may work correctly with stdio sockets.
    </para>
   </listitem>
   <listitem>
    <para>
     排序函数现在已稳定，这意味着相等的元素比较将保留其原始顺序。
     <!-- RFC: https://wiki.php.net/rfc/stable_sorting -->
    </para>
   </listitem>
   <listitem>
    <para>
     <function>array_diff</function> 和 <function>array_intersect</function>
     及其变体现在可以接受单个数组作为参数。这意味着现在可以使用下列用法：
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
// 如果 $excludes 为空也可以：
array_diff($array, ...$excludes);
// 如果 $arrays 仅包含单个数组也可以：
array_intersect(...$arrays);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     <function>ob_implicit_flush</function> 的 <parameter>flag</parameter> 参数已经从接受 <type>int</type>
     变更为接受 <type>bool</type>。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.tokenizer">
  <title>Tokenizer</title>

  <para>
   <classname>PhpToken</classname> 为分词器（tokenizer）新增基于对象的接口。表现更为统一且符合人体工程学，同时内存效率更高、速度更快。
   <!--  RFC: https://wiki.php.net/rfc/token_as_object -->
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.zip">
  <title>Zip</title>

  <itemizedlist>
   <listitem>
    <para>
     Zip 扩展更新到版本 1.19.1。
    </para>
   </listitem>
   <listitem>
    <para>
     新的 <methodname>ZipArchive::setMtimeName</methodname> 和
     <methodname>ZipArchive::setMtimeIndex</methodname> 设置条目的修改时间。
    </para>
   </listitem>
   <listitem>
    <para>
     新的 <methodname>ZipArchive::registerProgressCallback</methodname> 提供在关闭归档期间更新。
    </para>
   </listitem>
   <listitem>
    <para>
     新的 <methodname>ZipArchive::registerCancelCallback</methodname> 允许在归档关闭期间取消。
    </para>
   </listitem>
   <listitem>
    <para>
     新的 <methodname>ZipArchive::replaceFile</methodname> 替换条目内容。
    </para>
   </listitem>
   <listitem>
    <para>
     新的 <methodname>ZipArchive::isCompressionMethodSupported</methodname> 检查可选的压缩功能。
    </para>
   </listitem>
   <listitem>
    <para>
     新的 <methodname>ZipArchive::isEncryptionMethodSupported</methodname> 检查可选的加密功能。
    </para>
   </listitem>
   <listitem>
    <para>
     新增 <varname>ZipArchive::lastId</varname> 属性，用于获取最后新增实体的索引值。
    </para>
   </listitem>
   <listitem>
    <para>
     现在使用 <varname>ZipArchive::status</varname> 和 <varname>ZipArchive::statusSys</varname>
     属性或者 <methodname>ZipArchive::getStatusString</methodname> 方法可以在归档关闭后检查错误。
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>ZipArchive::addGlob</methodname> 和 <methodname>ZipArchive::addPattern</methodname>
     的 <literal>'remove_path'</literal> 选项现在视为任意字符串前缀（为了跟 <literal>'add_path'</literal>
     选项保持一致），之前视为目录名称。
    </para>
   </listitem>
   <listitem>
    <para>
     可选的压缩/加密功能现在在 phpinfo 中列出。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
