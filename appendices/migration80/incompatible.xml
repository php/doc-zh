<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 05a2d4c535c375d64da54934238c28fc978c2884 Maintainer: avenger Status: partial -->
<!-- CREDITS: mowangjuanzi -->
<sect1 xml:id="migration80.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>不向后兼容的变更</title>

 <sect2 xml:id="migration80.incompatible.core">
  <title>PHP 核心中不向后兼容的变更</title>

  <sect3 xml:id="migration80.incompatible.core.string-number-comparision">
   <title>字符串与数字的比较</title>

   <para>
    数字与非数字形式的字符串之间的非严格比较现在将首先将数字转为字符串，然后比较这两个字符串。
    数字与数字形式的字符串之间的比较仍然像之前那样进行。
    请注意，这意味着 <code>0 == "not-a-number"</code> 现在将被认为是 false 。
    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Comparison</entry>
        <entry>Before</entry>
        <entry>After</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><code>0 == "0"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>0 == "0.0"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>0 == "foo"</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
       <row>
        <entry><code>0 == ""</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
       <row>
        <entry><code>42 == "   42"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>42 == "42foo"</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
    <!-- RFC: https://wiki.php.net/rfc/string_to_number_comparison -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.incompatible.core.other">
   <title>其它不向后兼容的变更</title>

   <itemizedlist>
    <listitem>
     <para>
      <literal>match</literal> 现在是一个保留字。
     </para>
    </listitem>
    <listitem>
     <para>
     断言（Assertion）失败现在默认抛出异常。如果想要改回之前的行为，可以在 INI 设置中设置
      <code>assert.exception=0</code> 。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>mixed</literal> 现在是保留字，所以不能用于类，接口或者
      trait，也禁止在命名空间中使用。
     </para>
    </listitem>
    <listitem>
     <para>
      与类名相同的方法名将不再被当做构造方法。应该使用<link linkend="object.construct">__construct()</link>
      来取代它。
     </para>
    </listitem>
    <listitem>
     <para>
      不再允许通过静态调用的方式去调用非静态方法。因此<function>is_callable</function>在检查一个类名与非静态方法
      时将返回失败（应当检查一个类的实例）。
     </para>
    </listitem>
    <listitem>
     <para>
     <code>(real)</code> 和 <code>(unset)</code> 转换已被移除。
     </para>
    </listitem>
    <listitem>
      <para>
       移除 <link linkend="ini.track-errors">track_errors</link> 执行。这意味着不能再用 <varname>php_errormsg</varname>。可以改用
       <function>error_get_last</function> 函数。
      </para>
    </listitem>
    <listitem>
     <para>
      移除定义不区分大小写的常量功能。<function>define</function> 的第三个参数可能不再为 &true;。
     </para>
    </listitem>
    <listitem>
     <para>
      移除使用 <function>__autoload</function> 函数指定自动加载器的功能。应该改用 <function>spl_autoload_register</function>。
     </para>
    </listitem>
    <listitem>
     <para>
      <parameter>errcontext</parameter> 参数将不再传递给使用 <function>set_error_handler</function> 设置的自定义错误处理程序。
     </para>
    </listitem>
    <listitem>
     <para>
      移除 <function>create_function</function>。应该改用匿名函数。
     </para>
    </listitem>
    <listitem>
     <para>
      移除 <function>each</function>。应该改用 &foreach; 或者 <classname>ArrayIterator</classname>。
     </para>
    </listitem>
    <listitem>
     <para>
      移除在方法中使用 <methodname>Closure::fromCallable</methodname> 或 <methodname>ReflectionMethod::getClosure</methodname>
      创建的匿名函数中解绑 <varname>this</varname> 的能力。
     </para>
    </listitem>
    <listitem>
     <para>
      The ability to unbind <varname>this</varname> from proper closures that contain uses of
      <varname>this</varname> has also been removed.
     </para>
    </listitem>
    <listitem>
     <para>
      移除对对象使用 <function>array_key_exists</function> 的能力。应该改用 <function>isset</function> 或 <function>property_exists</function>。
     </para>
    </listitem>
    <listitem>
     <para>
      <function>array_key_exists</function> 中 <parameter>key</parameter> 参数类型的行为已经和 <function>isset</function> 和正常数组访问一致。所有的
      key 类型现在使用通用的强制转换，数组/对象 key 会抛出 <classname>TypeError</classname>。
     </para>
    </listitem>
    <listitem>
     <para>
      任意一个数组，将数字 <replaceable>n</replaceable> 作为第一个数字 key，下一个隐式键将会是 <replaceable>n+1</replaceable>。即使
      <replaceable>n</replaceable> 为负数也是如此。
      <!-- RFC: https://wiki.php.net/rfc/negative_array_index -->
     </para>
    </listitem>
    <listitem>
     <para>
      error_reporting 默认级别现在是 <constant>E_ALL</constant>。之前排除 <constant>E_NOTICE</constant> 和 <constant>E_DEPRECATED</constant>。
     </para>
    </listitem>
    <listitem>
     <para>
      现在默认启用 <link linkend="ini.display-startup-errors">display_startup_errors</link>。
     </para>
    </listitem>
    <listitem>
     <para>
      在没有父级的类中使用 <type>parent</type> 将会导致 fatal compile-time 错误。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>@</literal> 操作将不再屏蔽 fatal 
      错误（<constant>E_ERROR</constant>、<constant>E_CORE_ERROR</constant>、<constant>E_COMPILE_ERROR</constant>、<constant>E_USER_ERROR</constant>、<constant>E_RECOVERABLE_ERROR</constant>、<constant>E_PARSE</constant>）。当使用
      <literal>@</literal> 时，接受 error_reporting 为 <literal>0</literal> 的错误处理程序，应该调整为使用位掩码检查：
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// 之前
function my_error_handler($err_no, $err_msg, $filename, $linenum) {
    if (error_reporting() == 0) {
        return false;
    }
    // ...
}

// 现在
function my_error_handler($err_no, $err_msg, $filename, $linenum) {
    if (!(error_reporting() & $err_no)) {
        return false;
    }
    // ...
}
?>
]]>
      </programlisting>
     </para>
     <para>
      此外，应注意在生产环境中不显示错误消息，这可能会导致信息泄露。确保 <code>display_errors=Off</code> 与错误记录一起使用。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>#[</literal> 不再解释为注释的开头，因为此语法现在用于注解。
      <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax_change -->
     </para>
    </listitem>
    <listitem>
     <para>
      由于不兼容的方法签名（违反 LSP）导致的继承错误现在将始终生成致命错误。以前在某些情况下会生成警告。
      <!-- RFC: https://wiki.php.net/rfc/lsp_errors -->
     </para>
    </listitem>
    <listitem>
     <para>
      相对于位移、加法还有减法，连接运算符的优先级已经更改。
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
echo "Sum: " . $a + $b;
// 之前解释为：
echo ("Sum: " . $a) + $b;
// 现在解释为：
echo "Sum:" . ($a + $b);
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/concatenation_precedence -->
     </para>
    </listitem>
    <listitem>
     <para>
      在运行时默认值解析为 &null; 的参数，将不在默默将参数类型标记为可为 null。必须改用指定可为 null 类型或者默认值为 &null;。
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// 之前：
function test(int $arg = CONST_RESOLVING_TO_NULL) {}
// 之后：
function test(?int $arg = CONST_RESOLVING_TO_NULL) {}
// 或者是
function test(int $arg = null) {}
?>
]]>
      </programlisting>
     </para>
    </listitem>
    <listitem>
     <para>
      一些警告已转换为 <classname>Error</classname> 异常：
     </para>
     <para>
      <simplelist>
       <member>
        尝试向非对象写入属性。之前会默默的为 null、false 和空字符串创建 stdClass 对象。
       </member>
       <member>
        尝试追加元素到已使用 PHP_INT_MAX 作为 key 的数组。
       </member>
       <member>
        尝试使用无效类型（array 或 object）作为数组的 key 或者字符串的 offset。
       </member>
       <member>尝试向标量值写入数组索引。</member>
       <member>尝试解包非数组或 Traversable。</member>
       <member>
        尝试访问未定义的常量，之前，访问未定义的常量将会导致警告并解释为字符串。
       </member>
      </simplelist>
     </para>
     <para>
      一些通知已转换为警告：
     </para>
     <para>
      <simplelist>
       <member>尝试读取未定义的变量。</member>
       <member>尝试读取未定义的属性。</member>
       <member>尝试读取未定义的数组 key。</member>
       <member>尝试读取非对象的属性。</member>
       <member>尝试读取非数组的数组索引。</member>
       <member>尝试转换数组为字符串。</member>
       <member>尝试使用资源作为数组 key。</member>
       <member>尝试使用 null、bool、float 作为字符串 offset。</member>
       <member>尝试读取越界的字符串 offset。</member>
       <member>尝试将空字符串分配给字符串 offset。</member>
      </simplelist>
      <!-- RFC: https://wiki.php.net/rfc/engine_warnings -->
     </para>
    </listitem>
    <listitem>
     <para>
      尝试将多字节字符串分配给字符串 offset 现在将发出警告。
     </para>
    </listitem>
    <listitem>
     <para>
      源文件中的异常字符（比如字符串边界外的 NUL 字节）现在将导致 <classname>ParseError</classname> 异常而不是编译警告。
     </para>
    </listitem>
    <listitem>
     <para>
      未捕获异常现在会经过“clean shutdown”，这意味着未捕获的异常之后调用析构方法。
     </para>
    </listitem>
    <listitem>
     <para>
      编译时 fatal error“Only variables can be passed by reference”已延迟到运行时，并转换为“Argument cannot be passed by reference”<classname>Error</classname>异常。
     </para>
    </listitem>
    <listitem>
     <para>
      一些“Only variables should be passed by reference”通知已转换为“Argument
      cannot be passed by reference”异常。
     </para>
    </listitem>
    <listitem>
     <para>
      The generated name for anonymous classes has changed. It will now include the name of the first
      parent or interface:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
new class extends ParentClass {};
// -> ParentClass@anonymous
new class implements FirstInterface, SecondInterface {};
// -> FirstInterface@anonymous
new class {};
// -> class@anonymous
?>
]]>
      </programlisting>
     </para>
     <para>
      The name shown above is still followed by a NUL byte and a unique suffix.
     </para>
    </listitem>
    <listitem>
     <para>
      Non-absolute trait method references in trait alias adaptations are now required to be
      unambiguous:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
class X {
    use T1, T2 {
        func as otherFunc;
    }
    function func() {}
}
?>
]]>
      </programlisting>
     </para>
     <para>
      If both <code>T1::func()</code> and <code>T2::func()</code> exist, this code was previously
      silently accepted, and func was assumed to refer to <code>T1::func</code>. Now it will generate a
      fatal error instead, and either <code>T1::func</code> or <code>T2::func</code> needs to be
      written explicitly.
     </para>
    </listitem>
    <listitem>
     <para>
      The signature of abstract methods defined in traits is now checked against the implementing class
      method:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
trait MyTrait {
    abstract private function neededByTrait(): string;
}

class MyClass {
    use MyTrait;

    // Error, because of return type mismatch.
    private function neededByTrait(): int { return 42; }
}
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/abstract_trait_method_validation -->
     </para>
    </listitem>
    <listitem>
     <para>
      Disabled functions are now treated exactly like non-existent functions. Calling a disabled
      function will report it as unknown, and redefining a disabled function is now possible.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>data://</literal> stream wrappers are no longer writable, which matches the documented
      behavior.
     </para>
    </listitem>
    <listitem>
     <para>
      The arithmetic and bitwise operators <literal>+</literal>, <literal>-</literal>,
      <literal>*</literal>, <literal>/</literal>, <literal>**</literal>, <literal>%</literal>,
      <literal>&lt;&lt;</literal>, <literal>&gt;&gt;</literal>, <literal>&amp;</literal>,
      <literal>|</literal>, <literal>^</literal>, <literal>~</literal>, <literal>++</literal>,
      <literal>--</literal> will now consistently throw a <classname>TypeError</classname> when one of
      the operands is an &array;, &resource; or non-overloaded &object;. The only exception to this is
      the array <literal>+</literal> array merge operation, which remains supported.
      <!-- RFC: https://wiki.php.net/rfc/arithmetic_operator_type_checks -->
     </para>
    </listitem>
    <listitem>
     <para>
      Float to string casting will now always behave locale-independently.
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
setlocale(LC_ALL, "de_DE");
$f = 3.14;
echo $f, "\n";
// Previously: 3,14
// Now:        3.14
?>
]]>
      </programlisting>
     </para>
     <para>
      See <function>printf</function>, <function>number_format</function> and
      <methodname>NumberFormatter</methodname> for ways to customize number formatting.
      <!-- RFC: https://wiki.php.net/rfc/locale_independent_float_to_string -->
     </para>
    </listitem>
    <listitem>
     <para>
      Support for deprecated curly braces for offset access has been removed.
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// Instead of:
$array{0};
$array{"key"};
// Write:
$array[0];
$array["key"];
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/deprecate_curly_braces_array_access -->
     </para>
    </listitem>
    <listitem>
     <para>
      Applying the final modifier on a private method will now produce a warning unless that method is
      the constructor.
      <!-- FC: https://wiki.php.net/rfc/inheritance_private_methods -->
     </para>
    </listitem>
    <listitem>
     <para>
      If an object constructor <function>exit</function>s, the object destructor will no longer be
      called. This matches the behavior when the constructor throws.
     </para>
    </listitem>
    <listitem>
     <para>
      Namespaced names can no longer contain whitespace: While <code>Foo\Bar</code> will be recognized
      as a namespaced name, <code>Foo \ Bar</code> will not. Conversely, reserved keywords are now
      permitted as namespace segments, which may also change the interpretation of code:
      <code>new\x</code> is now the same as <code>constant('new\x')</code>, not
      <code>new \x()</code>.
      <!-- RFC: https://wiki.php.net/rfc/namespaced_names_as_token -->
     </para>
    </listitem>
    <listitem>
     <para>
      Nested ternaries now require explicit parentheses.
      <!-- RFC: https://wiki.php.net/rfc/ternary_associativity -->
     </para>
    </listitem>
    <listitem>
     <para>
      <function>debug_backtrace</function> and <methodname>Exception::getTrace</methodname> will no
      longer provide references to arguments. It will not be possible to change function arguments
      through the backtrace.
     </para>
    </listitem>
    <listitem>
     <para>
      Numeric string handling has been altered to be more intuitive and less error-prone. Trailing
      whitespace is now allowed in numeric strings for consistency with how leading whitespace is
      treated. This mostly affects:
     </para>
     <para>
      <simplelist>
       <member>The <function>is_numeric</function> function</member>
       <member>String-to-string comparisons</member>
       <member>Type declarations</member>
       <member>Increment and decrement operations</member>
      </simplelist>
     </para>
     <para>
      The concept of a "leading-numeric string" has been mostly dropped; the cases where this remains
      exist in order to ease migration. Strings which emitted an <constant>E_NOTICE</constant> "A non
      well-formed numeric value encountered" will now emit an <constant>E_WARNING</constant> "A
      non-numeric value encountered" and all strings which emitted an <constant>E_WARNING</constant> "A
      non-numeric value encountered" will now throw a
      <classname>TypeError</classname>. This mostly affects:
     </para>
     <para>
      <simplelist>
       <member>Arithmetic operations</member>
       <member>Bitwise operations</member>
      </simplelist>
     </para>
     <para>
      This <constant>E_WARNING</constant> to <classname>TypeError</classname> change also affects the
      <constant>E_WARNING</constant> "Illegal string offset 'string'" for illegal string offsets. The
      behavior of explicit casts to int/float from strings has not been changed.
      <!-- RFC: https://wiki.php.net/rfc/saner-numeric-strings -->
     </para>
    </listitem>
    <listitem>
     <para>
      Magic Methods will now have their arguments and return types checked if they have them declared.
      The signatures should match the following list:
     </para>
     <para>
      <simplelist>
       <member><code>__call(string $name, array $arguments): mixed</code></member>
       <member><code>__callStatic(string $name, array $arguments): mixed</code></member>
       <member><code>__clone(): void</code></member>
       <member><code>__debugInfo(): ?array</code></member>
       <member><code>__get(string $name): mixed</code></member>
       <member><code>__invoke(mixed $arguments): mixed</code></member>
       <member><code>__isset(string $name): bool</code></member>
       <member><code>__serialize(): array</code></member>
       <member><code>__set(string $name, mixed $value): void</code></member>
       <member><code>__set_state(array $properties): object</code></member>
       <member><code>__sleep(): array</code></member>
       <member><code>__unserialize(array $data): void</code></member>
       <member><code>__unset(string $name): void</code></member>
       <member><code>__wakeup(): void</code></member>
      </simplelist>
      <!-- RFC: https://wiki.php.net/rfc/magic-methods-signature -->
     </para>
    </listitem>
    <listitem>
     <para>
      <function>call_user_func_array</function> array keys will now be interpreted as parameter names,
      instead of being silently ignored.
     </para>
    </listitem>
    <listitem>
     <para>
      Declaring a function called <literal>assert()</literal> inside a namespace is
      no longer allowed, and issues <constant>E_COMPILE_ERROR</constant>.
      The <function>assert</function> function is subject to special handling by the engine,
      which may lead to inconsistent behavior when defining a namespaced function with the same name.
     </para>
    </listitem>
   </itemizedlist>
  </sect3>
 </sect2>

 <sect2 xml:id="migration80.incompatible.resource2object">
  <title>Resource to Object Migration</title>

  <para>
   Several &resource;s have been migrated to &object;s.
   Return value checks using <function>is_resource</function> should be replaced with checks for &false;.
  </para>
  <itemizedlist>
    <listitem>
     <para>
      <function>curl_init</function> will now return a <classname>CurlHandle</classname> object rather
      than a &resource;. The <function>curl_close</function> function no longer has an effect,
      instead the <classname>CurlHandle</classname> instance is automatically destroyed if it is no
      longer referenced.
     </para>
    </listitem>
    <listitem>
     <para>
      <function>curl_multi_init</function> will now return a <classname>CurlMultiHandle</classname>
      object rather than a &resource;. The <function>curl_multi_close</function> function no
      longer has an effect, instead the <classname>CurlMultiHandle</classname> instance is
      automatically destroyed if it is no longer referenced.
     </para>
    </listitem>
    <listitem>
     <para>
      <function>curl_share_init</function> will now return a <classname>CurlShareHandle</classname>
      object rather than a &resource;. The <function>curl_share_close</function> function no
      longer has an effect, instead the <classname>CurlShareHandle</classname> instance is
      automatically destroyed if it is no longer referenced.
     </para>
    </listitem>
   <listitem>
    <para>
     <function>enchant_broker_init</function> will now return an <classname>EnchantBroker</classname>
     object rather than a &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>enchant_broker_request_dict</function> and
     <function>enchant_broker_request_pwl_dict</function> will now return an
     <classname>EnchantDictionary</classname> object rather than a &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     The GD extension now uses <classname>GdImage</classname> objects as the underlying data structure
     for images, rather than &resource;s.
     The <function>imagedestroy</function> function no longer has an effect; instead the
     <classname>GdImage</classname> instance is automatically destroyed if it is no longer referenced.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_x509_read</function> and <function>openssl_csr_sign</function> will now return
     an <classname>OpenSSLCertificate</classname> object rather than a &resource;.
     The <function>openssl_x509_free</function> function is deprecated and no longer has an effect,
     instead the <classname>OpenSSLCertificate</classname> instance is automatically destroyed if it
     is no longer referenced.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_csr_new</function> will now return an
     <classname>OpenSSLCertificateSigningRequest</classname> object rather than a &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_pkey_new</function> will now return an
     <classname>OpenSSLAsymmetricKey</classname> object rather than a &resource;.
     The <function>openssl_pkey_free</function> function is deprecated and no longer has an effect,
     instead the <classname>OpenSSLAsymmetricKey</classname> instance is automatically destroyed if it
     is no longer referenced.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>shmop_open</function> 现在将返回 <classname>Shmop</classname> 对象而不是
     &resource;。<function>shmop_close</function> 函数将不再有效，已弃用；如果不在引用 
     <classname>Shmop</classname> 实例，其将会自动销毁。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>socket_create</function>, <function>socket_create_listen</function>,
     <function>socket_accept</function>, <function>socket_import_stream</function>,
     <function>socket_addrinfo_connect</function>, <function>socket_addrinfo_bind</function>, and
     <function>socket_wsaprotocol_info_import</function> will now return a
     <classname>Socket</classname> object rather than a &resource;.
     <function>socket_addrinfo_lookup</function> will now return an array of
     <classname>AddressInfo</classname> objects rather than &resource;s.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>msg_get_queue</function> will now return an <classname>SysvMessageQueue</classname>
     object rather than a &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>sem_get</function> will now return an <classname>SysvSemaphore</classname> object
     rather than a &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>shm_attach</function> will now return an <classname>SysvSharedMemory</classname> object
     rather than a &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>xml_parser_create</function> and <function>xml_parser_create_ns</function> will now
     return an <classname>XMLParser</classname> object rather than a &resource;. The
     <function>xml_parser_free</function> function no longer has an effect, instead the XmlParser
     instance is automatically destroyed if it is no longer referenced.
    </para>
   </listitem>
   <listitem>
    <para>
     The <link linkend="book.xmlwriter">XMLWriter</link> functions now accept and return, respectively,
     <classname>XMLWriter</classname> objects instead of &resource;s.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>inflate_init</function> will now return an <classname>InflateContext</classname> object
     rather than a &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>deflate_init</function> will now return a <classname>DeflateContext</classname> object
     rather than a &resource;.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.com">
  <title>COM and .Net (Windows)</title>

  <para>
   The ability to import case-insensitive constants from type libraries has been removed.
   The second argument to <function>com_load_typelib</function> may no longer be false;
   <link linkend="ini.com.autoregister-casesensitive">com.autoregister_casesensitive</link>
   may no longer be disabled; case-insensitive markers in
   <link linkend="ini.com.typelib-file">com.typelib_file</link> are ignored.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.curl">
  <title>CURL</title>

  <para>
   <constant>CURLOPT_POSTFIELDS</constant> no longer accepts objects as arrays. To
   interpret an object as an array, perform an explicit <code>(array)</code> cast. The
   same applies to other options accepting arrays as well.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.datetime">
  <title>Date and Time</title>

  <para>
   <function>mktime</function> and <function>gmmktime</function> now require at least one
   argument. <function>time</function> can be used to get the current timestamp.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.dom">
  <title>DOM</title>

  <para>
   Unimplemented classes from the DOM extension that had no behavior and contained test
   data have been removed. These classes have also been removed in the latest version of
   the DOM standard:
  </para>
  <para>
   <simplelist>
    <member><classname>DOMNameList</classname></member>
    <member><classname>DomImplementationList</classname></member>
    <member><classname>DOMConfiguration</classname></member>
    <member><classname>DomError</classname></member>
    <member><classname>DomErrorHandler</classname></member>
    <member><classname>DOMImplementationSource</classname></member>
    <member><classname>DOMLocator</classname></member>
    <member><classname>DOMUserDataHandler</classname></member>
    <member><classname>DOMTypeInfo</classname></member>
    <member><classname>DOMStringExtend</classname></member>
   </simplelist>
  </para>
  <para>
   DOM 扩展中没有实现行为的方法已被删除：
  </para>
  <para>
   <simplelist>
    <member><methodname>DOMNamedNodeMap::setNamedItem</methodname></member>
    <member><methodname>DOMNamedNodeMap::removeNamedItem</methodname></member>
    <member><methodname>DOMNamedNodeMap::setNamedItemNS</methodname></member>
    <member><methodname>DOMNamedNodeMap::removeNamedItemNS</methodname></member>
    <member><methodname>DOMText::replaceWholeText</methodname></member>
    <member><methodname>DOMNode::compareDocumentPosition</methodname></member>
    <member><methodname>DOMNode::isEqualNode</methodname></member>
    <member><methodname>DOMNode::getFeature</methodname></member>
    <member><methodname>DOMNode::setUserData</methodname></member>
    <member><methodname>DOMNode::getUserData</methodname></member>
    <member><methodname>DOMDocument::renameNode</methodname></member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.enchant">
  <title>Enchant</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>enchant_broker_list_dicts</function>, <function>enchant_broker_describe</function> and
     <function>enchant_dict_suggest</function> will now return an empty array instead of &null;.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.exif">
  <title>Exif</title>

  <para>
   <function>read_exif_data</function> has been removed; <function>exif_read_data</function>
   should be used instead.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.filter">
  <title>Filter</title>

  <itemizedlist>
   <listitem>
    <para>
     The <constant>FILTER_FLAG_SCHEME_REQUIRED</constant> and
     <constant>FILTER_FLAG_HOST_REQUIRED</constant> flags for the
     <constant>FILTER_VALIDATE_URL</constant> filter have been removed. The <literal>scheme</literal>
     and <literal>host</literal> are (and have been) always required.
    </para>
   </listitem>
   <listitem>
    <para>
     The <constant>INPUT_REQUEST</constant> and <constant>INPUT_SESSION</constant> source for
     <function>filter_input</function> etc. have been removed. These were never implemented and their
     use always generated a warning.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.gd">
  <title>GD</title>

  <itemizedlist>
   <listitem>
    <para>
     移除弃用函数 <function>image2wbmp</function>。
     <!-- RFC: https://wiki.php.net/rfc/image2wbmp -->
    </para>
   </listitem>
   <listitem>
    <para>
     移除弃用函数 <function>png2wbmp</function> 和 <function>jpeg2wbmp</function>。
     <!-- RFC: https://wiki.php.net/rfc/deprecate-png-jpeg-2wbmp -->
    </para>
   </listitem>
   <listitem>
    <para>
     The default <parameter>mode</parameter> parameter of <function>imagecropauto</function> no longer
     accepts <literal>-1</literal>. <constant>IMG_CROP_DEFAULT</constant> should be used instead.
    </para>
   </listitem>
   <listitem>
    <para>
     On Windows, <filename>php_gd2.dll</filename> has been renamed to <filename>php_gd.dll</filename>.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.gmp">
  <title>GMP</title>

  <para>
   <function>gmp_random</function> has been removed. One of <function>gmp_random_range</function> or
   <function>gmp_random_bits</function> should be used instead.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.iconv">
  <title>Iconv</title>

  <para>
   iconv implementations which do not properly set <varname>errno</varname> in case of errors are no
   longer supported.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.imap">
  <title>IMAP</title>

  <itemizedlist>
   <listitem>
    <para>
     The unused <parameter>default_host</parameter> argument of <function>imap_headerinfo</function>
     has been removed.
    </para>
   </listitem>
   <listitem>
    <para>
     The <function>imap_header</function> function which is an alias of
     <function>imap_headerinfo</function> has been removed.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.intl">
  <title>Internationalization Functions</title>

  <itemizedlist>
   <listitem>
    <para>
     The deprecated constant <constant>INTL_IDNA_VARIANT_2003</constant> has been removed.
     <!-- RFC: https://wiki.php.net/rfc/deprecate-and-remove-intl_idna_variant_2003 -->
    </para>
   </listitem>
   <listitem>
    <para>
     移除弃用常量 <constant>Normalizer::NONE</constant>。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.ldap">
  <title>LDAP</title>

  <itemizedlist>
   <listitem>
    <para>
     移除弃用函数 <function>ldap_sort</function>、<function>ldap_control_paged_result</function>
     和 <function>ldap_control_paged_result_response</function>。
    </para>
   </listitem>
   <listitem>
    <para>
     <function>ldap_set_rebind_proc</function> 的接口已修改；<parameter>callback</parameter>
     不再接受空字符串；应该使用 &null; 代替。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.mbstring">
  <title>MBString</title>

  <itemizedlist>
   <listitem>
    <para>
     The <link linkend="ini.mbstring.func-overload">mbstring.func_overload</link> directive has been
     removed. The related <constant>MB_OVERLOAD_MAIL</constant>,
     <constant>MB_OVERLOAD_STRING</constant>, and <constant>MB_OVERLOAD_REGEX</constant> constants
     have also been removed. Finally, the <literal>"func_overload"</literal> and
     <literal>"func_overload_list"</literal> entries in <function>mb_get_info</function> have been
     removed.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_parse_str</function> can no longer be used without specifying a result array.
    </para>
   </listitem>
   <listitem>
    <para>
     A number of deprecated mbregex aliases have been removed. See the following
     list for which functions should be used instead:
    </para>
    <para>
     <simplelist>
      <member><function>mbregex_encoding</function> → <function>mb_regex_encoding</function></member>
      <member><function>mbereg</function> → <function>mb_ereg</function></member>
      <member><function>mberegi</function> → <function>mb_eregi</function></member>
      <member><function>mbereg_replace</function> → <function>mb_ereg_replace</function></member>
      <member><function>mberegi_replace</function> → <function>mb_eregi_replace</function></member>
      <member><function>mbsplit</function> → <function>mb_split</function></member>
      <member><function>mbereg_match</function> → <function>mb_ereg_match</function></member>
      <member><function>mbereg_search</function> → <function>mb_ereg_search</function></member>
      <member><function>mbereg_search_pos</function> → <function>mb_ereg_search_pos</function></member>
      <member><function>mbereg_search_regs</function> → <function>mb_ereg_search_regs</function></member>
      <member><function>mbereg_search_init</function> → <function>mb_ereg_search_init</function></member>
      <member><function>mbereg_search_getregs</function> → <function>mb_ereg_search_getregs</function></member>
      <member><function>mbereg_search_getpos</function> → <function>mb_ereg_search_getpos</function></member>
      <member><function>mbereg_search_setpos</function> → <function>mb_ereg_search_setpos</function></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     The <literal>e</literal> modifier for <function>mb_ereg_replace</function> has been removed.
     <function>mb_ereg_replace_callback</function> should be used instead.
    </para>
   </listitem>
   <listitem>
    <para>
     A non-string pattern argument to <function>mb_ereg_replace</function> will now be interpreted as
     a string instead of an ASCII codepoint. The previous behavior may be restored with an explicit
     call to <function>chr</function>.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>needle</parameter> argument for <function>mb_strpos</function>,
     <function>mb_strrpos</function>, <function>mb_stripos</function>,
     <function>mb_strripos</function>, <function>mb_strstr</function>,
     <function>mb_stristr</function>, <function>mb_strrchr</function> and
     <function>mb_strrichr</function> can now be empty.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>is_hex</parameter> parameter, which was not used internally, has been removed from
     <function>mb_decode_numericentity</function>.
    </para>
   </listitem>
   <listitem>
    <para>
     The legacy behavior of passing the encoding as the third argument instead of an offset for the
     <function>mb_strrpos</function> function has been removed; an explicit <literal>0</literal>
     offset with the encoding should be provided as the fourth argument instead.
    </para>
   </listitem>
   <listitem>
    <para>
     The <literal>ISO_8859-*</literal> character encoding aliases have been replaced by
     <literal>ISO8859-*</literal> aliases for better interoperability with the iconv extension. The
     mbregex ISO 8859 aliases with underscores (<literal>ISO_8859_*</literal> and
     <literal>ISO8859_*</literal>) have also been removed.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_ereg</function> and <function>mb_eregi</function> will now return boolean &true; on
     a successful match. Previously they returned integer <literal>1</literal> if
     <parameter>matches</parameter> was not passed, or <code>max(1, strlen($matches[0]))</code> if
     <parameter>matches</parameter> was passed.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.oci8">
  <title>OCI8</title>

  <itemizedlist>
   <listitem>
    <para>
     The <classname>OCI-Lob</classname> class is now called <classname>OCILob</classname>, and the
     <classname>OCI-Collection</classname> class is now called <classname>OCICollection</classname>
     for name compliance enforced by PHP 8 arginfo type annotation tooling.
    </para>
   </listitem>
   <listitem>
    <para>
     Several alias functions have been marked as deprecated.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>oci_internal_debug</function> and its alias <function>ociinternaldebug</function> have
     been removed.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.odbc">
  <title>ODBC</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>odbc_connect</function> no longer reuses connections.
    </para>
   </listitem>
   <listitem>
    <para>
     The unused <parameter>flags</parameter> parameter of <function>odbc_exec</function> has been
     removed.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.openssl">
  <title>OpenSSL</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>openssl_seal</function> and <function>openssl_open</function> now require
     <parameter>method</parameter> to be passed, as the previous default of <literal>"RC4"</literal>
     is considered insecure.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pcre">
  <title>Regular Expressions (Perl-Compatible)</title>

  <para>
   When passing invalid escape sequences they are no longer interpreted as literals. This behavior
   previously required the <literal>X</literal> modifier – which is now ignored.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo">
  <title>PHP Data Objects</title>

  <itemizedlist>
   <listitem>
    <para>
     The default error handling mode has been changed from "silent" to "exceptions". See
     <link linkend="pdo.error-handling">Errors and error handling</link> for details.
     <!-- RFC: https://wiki.php.net/rfc/pdo_default_errmode -->
    </para>
   </listitem>
   <listitem>
    <para>
     The signatures of some PDO methods have changed:
    </para>
    <para>
     <simplelist>
      <member><code>PDO::query(string $query, ?int $fetchMode  = null, mixed  ...$fetchModeArgs)</code></member>
      <member><code>PDOStatement::setFetchMode(int $mode, mixed ...$args)</code></member>
     </simplelist>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo-odbc">
  <title>PDO ODBC</title>

  <para>
   The &php.ini; directive
   <link linkend="ini.pdo-odbc.db2-instance-name">pdo_odbc.db2_instance_name</link> has been
   removed.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo-mysql">
  <title>PDO MySQL</title>

  <para>
   <methodname>PDO::inTransaction</methodname> now reports the actual transaction state of
   the connection, rather than an approximation maintained by PDO. If a query that is
   subject to "implicit commit" is executed, <methodname>PDO::inTransaction</methodname>
   will subsequently return &false;, as a transaction is no longer active.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pgsql">
  <title>PostgreSQL</title>

  <itemizedlist>
   <listitem>
    <para>
     The deprecated <function>pg_connect</function> syntax using multiple parameters instead of a
     connection string is no longer supported.
    </para>
   </listitem>
   <listitem>
    <para>
     The deprecated <function>pg_lo_import</function> and <function>pg_lo_export</function> signature
     that passes the connection as the last argument is no longer supported. The connection should be
     passed as first argument instead.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>pg_fetch_all</function> will now return an empty array instead of &false; for result
     sets with zero rows.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.phar">
  <title>Phar</title>

  <para>
   Metadata associated with a phar will no longer be automatically unserialized, to fix potential
   security vulnerabilities due to object instantiation, autoloading, etc.
   <!-- RFC: https://wiki.php.net/rfc/phar_stop_autoloading_metadata -->
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.reflection">
  <title>Reflection</title>

  <itemizedlist>
   <listitem>
    <para>
     The method signatures
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance($args)</code></member>
      <member><code>ReflectionFunction::invoke($args)</code></member>
      <member><code>ReflectionMethod::invoke($object, $args)</code></member>
     </simplelist>
    </para>
    <para>
     have been changed to:
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance(...$args)</code></member>
      <member><code>ReflectionFunction::invoke(...$args)</code></member>
      <member><code>ReflectionMethod::invoke($object, ...$args)</code></member>
     </simplelist>
    </para>
    <para>
     Code that must be compatible with both PHP 7 and PHP 8 can use the following
     signatures to be compatible with both versions:
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance($arg = null, ...$args)</code></member>
      <member><code>ReflectionFunction::invoke($arg = null, ...$args)</code></member>
      <member><code>ReflectionMethod::invoke($object, $arg = null, ...$args)</code></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     The <methodname>ReflectionType::__toString</methodname> method will now return a complete debug
     representation of the type, and is no longer deprecated. In particular the result will include a
     nullability indicator for nullable types. The format of the return value is not stable and may
     change between PHP versions.
    </para>
   </listitem>
   <listitem>
    <para>
     Reflection export() methods have been removed.
     Instead reflection objects can be cast to string.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>ReflectionMethod::isConstructor</methodname> and
     <methodname>ReflectionMethod::isDestructor</methodname> now also return &true; for
     <link linkend="object.construct">__construct()</link> and
     <link linkend="object.destruct">__destruct()</link> methods of interfaces.
     Previously, this would only be true for methods of classes and traits.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>ReflectionType::isBuiltin</methodname> method has been moved to
     <classname>ReflectionNamedType</classname>. <classname>ReflectionUnionType</classname> does not
     have it.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.sockets">
  <title>Sockets</title>

  <itemizedlist>
   <listitem>
    <para>
     The deprecated <constant>AI_IDN_ALLOW_UNASSIGNED</constant> and
     <constant>AI_IDN_USE_STD3_ASCII_RULES</constant> <parameter>flags</parameter> for
     <function>socket_addrinfo_lookup</function> have been removed.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.spl">
  <title>Standard PHP Library (SPL)</title>

  <itemizedlist>
   <listitem>
    <para>
     <methodname>SplFileObject::fgetss</methodname> has been removed.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplFileObject::seek</methodname> 总是寻找到一行的开头。之前，位置 <literal>&gt;=1</literal>
     会搜索到下一行的开头。
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplHeap::compare</methodname> now specifies a method signature. Inheriting classes
     implementing this method will now have to use a compatible method signature.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplDoublyLinkedList::push</methodname>,
     <methodname>SplDoublyLinkedList::unshift</methodname> and
     <methodname>SplQueue::enqueue</methodname> now return <type>void</type> instead of &true;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>spl_autoload_register</function> will now always throw a
     <classname>TypeError</classname> on invalid arguments, therefore the second argument
     <parameter>do_throw</parameter> is ignored and a notice will be emitted if it is set to &false;.
    </para>
   </listitem>
   <listitem>
    <para>
     <classname>SplFixedArray</classname> is now an <interfacename>IteratorAggregate</interfacename>
     and not an <interfacename>Iterator</interfacename>.
     <methodname>SplFixedArray::rewind</methodname>, <methodname>SplFixedArray::current</methodname>,
     <methodname>SplFixedArray::key</methodname>, <methodname>SplFixedArray::next</methodname>, and
     <methodname>SplFixedArray::valid</methodname> have been removed. In their place,
     <methodname>SplFixedArray::getIterator</methodname> has been added. Any code which uses explicit
     iteration over SplFixedArray must now obtain an
     <interfacename>Iterator</interfacename> through
     <methodname>SplFixedArray::getIterator</methodname>. This means that
     <classname>SplFixedArray</classname> is now safe to use in nested loops.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.standard">
  <title>Standard Library</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>assert</function> will no longer evaluate string arguments, instead they will be
     treated like any other argument. <code>assert($a == $b)</code> should be used instead of
     <code>assert('$a == $b')</code>. The <link
     linkend="ini.assert.quiet-eval">assert.quiet_eval</link> ini directive and the
     <constant>ASSERT_QUIET_EVAL</constant> constant have also been removed, as they would no longer
     have any effect.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>parse_str</function> can no longer be used without specifying a result array.
    </para>
   </listitem>
   <listitem>
    <para>
     The <link linkend="filters.string.strip_tags">string.strip_tags</link> filter has been removed.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>needle</parameter> argument of <function>strpos</function>,
     <function>strrpos</function>, <function>stripos</function>, <function>strripos</function>,
     <function>strstr</function>, <function>strchr</function>, <function>strrchr</function>, and
     <function>stristr</function> will now always be interpreted as a string. Previously non-string
     needles were interpreted as an ASCII code point. An explicit call to <function>chr</function> can
     be used to restore the previous behavior.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>needle</parameter> argument for <function>strpos</function>,
     <function>strrpos</function>, <function>stripos</function>, <function>strripos</function>,
     <function>strstr</function>, <function>stristr</function> and <function>strrchr</function> can
     now be empty.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>length</parameter> argument for <function>substr</function>,
     <function>substr_count</function>, <function>substr_compare</function>, and
     <function>iconv_substr</function> can now be &null;. &null; values will behave as if no length
     argument was provided and will therefore return the remainder of the string instead of an empty
     string.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>length</parameter> argument for <function>array_splice</function> can now be
     &null;. &null; values will behave identically to omitting the argument, thus removing everything
     from the <parameter>offset</parameter> to the end of the array.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>args</parameter> argument of <function>vsprintf</function>,
     <function>vfprintf</function>, and <function>vprintf</function> must now be an array. Previously
     any type was accepted.
    </para>
   </listitem>
   <listitem>
    <para>
     The <literal>'salt'</literal> option of <function>password_hash</function> is no longer
     supported. If the <literal>'salt'</literal> option is used a warning is generated, the provided
     salt is ignored, and a generated salt is used instead.
    </para>
   </listitem>
   <listitem>
    <para>
     The <function>quotemeta</function> function will now return an empty string if an empty string
     was passed. Previously &false; was returned.
    </para>
   </listitem>
   <listitem>
    <para>
     The following functions have been removed:
    </para>
    <para>
     <simplelist>
      <member><function>hebrevc</function></member>
      <member><function>convert_cyr_string</function></member>
      <member><function>money_format</function></member>
      <member><function>ezmlm_hash</function></member>
      <member><function>restore_include_path</function></member>
      <member><function>get_magic_quotes_gpc</function></member>
      <member><function>get_magic_quotes_runtime</function></member>
      <member><function>fgetss</function></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     <constant>FILTER_SANITIZE_MAGIC_QUOTES</constant> has been removed.
    </para>
   </listitem>
   <listitem>
    <para>
     Calling <function>implode</function> with parameters in a reverse order <code>($pieces,
     $glue)</code> is no longer supported.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>parse_url</function> will now distinguish absent and empty queries and fragments:
    </para>
    <para>
     <simplelist>
      <member><code>http://example.com/foo → query = null, fragment = null</code></member>
      <member><code>http://example.com/foo? → query = "",   fragment = null</code></member>
      <member><code>http://example.com/foo# → query = null, fragment = ""</code></member>
      <member><code>http://example.com/foo?# → query = "",   fragment = ""</code></member>
     </simplelist>
      Previously all cases resulted in query and fragment being &null;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>var_dump</function> and <function>debug_zval_dump</function> will now print
     floating-point numbers using <link linkend="ini.serialize-precision">serialize_precision</link>
     rather than <link linkend="ini.precision">precision</link>. In a default configuration, this
     means that floating-point numbers are now printed with full accuracy by these debugging
     functions.
    </para>
   </listitem>
   <listitem>
    <para>
     If the array returned by <link linkend="object.sleep">__sleep()</link> contains non-existing
     properties, these are now silently ignored. Previously, such properties would have been
     serialized as if they had the value &null;.
    </para>
   </listitem>
   <listitem>
    <para>
     The default locale on startup is now always <literal>"C"</literal>. No locales are inherited from
     the environment by default. Previously, <constant>LC_ALL</constant> was set to
     <literal>"C"</literal>, while <constant>LC_CTYPE</constant> was inherited from the environment.
     However, some functions did not respect the inherited locale without an explicit
     <function>setlocale</function> call. An explicit <function>setlocale</function> call is now
     always required if a locale component should be changed from the default.
    </para>
   </listitem>
   <listitem>
    <para>
     The deprecated DES fallback in <function>crypt</function> has been removed. If an unknown salt
     format is passed to <function>crypt</function>, the function will fail with <literal>*0</literal>
     instead of falling back to a weak DES hash now.
    </para>
   </listitem>
   <listitem>
    <para>
     Specifying out of range rounds for SHA256/SHA512 <function>crypt</function> will now fail with
     <literal>*0</literal> instead of clamping to the closest limit. This matches glibc behavior.
    </para>
   </listitem>
   <listitem>
    <para>
     The result of sorting functions may have changed, if the array contains elements that compare as
     equal.
    </para>
   </listitem>
   <listitem>
    <para>
     Any functions accepting callbacks that are not explicitly specified to accept parameters by
     reference will now warn if a callback with reference parameters is used. Examples include
     <function>array_filter</function> and <function>array_reduce</function>. This was already the
     case for most, but not all, functions previously.
    </para>
   </listitem>
   <listitem>
    <para>
     The HTTP stream wrapper as used by functions like <function>file_get_contents</function>
     now advertises HTTP/1.1 rather than HTTP/1.0 by default. This does not change the behavior of the
     client, but may cause servers to respond differently. To retain the old behavior, set the
     <literal>'protocol_version'</literal> stream context option, e.g.
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$ctx = stream_context_create(['http' => ['protocol_version' => '1.0']]);
echo file_get_contents('http://example.org', false, $ctx);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     Calling <function>crypt</function> without an explicit salt is no longer supported. If you would
     like to produce a strong hash with an auto-generated salt, use
     <function>password_hash</function> instead.
    </para>
   </listitem>
   <listitem>
    <para>
    <function>substr</function>, <function>mb_substr</function>, <function>iconv_substr</function> and
    <function>grapheme_substr</function> now consistently clamp out-of-bounds offsets to the string
    boundary. Previously, &false; was returned instead of the empty string in some cases.
    </para>
   </listitem>
   <listitem>
    <para>
     On Windows, the program execution functions (<function>proc_open</function>, <function>exec</function>,
     <function>popen</function> etc.) using the shell, now consistently execute <command>%comspec% /s
     /c "$commandline"</command>, which has the same effect as executing
     <command>$commandline</command> (without additional quotes).
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.sysvsem">
  <title>Sysvsem</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>sem_get</function> 的 <parameter>auto_release</parameter> 参数已从接受 int
     更改为接受 bool。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.tidy">
  <title>Tidy</title>

  <itemizedlist>
   <listitem>
    <para>
     从 <function>tidy_repair_string</function> 中删除内部未使用的 
     <parameter>use_include_path</parameter> 参数。
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>tidy::repairString</methodname> 和 <methodname>tidy::repairFile</methodname> 成为静态方法。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.tokenizer">
  <title>Tokenizer</title>

  <itemizedlist>
   <listitem>
    <para>
     <literal>T_COMMENT</literal> 记号将不再包含尾随的换行符。换行符将成为以下 <literal>T_WHITESPACE</literal>
     记号的一部分。需要注意的是，<literal>T_COMMENT</literal> 后面并不总是跟空格，也可能跟着
     <literal>T_CLOSE_TAG</literal> 或者文件结尾。
    </para>
   </listitem>
   <listitem>
    <para>
     命名空间名称现在使用 <literal>T_NAME_QUALIFIED</literal>（<code>Foo\Bar</code>）、<literal>T_NAME_FULLY_QUALIFIED</literal>（<code>\Foo\Bar</code>）
     和 <literal>T_NAME_RELATIVE</literal>（<code>namespace\Foo\Bar</code>）记号表示。
     <literal>T_NS_SEPARATOR</literal> is only used for standalone namespace separators, and only
     syntactially valid in conjunction with group use declarations.
     <!-- RFC: https://wiki.php.net/rfc/namespaced_names_as_token -->
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.xmlreader">
  <title>XMLReader</title>

  <para>
   <methodname>XMLReader::open</methodname> 和 <methodname>XMLReader::xml</methodname>
   现在是静态方法。也可以作为实例方法调用，但如果继承类需要覆盖这些方法，要声明为 static。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.xmlrpc">
  <title>XML-RPC</title>

  <para>
   XML-RPC 扩展已移动到 PECL，不再是 PHP 发行版的一部分。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.zip">
  <title>Zip</title>

  <para>
   <constant>ZipArchive::OPSYS_Z_CPM</constant> 已移除（名字错误）。使用
   <constant>ZipArchive::OPSYS_CPM</constant> 代替。
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.zlib">
  <title>Zlib</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>gzgetss</function> 已移除。
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="ini.zlib.output-compression">zlib.output_compression</link> 不再对
     <literal>Content-Type: image/*</literal> 自动禁用。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.php-test-packs">
  <title>Windows PHP 测试包</title>

  <para>
   测试运行器从 <filename>run-test.php</filename> 重命名为 <filename>run-tests.php</filename>，以匹配其在
   php-src 中的名字。
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
