<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: ca9dbbbd2dcac26d56bbbb87539297e4589bd709 Maintainer: avenger Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<sect1 xml:id="migration80.deprecated">
 <title>PHP 8.0 废弃的功能</title>

 <sect2 xml:id="migration80.deprecated.core">
  <title>PHP 核心中废弃的功能</title>

  <itemizedlist>
   <listitem>
    <para>
     如果带有默认值的参数后面跟着一个必要的参数，那么默认值就会无效。这在
     PHP 8.0.0 中已被废弃，通常可以通过删除默认值，不影响现有功能：
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
function test($a = [], $b) {} // 之前
function test($a, $b) {}      // 之后
?>
]]>
     </programlisting>
    </para>
    <para>
      这条规则的一个例外是 <code>Type $param = null</code>
      形式的参数，其中 null
      的默认值使得类型隐式为空。这种用法仍然是允许的，但仍建议使用显式可空类型。
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
function test(A $a = null, $b) {} // 旧写法，仍可用
function test(?A $a, $b) {}       // 推荐写法
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     参数 <parameter>exclude_disabled</parameter> 不能设置为 &false;
     来调用 <function>get_defined_functions</function>，该参数已被废弃，不再起作用。
     <function>get_defined_functions</function> 绝不会再包含禁用的函数。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.deprecated.enchant">
  <title>Enchant</title>

  <itemizedlist>
   <listitem>
    <para>
     弃用 <function>enchant_broker_set_dict_path</function> 和
     <function>enchant_broker_get_dict_path</function>
     ，因为此功能在 libenchant &lt; 1.5 和 libenchant-2 中均不可用。
    </para>
   </listitem>
   <listitem>
    <para>
     弃用 <function>enchant_dict_add_to_personal</function>，使用
     <function>enchant_dict_add</function> 替代。
    </para>
   </listitem>
   <listitem>
    <para>
     弃用 <function>enchant_dict_is_in_session</function>，使用
     <function>enchant_dict_is_added</function> 替代。
    </para>
   </listitem>
   <listitem>
    <para>
     弃用 <function>enchant_broker_free</function> 和 <function>enchant_broker_free_dict</function>，取而代之的是取消对象。
    </para>
   </listitem>
   <listitem>
    <para>
     弃用 <constant>ENCHANT_MYSPELL</constant> 和 <constant>ENCHANT_ISPELL</constant> 常量。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.deprecated.libxml">
  <title>LibXML</title>

  <para>
   弃用 <function>libxml_disable_entity_loader</function>。由于现在需要 libxml 
   2.9.0，默认情况下会禁用外部实体加载并且不再需要此函数来防止 XXE 攻击，除非使用（仍然易受攻击的）
   <constant>LIBXML_NOENT</constant>。在这种情况下，建议使用  
   <function>libxml_set_external_entity_loader</function> 重构代码以抑制外部实体加载。
  </para>
 </sect2>

 <sect2 xml:id="migration80.deprecated.pgsql">
  <title>PGSQL / PDO PGSQL</title>

  <itemizedlist>
   <listitem>
    <para>
     现在常量 <constant>PGSQL_LIBPQ_VERSION_STR</constant> 的值与
     <constant>PGSQL_LIBPQ_VERSION</constant>相同，因此废弃。
    </para>
   </listitem>
   <listitem>
    <para>
     pgsql 扩展中的函数别名已废弃。请参阅以下列表了解应该使用那些函数：
    </para>
    <para>
     <simplelist>
      <member><function>pg_errormessage</function> → <function>pg_last_error</function></member>
      <member><function>pg_numrows</function> → <function>pg_num_rows</function></member>
      <member><function>pg_numfields</function> → <function>pg_num_fields</function></member>
      <member><function>pg_cmdtuples</function> → <function>pg_affected_rows</function></member>
      <member><function>pg_fieldname</function> → <function>pg_field_name</function></member>
      <member><function>pg_fieldsize</function> → <function>pg_field_size</function></member>
      <member><function>pg_fieldtype</function> → <function>pg_field_type</function></member>
      <member><function>pg_fieldnum</function> → <function>pg_field_num</function></member>
      <member><function>pg_result</function> → <function>pg_fetch_result</function></member>
      <member><function>pg_fieldprtlen</function> → <function>pg_field_prtlen</function></member>
      <member><function>pg_fieldisnull</function> → <function>pg_field_is_null</function></member>
      <member><function>pg_freeresult</function> → <function>pg_free_result</function></member>
      <member><function>pg_getlastoid</function> → <function>pg_last_oid</function></member>
      <member><function>pg_locreate</function> → <function>pg_lo_create</function></member>
      <member><function>pg_lounlink</function> → <function>pg_lo_unlink</function></member>
      <member><function>pg_loopen</function> → <function>pg_lo_open</function></member>
      <member><function>pg_loclose</function> → <function>pg_lo_close</function></member>
      <member><function>pg_loread</function> → <function>pg_lo_read</function></member>
      <member><function>pg_lowrite</function> → <function>pg_lo_write</function></member>
      <member><function>pg_loreadall</function> → <function>pg_lo_read_all</function></member>
      <member><function>pg_loimport</function> → <function>pg_lo_import</function></member>
      <member><function>pg_loexport</function> → <function>pg_lo_export</function></member>
      <member><function>pg_setclientencoding</function> → <function>pg_set_client_encoding</function></member>
      <member><function>pg_clientencoding</function> -> <function>pg_client_encoding</function></member>
     </simplelist>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.deprecated.standard">
  <title>标准库</title>

  <itemizedlist>
   <listitem>
    <para>
     排序比较函数现在返回 &true; 或者 &false; 将会引发弃用警告，应替换为返回小于、等于或者大于零的 int 值。
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
// 替换
usort($array, fn($a, $b) => $a > $b);
// 为
usort($array, fn($a, $b) => $a <=> $b);
?>
]]>
     </programlisting> 
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.deprecated.zip">
  <title>Zip</title>

  <itemizedlist>
   <listitem>
    <para>
     弃用使用空文件作为 ZipArchive。Libzip 1.6.0 不再接受空文件作为有效的 zip 
     归档。现有的解决方案将在下个版本删除。
    </para>
   </listitem>
   <listitem>
    <para>
     弃用面向过程的 Zip API。使用 <classname>ZipArchive</classname>
     替代。可以使用 <methodname>ZipArchive::statIndex</methodname> 和 
     <link linkend="control-structures.for">for</link> 循环完成对所有条目的迭代：
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
// 使用面向过程 API 进行迭代
assert(is_resource($zip));
while ($entry = zip_read($zip)) {
    echo zip_entry_name($entry);
}

// 使用面向对象 API 进行迭代
assert($zip instanceof ZipArchive);
for ($i = 0; $entry = $zip->statIndex($i); $i++) {
    echo $entry['name'];
}
?>
]]>
     </programlisting>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.deprecated.reflection">
  <title>反射</title>

  <itemizedlist>
   <listitem>
    <para>
     弃用 <methodname>ReflectionFunction::isDisabled</methodname>，因为不可能再为禁用的函数创建
     <classname>ReflectionFunction</classname>。此方法现在总是返回 &false;。
    </para>
   </listitem>
   <listitem>
    <para>
     弃用 <methodname>ReflectionParameter::getClass</methodname>、
     <methodname>ReflectionParameter::isArray</methodname>、
     <methodname>ReflectionParameter::isCallable</methodname>。
     应该使用 <methodname>ReflectionParameter::getType</methodname> 和
     <classname>ReflectionType</classname> API 替代。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
