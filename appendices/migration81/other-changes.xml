<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 4d2479dcf35d82aca39ee61f8ab36ceed78a869c Maintainer: Rytia Status: ready -->

<sect1 xml:id="migration81.other-changes" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>其他变更</title>

 <sect2 xml:id="migration81.other-changes.sapi">
  <title>SAPI 模块的变更</title>

  <sect3 xml:id="migration81.other-changes.sapi.cli">
   <title>CLI</title>

   <para>
    如果没有安装 <link linkend="book.readline">readline 扩展</link>，使用
    <option>-a</option> 选项现在将导致错误。在之前，如果没有 readline 扩展的话 <option>-a</option>
    与直接无参数调用 <command>php</command> 的表现一样，除了额外显示一行
    <literal>"Interactive mode enabled"</literal> 消息。这个模式<emphasis>非交互模式</emphasis>。
   </para>
  </sect3>

  <sect3 xml:id="migration81.other-changes.sapi.phpdbg">
   <title>PHPDBG</title>

   <para>
    <link linkend="book.phpdbg">phpdbg</link> 的远程功能已经被移除。
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration81.other-changes.functions">
  <title>函数的变更</title>

  <sect3 xml:id="migration81.other-changes.functions.core">
   <title>核心</title>

   <para>
    在 &foreach;、<function>var_dump</function>
    、<function>serialize</function>、对象对比等场景中属性的顺序发生了改变。
    现在，属性将根据它们的声明与继承进行排序，在基类中声明的属性将排在子类属性之前。
   </para>
   <para>
    这个顺序与 <code>zend_object</code> 结构中属性的内部布局保持一致，并且重复了
    <code>default_properties_table[]</code>和 <code>properties_info_table[] </code>
    中的顺序。旧的顺序没有被记录下来，是由类的继承实现细节造成的。
   </para>
  </sect3>

  <sect3 xml:id="migration81.other-changes.functions.filter">
   <title>Filter</title>

   <para>
    <constant>FILTER_VALIDATE_INT</constant> 过滤器的 <constant>FILTER_FLAG_ALLOW_OCTAL</constant>
    标识现在接受带八进制前缀（<literal>"0o"</literal>/<literal>"0O"</literal>）的八进制字符串。
   </para>
  </sect3>

  <sect3 xml:id="migration81.other-changes.functions.gmp">
   <title>GMP</title>

   <para>
    所有的 <link linkend="book.gmp">GMP</link> 函数现在接受带八进制前缀（
    <literal>"0o"</literal>/<literal>"0O"</literal>）的八进制字符串。
   </para>
  </sect3>

  <sect3 xml:id="migration81.other-changes.functions.pdo-odbc">
   <title>PDO ODBC</title>

   <para>
    带着 <constant>PDO::ATTR_SERVER_INFO</constant> 和
    <constant>PDO::ATTR_SERVER_VERSION</constant> 常量的
    <methodname>PDO::getAttribute</methodname>
    方法现在返回的是值而不是抛出 <classname>PDOException</classname> 异常。
   </para>
  </sect3>

  <sect3 xml:id="migration81.other-changes.functions.reflection">
   <title>Reflection</title>

   <para>
    <methodname>ReflectionProperty::setAccessible</methodname> 和
    <methodname>ReflectionMethod::setAccessible</methodname>
    将不再起作用。属性和方法现在总被认为是能够通过反射访问的。
   </para>
  </sect3>

  <sect3 xml:id="migration81.other-changes.functions.standard">
   <title>常规</title>

   <para>
    <function>syslog</function> 现在是二进制安全的。
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration81.other-changes.extensions">
  <title>其他扩展变更</title>

  <sect3 xml:id="migration81.other-changes.extensions.gd">
   <title>GD</title>

   <para>
    <function>imagewebp</function> 现在可以通过传递 <constant>IMG_WEBP_LOSSLESS</constant>
    作为质量来实现无损的 WebP 编码了。
   </para>
   <para>
    这个常量只有在所使用的 libgd 支持无损 WebP 编码的情况在才会被定义。
   </para>
  </sect3>

  <sect3 xml:id="migration81.other-changes.extensions.mysqli">
   <title>MySQLi</title>

   <para>
    在连接 libmysqlclient 时，<methodname>mysqli_stmt::next_result</methodname>
    和 <methodname>mysqli::fetch_all</methodname> 现在可以使用了。
   </para>
  </sect3>

  <sect3 xml:id="migration81.other-changes.extensions.openssl">
   <title>OpenSSL</title>

   <itemizedlist>
    <listitem>
     <para>
      <link linkend="book.openssl">OpenSSL 扩展</link> 现在至少需要 OpenSSL 1.0.2 版本。
     </para>
    </listitem>
    <listitem>
     <para>
      现在已经支持 OpenSSL 3.0 了。请注意许多密码算法（部分老的提供者）不再是默认启用的，以及参数校验（例如：最小秘钥长度）比以前更加严格了。
     </para>
    </listitem>
   </itemizedlist>
  </sect3>

  <sect3 xml:id="migration81.other-changes.extensions.phar">
   <title>Phar</title>

   <itemizedlist>
    <listitem>
     <para>
       现在签名的默认算法为 SHA256。
     </para>
    </listitem>
    <listitem>
     <para>
      签名算法增加了对 OpenSSL_SHA256 和 OpenSSL_SHA512 的支持。
     </para>
    </listitem>
   </itemizedlist>
  </sect3>

  <sect3 xml:id="migration81.other-changes.extensions.snmp">
   <title>SNMP</title>

   <itemizedlist>
    <listitem>
     <para>
      为安全协议增加了对 SHA256 和 SHA512 的支持。
     </para>
    </listitem>
   </itemizedlist>
  </sect3>

  <sect3 xml:id="migration81.other-changes.extensions.standard">
   <title>常规</title>

   <para>
    <code>--with-password-argon2</code> 现在使用 pkg-config 来检测
    libargon2。因此现在应该使用 <envar>PKG_CONFIG_PATH</envar>
    来修改 libargon2 的位置。
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration81.other-changes.ini">
  <title>INI 文件处理的变化</title>

  <itemizedlist>
   <listitem>
    <para>
     INI 配置项 <link linkend="ini.log-errors-max-len">log_errors_max_len</link> 已经被移除。从 PHP 8.0.0 开始将不再起作用。
    </para>
   </listitem>
   <listitem>
    <para>
     一个在引用字符串中的前置美元符号现在可以被转义：<literal>"\${"</literal>
     将会被解释为内容包含 <literal>${</literal> 的字符串。
    </para>
   </listitem>
   <listitem>
    <para>
     双引号内的字符串中反斜线现在被更一致地视为转义字符。之前 <literal>"foo\\"</literal>
     的后面如果是除换行之外的其他字符是不被视为一个终止字符串的。现在，它被解释成一个内容为
     <literal>foo\</literal>的字符串。然而有一个例外的地方是后面跟着换行符的字符串 <literal>"foo\"</literal>
     将继续被视为一个有效的、内容为 "foo\" 的字符串，而不是一个还没有结束的字符串。这个例外的存在是为了天然支持 Windows 文件路径的使用，如
     <literal>"C:\foo\"</literal>。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
