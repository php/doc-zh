<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 161dde4fe721309398dd324edbf02aec409f127b Maintainer: zhonglang Status: ready -->
<!-- CREDITS: Luffy -->
<sect1 xml:id="migration81.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>新特性</title>

 <sect2 xml:id="migration81.new-features.core">
  <title>PHP 核心</title>

  <sect3 xml:id="migration81.new-features.core.octal-literal-prefix">
   <title>八进制整数文字表达前缀</title>

   <para>
    类似于二进制和十六进制字面量表达方式，现在八进制整数可以在表示中使用更为清晰地前缀 <literal>0o</literal>/<literal>0O</literal> 。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
014;  // 无前缀的八进制表示
0o14; // 添加前缀的八进制表示
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <!-- RFC: https://wiki.php.net/rfc/explicit_octal_notation -->
  </sect3>

  <sect3 xml:id="migration81.new-features.core.unpacking-string-keys">
   <title>支持字符串类型键的数组解包</title>

   <para>
    新增<link linkend="language.types.array.unpacking">字符串类型键的数组解包</link>。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$arr1 = [1, 'a' => 'b'];
$arr2 = [...$arr1, 'c' => 'd']; //[1, 'a' => 'b', 'c' => 'd']
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <!-- RFC: https://wiki.php.net/rfc/array_unpacking_string_keys -->
  </sect3>

  <sect3 xml:id="migration81.new-features.core.named-arg-after-unpack">
   <title>参数展开后命名参数</title>

   <para>
    现在可以在参数展开后为命名参数。
    <!-- TODO Add an example -->
    例如：
    foo(...$args, named: $arg).
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.upload-full-path-key">
   <title>文件上传新增 full-path 键</title>

   <para>
    现在文件上传新增了额外的 <literal>full_path</literal> 键，
    这包含了上传文件的完整路径（不仅仅是返回路径中的文件名部分）。
    这是为了与 “upload webkitdirectory” 结合使用。
   </para>
   <!-- RFC: https://wiki.php.net/rfc/array_unpacking_string_keys -->
  </sect3>

  <sect3 xml:id="migration81.new-features.core.enums">
   <title>枚举</title>

   <para>
    新增<link linkend="language.enumerations">枚举</link>支持。
    <!-- RFC: https://wiki.php.net/rfc/enumerations -->
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.fibers">
   <title>纤程</title>

   <para>
    新增功能详见 <link linkend="language.fibers">Fibers</link> 。
    <!-- RFC: https://wiki.php.net/rfc/fibers -->
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.callable-syntax">
   <title>First Class 可调用语法</title>

   <para>
    现在可调用闭包可以使用 <link linkend="functions.first_class_callable_syntax"><code>myFunc(...)</code>
    语法</link>创建，与 <code>Closure::fromCallable('myFunc')</code> 效果一样。
    <!-- RFC: https://wiki.php.net/rfc/first_class_callable_syntax -->
   </para>
   <note>
    <simpara>
      <code>...</code> 是语法的一部分，不是省略。
    </simpara>
   </note>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.intersection-types">
   <title>交集类型</title>

   <para>
    新增功能详见<link linkend="language.types.type-system.composite.intersection">交集类型</link>。
    <!-- RFC: https://wiki.php.net/rfc/pure-intersection-types -->
   </para>
   <caution>
    <simpara>
     <link linkend="language.types.type-system.composite.intersection">交集类型</link>不能与<link 
     linkend="language.types.declarations.composite.union">联合类型</link> 一起使用。
    </simpara>
   </caution>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.never-type">
   <title>Never 类型</title>

   <para>
    新增一个新的仅仅返回类型 &never;。它表示函数要么
    <function>exit</function> ，要么抛出异常，要么不会终止。
    <!-- RFC: https://wiki.php.net/rfc/noreturn_type -->
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.new-in-initializer">
   <title>在初始化中 &new;</title>

   <para>
    现在可以将 <code>new ClassName()</code>
    语句作为参数、静态变量、初始化全局常量、注解参数的默认值。现在对象可以作为
    <function>define</function> 的参数了。
    <!-- TODO Add an example -->
   </para>
   <!-- RFC: https://wiki.php.net/rfc/new_in_initializers -->
  </sect3>

  <sect3 xml:id="migration81.new-features.core.readonly">
   <title>Readonly 属性</title>

   <para>
    详见 <link linkend="language.oop5.properties.readonly-properties">readonly</link> 。
    <!-- RFC: https://wiki.php.net/rfc/readonly_properties_v2 -->
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.final-constants">
   <title>Final 类常量</title>

   <para>
    详见 <link linkend="language.oop5.final.example.php81"> <modifier>final</modifier>
    常量修饰符</link>。而且，接口常量默认可覆盖。。
    <!-- RFC: https://wiki.php.net/rfc/final_class_const -->
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration81.new-features.curl">
  <title>CURL</title>

  <para>
   新增 <constant>CURLOPT_DOH_URL</constant> 选项。
  </para>

  <para>
   libcurl 版本 &gt;= 7.71.0 时增加 blob 证书选项：
  </para>
  <itemizedlist>
   <listitem>
    <simpara><constant>CURLOPT_ISSUERCERT_BLOB</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_PROXY_ISSUERCERT</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_PROXY_ISSUERCERT_BLOB</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_PROXY_SSLCERT_BLOB</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_PROXY_SSLKEY_BLOB</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_SSLCERT_BLOB</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_SSLKEY_BLOB</constant></simpara>
   </listitem>
  </itemizedlist>

  <para>
   增加 <classname>CURLStringFile</classname> 类，它能够直接将字符串（不是文件）作为文件上传。
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$file = new CURLStringFile($data, 'filename.txt', 'text/plain');
curl_setopt($curl, CURLOPT_POSTFIELDS, ['file' => $file]);
?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.fpm">
  <title>FPM</title>

  <para>
   新增 openmetrics 数据格式。Prometheus 可以用它来获取 FPM 的监测指标。
  </para>
  <para>
   动态进程管理模式下，新增 <literal>pm.max_spawn_rate</literal> 设置。该设置在动态模式下会更快生成初始数量的子进程。
   默认值为 <literal>32</literal> ，这在以前是硬编码值。
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.gd">
  <title>GD</title>

  <para>
   如果在编译安装 libgd 时添加 AVIF 依赖包，现在通过 <function>imagecreatefromavif</function> 和
   <function>imageavif</function> 函数可获得 AVIF 图片格式，
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.hash">
  <title>Hash</title>

  <para>
   现在，下列函数 <function>hash</function>，
   <function>hash_file</function>，和 <function>hash_init</function>
   新增一个额外的 <parameter>options</parameter> 参数，
   该参数作为特定数据传递给函数算法。
  </para>

  <sect3 xml:id="migration81.new-features.hash.murmurhash3">
   <title>MurmurHash3</title>

   <para>
    新增对 <literal>MurmurHash3</literal> （支持流）的支持。有以下形式提供：
   </para>
   <itemizedlist>
    <listitem>
     <simpara>murmur3a, 32-bit hash</simpara>
    </listitem>
    <listitem>
     <simpara>murmur3c, 128-bit hash for x86</simpara>
    </listitem>
    <listitem>
     <simpara>murmur3f, 128-bit hash for x64</simpara>
    </listitem>
   </itemizedlist>

   <para>
    hash 初始状态可以通过键为 <literal>seed</literal> 的 <parameter>options</parameter> 数组传递，例如：

    <informalexample>
     <programlisting role="php">
      <![CDATA[
<?php
$h = hash("murmur3f", $data, options: ["seed" => 42]);
echo $h, "\n";
?>
]]>
     </programlisting>
    </informalexample>

    seed 的有效值范围为 <literal>0</literal> 到系统定义的 <constant>UINT_MAX</constant>，通常是 <literal>4294967295</literal> 。
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.hash.xxhash">
   <title>xxHash</title>

   <para>
    增加 <literal>xxHash</literal> 的支持。
    有以下形式提供：
   </para>
   <itemizedlist>
    <listitem>
     <simpara>xxh32, 32-bit hash</simpara>
    </listitem>
    <listitem>
     <simpara>xxh64, 64-bit hash</simpara>
    </listitem>
    <listitem>
     <simpara>xxh3, 64-bit hash</simpara>
    </listitem>
    <listitem>
     <simpara>xxh128, 128-bit hash</simpara>
    </listitem>
   </itemizedlist>

   <para>
    hash 初始状态可以通过键为 <literal>seed</literal> 的 <parameter>options</parameter> 数组传递，例如：
    <informalexample>
     <programlisting role="php">
      <![CDATA[
<?php
$h = hash("xxh3", $data, options: ["seed" => 42]);
echo $h, "\n";
?>
]]>
     </programlisting>
    </informalexample>

    使用秘钥可以通过键为 <literal>secret</literal> 的 <parameter>options</parameter> 数组传递，例如：
    <informalexample>
     <programlisting role="php">
      <![CDATA[
<?php
$h = hash("xxh3", $data, options: ["secret" => "at least 136 bytes long secret here"]);
echo $h, "\n";
?>
]]>
     </programlisting>
    </informalexample>

    自定义秘钥的质量对生成的散列质量至关重要。强烈建议秘钥尽可能使用最高标准的熵。
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration81.new-features.mysqli">
  <title>MySQLi</title>

  <sect3 xml:id="migration81.new-features.mysqli.local_infile_directory">
   <title>新增 INI 设置 <literal>mysqli.local_infile_directory</literal></title>

   <para>
    新增 <link linkend="ini.mysqli.local-infile-directory">mysqli.local_infile_directory</link>
    INI 设置，该设置可以指定允许加载文件的目录。这个设置只在禁用
    <link linkend="ini.mysqli.allow-local-infile">mysqli.allow_local_infile</link>
    时才有意义，这种情况下允许加载任意的文件目录。
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.mysqli.bind-in-execute">
   <title>execute 可绑定参数</title>

   <para>
    现在可以将参数以数组的形式传递给 <methodname>mysqli_stmt::execute</methodname>
    来绑定参数。所有值都以字符串的形式绑定。仅支持普通数组。当使用 libmysqlclient 编译
    MySQLi 时，这个新功能不可使用。
    <!-- RFC: https://wiki.php.net/rfc/mysqli_bind_in_execute -->
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$stmt = $mysqli->prepare('INSERT INTO users(id, name) VALUES(?,?)');
$stmt->execute([1, $username]);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.mysqli.mysqli_fetch_column">
   <title>新方法 <methodname>mysqli_result::fetch_column</methodname></title>

   <para>
    新增 <methodname>mysqli_result::fetch_column</methodname> 方法可以从结果集中获取单个标量值。
    新方法接收 &integer; 类型、从 0 开始，可选的 <parameter>column</parameter> 参数，用于从指定行获取数据。
    <!-- RFC: https://wiki.php.net/rfc/mysqli_fetch_column -->
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$result = $mysqli->query('SELECT username FROM users WHERE id = 123');
echo $result->fetch_column();
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration81.new-features.pdo_mysql">
  <title>PDO</title>

  <para>
   新增 <constant>PDO::MYSQL_ATTR_LOCAL_INFILE_DIRECTORY</constant> 常量，可用于指定可加载的文件目录。
   这个设置只在禁用 <constant>PDO::MYSQL_ATTR_LOCAL_INFILE</constant> 时才有意义，这种情况下允许加载任意的文件目录。
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.pdo_sqlite">
  <title>PDO_SQLite</title>

  <para>
   现在已支持 SQLite 的 <literal>"file:"</literal> DSN 语法。
   可用于指定额外的标志。该功能在已设置 open_basedir 的情况下不能使用。
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
new PDO('sqlite:file:path/to/sqlite.db?mode=ro')
?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.posix">
  <title>POSIX</title>

  <para>
   新增 <constant>POSIX_RLIMIT_KQUEUES</constant> 和 <constant>POSIX_RLIMIT_NPTS</constant> 。
   这些 rlimits 只在 FreeBSD 可用。
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.standard">
  <title>Standard</title>

  <para>
   现在 <function>fputcsv</function> 新增参数
   <parameter>eol</parameter> ，这个参数允许自定义数据的行尾值，默认值是 <literal>"\n"</literal> 。
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.spl">
  <title>PHP 标准库（SPL）</title>

  <para>
   现在 <methodname>SplFileObject::fputcsv</methodname> 新增参数
   <parameter>eol</parameter> ，这个参数允许自定义数据的结束位置，默认值保持不变，还是 <literal>"\n"</literal> 。
  </para>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
