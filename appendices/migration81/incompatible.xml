<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 6e69d9342ef5b124a62c8a255cb0d9a091d07b5e Maintainer: zhonglang Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<sect1 xml:id="migration81.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>不向后兼容的变更</title>

 <sect2 xml:id="migration81.incompatible.core">
  <title>PHP 内核</title>

  <sect3 xml:id="migration81.incompatible.core.globals-access">
   <title>$GLOBALS 访问限制</title>

   <para>
    现在访问 <varname>$GLOBALS</varname> 数组受到一些限制。
    对单个数组元素的读写访问 <code>$GLOBALS['var']</code> 与之前一样。
    也将继续支持对整个数组 <varname>$GLOBALS</varname> 的只读访问。
    但是，不再支持对整个 <varname>$GLOBALS</varname> 数组的写访问。
    例如，<code>array_pop($GLOBALS)</code> 将返回错误。
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.core.static-variable-inheritance">
   <title>
    在继承的方法中 <modifier>static</modifier> 变量的用法
   </title>

   <para>
    当一个方法使用继承的（而不是重写的）静态变量时，继承的方法将与父级共享这个静态变量。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function counter() {
        static $counter = 0;
        $counter++;
        return $counter;
    }
}
class B extends A {}
var_dump(A::counter()); // int(1)
var_dump(A::counter()); // int(2)
var_dump(B::counter()); // int(3)，之前是 int(1)
var_dump(B::counter()); // int(4)，之前是 int(2)
?>
]]>
     </programlisting>
    </informalexample>

    这意味着方法中的静态变量现在的使用方式与静态属性一样。
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.core.optional-before-required">
   <title>在强制参数之前指定可选参数</title>

   <para>
    现在在强制参数之前指定<link 
    linkend="functions.arguments.default">可选参数</link>都被视为强制参数，即使是使用<link
    linkend="functions.named-arguments">命名参数</link>调用也是如此。自 PHP 8.0.0 起至 PHP
    8.1.0 之前，在定义时会发出弃用通知，但能成功调用。自 PHP 8.1.0 起，会抛出类为
    <classname>ArgumentCountError</classname> 的错误，就跟使用位置参数调用一样。

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function makeyogurt($container = "bowl", $flavour)
{
    return "Making a $container of $flavour yogurt.\n";
}
try
{
    echo makeyogurt(flavour: "raspberry");
}
catch (Error $e)
{
    echo get_class($e), ' - ', $e->getMessage(), "\n";
}
?>
]]>
     </programlisting>
     &example.outputs.80;
     <screen>
<![CDATA[
Deprecated: Required parameter $flavour follows optional parameter $container
 in example.php on line 3
Making a bowl of raspberry yogurt.
]]>
     </screen>
     &example.outputs.81;
     <screen>
<![CDATA[
Deprecated: Optional parameter $container declared before required parameter
 $flavour is implicitly treated as a required parameter in example.php on line 3
ArgumentCountError - makeyogurt(): Argument #1 ($container) not passed
]]>
     </screen>
    </informalexample>
   </para>
   <para>
    Note that a default value of &null; can be used before required parameters to
    specify a <link linkend="language.types.declarations.nullable">nullable type</link>,
    but the parameter will still be required.
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.core.type-compatibility-internal">
   <title>返回类型与内部类的兼容性</title>

   <para>
    大多数非 Final 的内部方法现在要求重写方法声明一个可兼容的返回类型，否则在继承时会给出方法废弃的提示。
    如果由于 PHP 跨版本兼容性的问题，导致不能为重写方法声明返回类型，则可以添加 <classname>ReturnTypeWillChange</classname> 注解来取消废弃提示。
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.core.new-keywords">
   <title>新的关键词</title>
   <para>
    现在 <literal>readonly</literal> 是一个关键词。不过，它仍然可以被用作函数名。
   </para>
   <para>
    <literal>never</literal> 现在是保留字，所以不能用于类，接口或者
    trait，也禁止在命名空间中使用。
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration81.incompatible.resource2object">
  <title>Resource 类型迁移为 Object 类型</title>

  <para>
   一些 &resource; 类型已被迁移到 &object; 类型。
   要检查返回值，应该从  <function>is_resource</function> 检查是否为资源，更改为检查返回值是否等于 &false;。
  </para>
  <itemizedlist>
   <listitem>
    <para>
     现在 <link linkend="book.fileinfo">FileInfo</link> 函数接收并返回 <classname>finfo</classname> 对象类型，
     而不是 <literal>fileinfo</literal> &resource; 类型。
    </para>
   </listitem>
   <listitem>
    <para>
     现在 <link linkend="book.ftp">FTP</link> 函数接收并返回 <classname>FTP\Connection</classname> 对象类型，
     而不是 <literal>ftp</literal> &resource; 类型。
    </para>
   </listitem>
   <listitem>
    <para>
     现在 <link linkend="book.imap">IMAP</link> 函数接收并返回 <classname>IMAP\Connection</classname> 对象类型，
     而不是 <literal>imap</literal> &resource; 类型。
    </para>
   </listitem>
   <listitem>
    <para>
     现在 <link linkend="book.ldap">LDAP</link> 函数接收并返回 <classname>LDAP\Connection</classname> 对象类型，
     而不是 <literal>ldap link</literal> &resource; 类型。
    </para>
   </listitem>
   <listitem>
    <para>
     现在 <link linkend="book.ldap">LDAP</link> 函数接收并返回 <classname>LDAP\Result</classname> 对象类型，
     而不是 <literal>ldap result</literal> &resource; 类型。
    </para>
   </listitem>
   <listitem>
    <para>
     现在 <link linkend="book.ldap">LDAP</link> 函数接收并返回 <classname>LDAP\ResultEntry</classname> 对象类型，
     而不是 <literal>ldap result entry</literal> &resource; 类型。
    </para>
   </listitem>
   <listitem>
    <para>
     现在 <link linkend="book.pgsql">PgSQL</link> 函数接收并返回 <classname>PgSql\Connection</classname> 对象类型，
     而不是 <literal>pgsql link</literal> &resource; 类型。
    </para>
   </listitem>
   <listitem>
    <para>
     现在 <link linkend="book.pgsql">PgSQL</link> 函数接收并返回 <classname>PgSql\Result</classname> 对象类型，
     而不是 <literal>pgsql result</literal> &resource; 类型。
    </para>
   </listitem>
   <listitem>
    <para>
     现在 <link linkend="book.pgsql">PgSQL</link> 函数接收并返回 <classname>PgSql\Lob</classname> 对象类型，
     而不是 <literal>pgsql large object</literal> &resource; 类型。
    </para>
   </listitem>
   <listitem>
    <para>
     现在 <link linkend="book.pspell">PSpell</link> 函数接收并返回 <classname>PSpell\Dictionary</classname> 对象类型，
     而不是 <literal>pspell</literal> &resource; 类型。
    </para>
   </listitem>
   <listitem>
    <para>
     现在 <link linkend="book.pspell">PSpell</link> 函数接收并返回 <classname>PSpell\Config</classname> 对象类型，
     而不是 <literal>pspell config</literal> &resource; 类型。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration81.incompatible.mysqli">
  <title>MySQLi</title>

  <para>
   现在 <function>mysqli_fetch_fields</function> 和
   <function>mysqli_fetch_field_direct</function> 对于 <property>max_length</property> 将返回 <literal>0</literal> 值。
   这一信息可以迭代结果集来计算，并获取最大长度。这是之前 PHP 内部的做法。
  </para>

  <para>
   常量 <constant>MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH</constant> 不再生效。
  </para>

  <para>
   常量 <constant>MYSQLI_STORE_RESULT_COPY_DATA</constant> 不再生效。
   传递给 <methodname>mysqli::store_result</methodname> 的 <parameter>mode</parameter> 参数的所有值不再生效。
  </para>

  <para>
   现在 <methodname>mysqli::connect</methodname> 成功时返回 &true; 而不再返回 &null;。
  </para>

  <para>
   默认错误处理模式已经由 silent 变成了 exceptions，更多详情及如何设置该属性请参见 <link linkend="mysqli-driver.report-mode">MySQLi reporting mode</link> 。
   要恢复之前的行为习惯，请使用：
   <code>mysqli_report(MYSQLI_REPORT_OFF);</code>
  </para>

  <para>
   现在，扩展 <methodname>mysqli_stmt::execute</methodname> 类需要指定额外的可选参数。
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.mysqlnd">
  <title>MySQLnd</title>

  <para>
    <link linkend="ini.mysqlnd.fetch_data_copy">mysqlnd.fetch_data_copy</link>
   INI 指令已被取消。
   这不会造成用户可见的变化。
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.openssl">
  <title>OpenSSL</title>

  <para>
   现在 EC 私钥将以 PKCS#8 格式导出，而非像其他秘钥那样的传统格式。
  </para>
  <para>
   现在 <function>openssl_pkcs7_encrypt</function> 和
   <function>openssl_cms_encrypt</function> 将默认使用 AES-128-CBC，而非 RC2-40。
   RC2-40 加密被认为是不安全的，OpenSSL 3 默认不启用。
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.pdo">
  <title>PHP 数据对象</title>

  <para>
   现在 <constant>PDO::ATTR_STRINGIFY_FETCHES</constant> 的类型从 &boolean; 变成了字符串 <literal>"0"</literal> 或
   <literal>"1"</literal>。之前的 &boolean; 类型没有被字符串化。
  </para>
  <para>
   现在当 <constant>PDO::ATTR_STRINGIFY_FETCHES</constant> 被禁用时，
   以 <constant>PDO::PARAM_LOB</constant> 为参数调用 <methodname>PDOStatement::bindColumn</methodname> 结果将总是绑定一个流。
   以前，结果要么是一个流，要么是一个字符串，这取决于所用的数据库驱动及其执行的时间。
  </para>

  <sect3 xml:id="migration81.incompatible.pdo.mysql">
   <title>MySQL 驱动</title>

   <para>
    现在，当使用模拟预处理时，结果集中的整数及浮点数将会以 PHP 原始类型返回，而不是以 &string; 类型返回。
    这与原生的预处理方式一样。
    之前的行为方式可以通过 <constant>PDO::ATTR_STRINGIFY_FETCHES</constant> 恢复。
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.pdo.sqlite">
   <title>SQLite 驱动</title>

   <para>
    现在，结果集中的整数及浮点数将会以 PHP 原始类型返回。
    之前的行为方式可以通过 <constant>PDO::ATTR_STRINGIFY_FETCHES</constant> 恢复。
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration81.incompatible.phar">
  <title>Phar</title>

  <para>
   为了遵守 <interfacename>ArrayAccess</interfacename> 接口，
   <methodname>Phar::offsetUnset</methodname> 和
   <methodname>PharData::offsetUnset</methodname> 不再以 &boolean; 类型返回。
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.standard">
  <title>Standard</title>

  <para>
   <function>version_compare</function> 函数不再接收未经记录的操作符缩写。
  </para>

  <para>
   现在 <function>htmlspecialchars</function>、
   <function>htmlentities</function>、
   <function>htmlspecialchars_decode</function>、
   <function>html_entity_decode</function>、
   <function>get_html_translation_table</function>
   使用 <literal>ENT_QUOTES | ENT_SUBSTITUTE</literal> 作为默认值，而不再是 <constant>ENT_COMPAT</constant>。
   这意味着 <literal>'</literal> 被转义为 <literal>&amp;#039;</literal> 而不像之前那样不作处理。
   此外，有缺陷的 UTF-8 将被 Unicode 替代字符（substitute character）替换，而不是产生一个空字符串。
  </para>

  <para>
   现在 <function>debug_zval_dump</function> 函数可以打印封装的引用计数了，不仅仅只是打印 <literal>&amp;</literal> 引用计数的值。
   这更准确地模拟了自 PHP 7.0 以来的引用注解。
  </para>

  <para>
   现在 <function>debug_zval_dump</function> 可打印 <literal>interned</literal> 字符串，而不是 interned 字符串和不可变数组的虚拟的引用计数。
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.spl">
  <title>PHP 标准库（SPL）</title>

  <para>
   <classname>SplFixedArray</classname> 将会像 &array; 类型一样被 JSON 编码。
  </para>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
