<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 8d1a5d2d15df15cc5cbc7f96cdc083b8fe49366e Maintainer: avenger Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<sect1 xml:id="migration74.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>新特性</title>

 <sect2 xml:id="migration74.new-features.core">
  <title>PHP 核心中的新特性</title>

  <sect3 xml:id="migration74.new-features.core.typed-properties">
   <title>属性添加限定类型</title>

   <para>
    类的属性中现在支持添加指定的类型。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class User {
    public int $id;
    public string $name;
}
?>
]]>
     </programlisting>
    </informalexample>
    上面的例子中，会强制要求 <literal>$user->id</literal> 只能为 <type>int</type>
    类型，同时 <literal>$user->name</literal> 只能为 <type>string</type> 类型。
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.arrow-functions">
   <title>箭头函数</title>

   <para>
    <link linkend="functions.arrow">箭头函数</link> 提供了一种更简洁的定义函数的方法。

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$factor = 10;
$nums = array_map(fn($n) => $n * $factor, [1, 2, 3, 4]);
// $nums = array(10, 20, 30, 40);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.type-variance">
   <title>有限返回类型协变与参数类型逆变</title>

   <para>
    以下代码现在可以正常执行：
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class A {}
class B extends A {}

class Producer {
    public function method(): A {}
}
class ChildProducer extends Producer {
    public function method(): B {}
}
?>
]]>
     </programlisting>
    </informalexample>
    只有在使用自动加载的情况下，才会有完整的差异支持。在一个文件内，只有非循环类型引用是可能的，因为在引用之前，所有的类都需要可用。
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.null-coalescing-assignment-operator">
   <title>空合并运算符赋值</title>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$array['key'] ??= computeDefault();
// 等同于以下旧写法
if (!isset($array['key'])) {
    $array['key'] = computeDefault();
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.unpack-inside-array">
   <title>数组展开操作</title>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$parts = ['apple', 'pear'];
$fruits = ['banana', 'orange', ...$parts, 'watermelon'];
// ['banana', 'orange', 'apple', 'pear', 'watermelon'];
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.numeric-literal-separator">
   <title>数值文字分隔符</title>

   <para>
    数字文字可以在数字之间包含下划线。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
6.674_083e-11; // float
299_792_458;   // decimal
0xCAFE_F00D;   // hexadecimal
0b0101_1111;   // binary
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>
 
  <sect3 xml:id="migration74.new-features.core.weakreference">
   <title>弱引用</title>

   <para>
    <link linkend="class.weakreference">弱引用</link>允许程序员保留对对象的引用，但不会阻止销毁对象。
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.tostring-exceptions">
   <title>允许从 __toString() 抛出异常</title>

   <para>
    现在允许从 <link linkend="object.tostring">__toString()</link>
    抛出异常。之前的版本，将会导致一个致命错误。新版本中，之前发生致命错误的代码，已经被转换为
    <classname>Error</classname> 异常。
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration74.new-features.curl">
  <title>CURL</title>
  
  <para>
   <classname>CURLFile</classname> now supports stream wrappers in addition
   to plain file names, if the extension has been built against libcurl &gt;= 7.56.0.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.filter">
  <title>Filter</title>
  
  <para>
   The <constant>FILTER_VALIDATE_FLOAT</constant> filter now supports the
   <literal>min_range</literal> and <literal>max_range</literal>
   options, with the same semantics as <constant>FILTER_VALIDATE_INT</constant>.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.ffi">
  <title>FFI</title>

  <para>
   FFI is a new extension, which provides a simple way to call
   native functions, access native variables, and create/access
   data structures defined in C libraries.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.gd">
  <title>GD</title>

  <para>
   Added the <constant>IMG_FILTER_SCATTER</constant> image filter
   to apply a scatter filter to images.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.hash">
  <title>Hash</title>

  <para>
   Added <literal>crc32c</literal> hash using Castagnoli's polynomial.
   This CRC32 variant is used by storage systems, such as
   iSCSI, SCTP, Btrfs and ext4.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.mbstring">
  <title>Multibyte String</title>

  <para>
   Added the <function>mb_str_split</function> function, which provides
   the same functionality as <function>str_split</function>, but operating
   on code points rather than bytes.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.opcache">
  <title>OPcache</title>

  <para>
   新增 <link linkend="opcache.preloading">缓存预加载</link> 特性。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pcre">
  <title>正则表达式（兼容 Perl）</title>

  <para>
   <function>preg_replace_callback</function> 和 <function>preg_replace_callback_array</function>
   函数现在接受附加的 <parameter>flags</parameter> 参数，支持 <constant>PREG_OFFSET_CAPTURE</constant>
   和 <constant>PREG_UNMATCHED_AS_NULL</constant> flag。这会影响传递给回调函数的匹配数组的格式。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo">
  <title>PDO</title>

  <para>
   The username and password can now be specified as part of the PDO DSN for
   the mysql, mssql, sybase, dblib, firebird and oci drivers. Previously this
   was only supported by the pgsql driver. If a username/password is specified
   both in the constructor and the DSN, the constructor takes precedence.
  </para>
  <para>
   It is now possible to escape question marks in SQL queries to avoid them
   being interpreted as parameter placeholders. Writing <literal>??</literal>
   allows sending a single question mark to the database and e.g. use the
   PostgreSQL JSON key exists (<literal>?</literal>) operator.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo_oci">
  <title>PDO_OCI</title>

  <para>
   <methodname>PDOStatement::getColumnMeta</methodname> is now available.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo_sqlite">
  <title>PDO_SQLite</title>

  <para>
   <literal>PDOStatement::getAttribute(PDO::SQLITE_ATTR_READONLY_STATEMENT)</literal>
   allows checking whether the statement is read-only, i.e. if it doesn't modify
   the database.
  </para>
  <para>
   <literal>PDO::setAttribute(PDO::SQLITE_ATTR_EXTENDED_RESULT_CODES, true)</literal>
   enables the use of SQLite3 extended result codes in <function>PDO::errorInfo</function>
   and <function>PDOStatement::errorInfo</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.sqlite3">
  <title>SQLite3</title>

  <para>
   Added <methodname>SQLite3::lastExtendedErrorCode</methodname>
   to fetch the last extended result code.
  </para>
  <para>
   Added <literal>SQLite3::enableExtendedResultCodes($enable = true)</literal>,
   which will make <methodname>SQLite3::lastErrorCode</methodname>
   return extended result codes.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.standard">
  <title>Standard</title>

  <sect3 xml:id="migration74.new-features.standard.strip-tags">
   <title>strip_tags() with array of tag names</title>
   <para>
    <function>strip_tags</function> now also accepts an array of allowed tags:
    instead of <literal>strip_tags($str, '&lt;a&gt;&lt;p&gt;')</literal>
    you can now write <literal>strip_tags($str, ['a', 'p'])</literal>.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.magic-serialize">
   <title>Custom object serialization</title>
   <para>
    A new mechanism for custom object serialization has been added, which
    uses two new magic methods: <literal>__serialize</literal>
    and <literal>__unserialize</literal>.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
// Returns array containing all the necessary state of the object.
public function __serialize(): array;

// Restores the object state from the given data array.
public function __unserialize(array $data): void;
?>
]]>
     </programlisting>
    </informalexample>
    The new serialization mechanism supersedes the
    <interfacename>Serializable</interfacename> interface,
    which will be deprecated in the future.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.array-merge-no-args">
   <title>Array merge functions without arguments</title>
   <para>
    <function>array_merge</function> and <function>array_merge_recursive</function>
    may now be called without any arguments, in which case they will return an empty array.
    This is useful in conjunction with the spread operator, e.g. <literal>array_merge(...$arrays)</literal>.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.proc-open">
   <title><function>proc_open</function> function</title>
   <para>
    <function>proc_open</function> now accepts an array instead of a
    string for the command. In this case the process will be opened
    directly (without going through a shell) and PHP will take care of
    any necessary argument escaping.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
proc_open(['php', '-r', 'echo "Hello World\n";'], $descriptors, $pipes);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    <function>proc_open</function> now supports
    <literal>redirect</literal> and <literal>null</literal> descriptors.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
// Like 2>&1 on the shell
proc_open($cmd, [1 => ['pipe', 'w'], 2 => ['redirect', 1]], $pipes);
// Like 2>/dev/null or 2>nul on the shell
proc_open($cmd, [1 => ['pipe', 'w'], 2 => ['null']], $pipes);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.sodium-argon-hash">
   <title>argon2i(d) without libargon</title>
   <para>
    <function>password_hash</function> now has the argon2i and argon2id implementations
    from the sodium extension when PHP is built without libargon.
   </para>
  </sect3>

 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
