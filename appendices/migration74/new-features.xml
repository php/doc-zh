<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 8d1a5d2d15df15cc5cbc7f96cdc083b8fe49366e Maintainer: avenger Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<sect1 xml:id="migration74.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>新特性</title>

 <sect2 xml:id="migration74.new-features.core">
  <title>PHP 核心中的新特性</title>

  <sect3 xml:id="migration74.new-features.core.typed-properties">
   <title>属性添加限定类型</title>

   <para>
    类的属性中现在支持添加指定的类型。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class User {
    public int $id;
    public string $name;
}
?>
]]>
     </programlisting>
    </informalexample>
    上面的例子中，会强制要求 <literal>$user->id</literal> 只能为 <type>int</type>
    类型，同时 <literal>$user->name</literal> 只能为 <type>string</type> 类型。
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.arrow-functions">
   <title>箭头函数</title>

   <para>
    <link linkend="functions.arrow">箭头函数</link> 提供了一种更简洁的定义函数的方法。

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$factor = 10;
$nums = array_map(fn($n) => $n * $factor, [1, 2, 3, 4]);
// $nums = array(10, 20, 30, 40);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.type-variance">
   <title>有限返回类型协变与参数类型逆变</title>

   <para>
    以下代码现在可以正常执行：
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class A {}
class B extends A {}

class Producer {
    public function method(): A {}
}
class ChildProducer extends Producer {
    public function method(): B {}
}
?>
]]>
     </programlisting>
    </informalexample>
    只有在使用自动加载的情况下，才会有完整的差异支持。在一个文件内，只有非循环类型引用是可能的，因为在引用之前，所有的类都需要可用。
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.null-coalescing-assignment-operator">
   <title>空合并运算符赋值</title>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$array['key'] ??= computeDefault();
// 等同于以下旧写法
if (!isset($array['key'])) {
    $array['key'] = computeDefault();
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.unpack-inside-array">
   <title>数组展开操作</title>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$parts = ['apple', 'pear'];
$fruits = ['banana', 'orange', ...$parts, 'watermelon'];
// ['banana', 'orange', 'apple', 'pear', 'watermelon'];
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.numeric-literal-separator">
   <title>数值文字分隔符</title>

   <para>
    数字文字可以在数字之间包含下划线。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
6.674_083e-11; // float
299_792_458;   // decimal
0xCAFE_F00D;   // hexadecimal
0b0101_1111;   // binary
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>
 
  <sect3 xml:id="migration74.new-features.core.weakreference">
   <title>弱引用</title>

   <para>
    <link linkend="class.weakreference">弱引用</link>允许程序员保留对对象的引用，但不会阻止销毁对象。
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.tostring-exceptions">
   <title>允许从 __toString() 抛出异常</title>

   <para>
    现在允许从 <link linkend="object.tostring">__toString()</link>
    抛出异常。之前的版本，将会导致一个致命错误。新版本中，之前发生致命错误的代码，已经被转换为
    <classname>Error</classname> 异常。
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration74.new-features.curl">
  <title>CURL</title>
  
  <para>
   如果扩展是使用 libcurl &gt;= 7.56.0 构建的，<classname>CURLFile</classname>
   现在除了支持普通文件名之外还支持流封装协议。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.filter">
  <title>Filter</title>
  
  <para>
   <constant>FILTER_VALIDATE_FLOAT</constant> 过滤器现在支持 <literal>min_range</literal>
   和 <literal>max_range</literal> 选项，其含义跟 <constant>FILTER_VALIDATE_INT</constant> 相同。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.ffi">
  <title>FFI</title>

  <para>
   FFI 是新扩展，提供了简单的方式去 C 库中调用原生函数、访问原生变量和创建和访问定义的数据结构。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.gd">
  <title>GD</title>

  <para>
   添加 <constant>IMG_FILTER_SCATTER</constant> 图片过滤器以将分散过滤器（scatter filter）应用于图片。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.hash">
  <title>Hash</title>

  <para>
   Added <literal>crc32c</literal> hash using Castagnoli's polynomial.
   This CRC32 variant is used by storage systems, such as
   iSCSI, SCTP, Btrfs and ext4.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.mbstring">
  <title>多字节字符串</title>

  <para>
   新增 <function>mb_str_split</function> 函数，提供了跟 <function>str_split</function>
   相同的行为，但是在代码点上操作，而不是字节。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.opcache">
  <title>OPcache</title>

  <para>
   新增 <link linkend="opcache.preloading">缓存预加载</link> 特性。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pcre">
  <title>正则表达式（兼容 Perl）</title>

  <para>
   <function>preg_replace_callback</function> 和 <function>preg_replace_callback_array</function>
   函数现在接受附加的 <parameter>flags</parameter> 参数，支持 <constant>PREG_OFFSET_CAPTURE</constant>
   和 <constant>PREG_UNMATCHED_AS_NULL</constant> flag。这会影响传递给回调函数的匹配数组的格式。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo">
  <title>PDO</title>

  <para>
   现在可以将用户名和密码指定为 mysql、mssql、sybase、dblib、firebird 和 oci 驱动程序的
   PDO DSN 的一部分。之前仅支持 pgsql 驱动程序。如果在构造函数和 DSN
   中都指定了，则优先使用构造函数中的用户名/密码。
  </para>
  <para>
   现在可以在 SQL 查询中转义问号，以避免解释为参数占位符。编写 <literal>??</literal>
   将会向数据库发送一个问号，例如使用 PostgreSQL JSON
   键中存在（<literal>?</literal>）运算符。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo_oci">
  <title>PDO_OCI</title>

  <para>
   <methodname>PDOStatement::getColumnMeta</methodname> 现在有效。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo_sqlite">
  <title>PDO_SQLite</title>

  <para>
   <literal>PDOStatement::getAttribute(PDO::SQLITE_ATTR_READONLY_STATEMENT)</literal>
   允许检查语句是否只读，例如，它是否修改数据库。
  </para>
  <para>
   <literal>PDO::setAttribute(PDO::SQLITE_ATTR_EXTENDED_RESULT_CODES, true)</literal>
   允许在 <function>PDO::errorInfo</function> 和 <function>PDOStatement::errorInfo</function>
   中使用 SQLite3 扩展结果代码。
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.sqlite3">
  <title>SQLite3</title>

  <para>
   Added <methodname>SQLite3::lastExtendedErrorCode</methodname>
   to fetch the last extended result code.
  </para>
  <para>
   Added <literal>SQLite3::enableExtendedResultCodes($enable = true)</literal>,
   which will make <methodname>SQLite3::lastErrorCode</methodname>
   return extended result codes.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.standard">
  <title>标准</title>

  <sect3 xml:id="migration74.new-features.standard.strip-tags">
   <title>带标签数组的 strip_tags()</title>
   <para>
    <function>strip_tags</function> 现在接受允许的标签数组：现在可以编写
    <literal>strip_tags($str, ['a', 'p'])</literal> 代替
    <literal>strip_tags($str, '&lt;a&gt;&lt;p&gt;')</literal>。
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.magic-serialize">
   <title>自定义对象序列化</title>
   <para>
    新增自定义对象序列化的新机制，使用两种新魔术方法：<literal>__serialize</literal>
    和 <literal>__unserialize</literal>。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
// 返回数组，包含对象所有必要的状态。
public function __serialize(): array;

// 从指定的数据数组中回复对象状态。
public function __unserialize(array $data): void;
?>
]]>
     </programlisting>
    </informalexample>
    新的序列化机制取代了 <interfacename>Serializable</interfacename> 接口，并且将会在未来弃用。
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.array-merge-no-args">
   <title>不带参数的数组合并函数</title>
   <para>
    现在可以不带任何参数调用 <function>array_merge</function> 和
    <function>array_merge_recursive</function>，此时会返回空数组。这跟展开运算符结合非常有用，比如
    <literal>array_merge(...$arrays)</literal>。
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.proc-open">
   <title><function>proc_open</function> 函数</title>
   <para>
    <function>proc_open</function> 现在接受数组而不是命令字符串。在这种情况下，会直接打开进程（无需通过
    shell），PHP 将会负责任何必要的参数转义。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
proc_open(['php', '-r', 'echo "Hello World\n";'], $descriptors, $pipes);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    <function>proc_open</function> 现在支持
    <literal>redirect</literal> 和 <literal>null</literal> 描述符。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
// Like 2>&1 on the shell
proc_open($cmd, [1 => ['pipe', 'w'], 2 => ['redirect', 1]], $pipes);
// Like 2>/dev/null or 2>nul on the shell
proc_open($cmd, [1 => ['pipe', 'w'], 2 => ['null']], $pipes);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.sodium-argon-hash">
   <title>argon2i(d) without libargon</title>
   <para>
    <function>password_hash</function> now has the argon2i and argon2id implementations
    from the sodium extension when PHP is built without libargon.
   </para>
  </sect3>

 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
