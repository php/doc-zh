<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d987f5fea44af3e2b2740bebc9700903cdfcf1f6 Maintainer: jhdxr Status: ready -->
<!-- CREDITS: mowangjuanzi, Luffy -->
<sect1 xml:id="migration71.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>新特性</title>

 <sect2 xml:id="migration71.new-features.nullable-types">
  <title>可为空（Nullable）类型</title>

  <para>
   参数以及返回值的类型现在可以通过在类型前加上一个问号使之允许为空。
   当启用这个特性时，传入的参数或者函数返回的结果要么是给定的类型，要么是
   <type>null</type> 。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function testReturnA(): ?string
{
    return 'elePHPant';
}

var_dump(testReturnA());

function testReturnB(): ?string
{
    return null;
}

var_dump(testReturnB());

function test(?string $name)
{
    var_dump($name);
}

test('elePHPant');
test(null);
test();
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(9) "elePHPant"
NULL
string(9) "elePHPant"
NULL
Fatal error: Uncaught ArgumentCountError: Too few arguments to function test(), 0 passed in...
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.void-functions">
  <title>Void 函数</title>

  <para>
   一个新的返回值类型 <type>void</type> 被引入。返回值声明为 void
   类型的方法要么干脆省去 return 语句，要么使用一个空的 return 语句。 对于
   void 函数来说，&null; 不是一个合法的返回值。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function swap(&$left, &$right) : void
{
    if ($left === $right) {
        return;
    }

    $tmp = $left;
    $left = $right;
    $right = $tmp;
}

$a = 1;
$b = 2;
var_dump(swap($a, $b), $a, $b);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
null
int(2)
int(1)
]]>
   </screen>
  </informalexample>

  <para>
   试图去获取一个 void 方法的返回值会得到 &null; ，并且不会产生任何警告。这么做的原因是不想影响更高层次的方法。
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.symmetric-array-destructuring">
  <title>对称（Symmetric）数组解构</title>

  <para>
   短数组语法（<literal>[]</literal>）现在作为 <function>list</function> 语法的一个备选项，可以用于将数组的值赋给一些变量（包括在 <literal>foreach</literal> 中）。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$data = [
    [1, 'Tom'],
    [2, 'Fred'],
];

// list() style
list($id1, $name1) = $data[0];

// [] style
[$id1, $name1] = $data[0];

// list() style
foreach ($data as list($id, $name)) {
    // logic here with $id and $name
}

// [] style
foreach ($data as [$id, $name]) {
    // logic here with $id and $name
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.class-constant-visibility">
  <title>类常量可见性</title>

  <para>
   现在起支持设置类常量的可见性。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class ConstDemo
{
    const PUBLIC_CONST_A = 1;
    public const PUBLIC_CONST_B = 2;
    protected const PROTECTED_CONST = 3;
    private const PRIVATE_CONST = 4;
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.iterable-pseudo-type">
  <title><type>iterable</type> 伪类</title>

  <para>
   现在引入了一个新的被称为 <type>iterable</type> 的伪类 (与 <type>callable</type> 类似)。
   这可以被用在参数或者返回值类型中，它代表接受数组或者实现了 <classname>Traversable</classname> 接口的对象。
   至于子类，当用作参数时，子类可以收紧父类的 <type>iterable</type> 类型到 <type>array</type>
   或一个实现了 <classname>Traversable</classname> 的对象。对于返回值，子类可以拓宽父类的
   <type>array</type> 或对象返回值类型到 <type>iterable</type>。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function iterator(iterable $iter)
{
    foreach ($iter as $val) {
        //
    }
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.mulit-catch-exception-handling">
  <title>多异常捕获处理</title>

  <para>
   一个catch语句块现在可以通过管道字符（<literal>|</literal>）来实现多个异常的捕获。
   这对于需要同时处理来自不同类的不同异常时很有用。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
try {
    // some code
} catch (FirstException | SecondException $e) {
    // handle first and second exceptions
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-keys-in-list">
  <title><function>list</function> 现在支持键名</title>

  <para>
   现在 <function>list</function> 和它的新的 <literal>[]</literal> 语法支持在它内部去指定键名。这意味着它可以将任意类型的数组
   都赋值给一些变量（与短数组语法类似）
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$data = [
    ["id" => 1, "name" => 'Tom'],
    ["id" => 2, "name" => 'Fred'],
];

// list() style
list("id" => $id1, "name" => $name1) = $data[0];

// [] style
["id" => $id1, "name" => $name1] = $data[0];

// list() style
foreach ($data as list("id" => $id, "name" => $name)) {
    // logic here with $id and $name
}

// [] style
foreach ($data as ["id" => $id, "name" => $name]) {
    // logic here with $id and $name
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-negative-string-offsets">
  <title>支持为负的字符串偏移量</title>

  <para>
   现在所有支持偏移量的<link
   linkend="book.strings">字符串操作函数</link>都支持接受负数作为偏移量，包括通过 <literal>[]</literal>
   或 <literal>{}</literal> 操作<link linkend="language.types.string.substr">字符串下标</link>。在这种情况下，一个负数的偏移量会被理解为一个从字符串结尾开始的偏移量。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump("abcdef"[-2]);
var_dump(strpos("aabbcc", "b", -3));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string (1) "e"
int(3)
]]>
   </screen>
  </informalexample>

  <para>
   在字符串的简单变量解析语法中，现在也支持字符串和数组的负偏移量。
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$string = 'bar';
echo "The last character of '$string' is '$string[-1]'.\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
The last character of 'bar' is 'r'.
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-aead-in-ext-openssl">
  <title>ext/openssl 支持 AEAD</title>

  <para>
   通过给 <function>openssl_encrypt</function> 和 <function>openssl_decrypt</function>
   添加额外参数，现在支持了 AEAD（模式 GCM 和 CCM）。
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.convert-callables-to-closures">
  <title>通过 <methodname>Closure::fromCallable</methodname> 将 callables 转为闭包</title>

  <para>
   <classname>Closure</classname> 新增了一个静态方法，用于将 <type>callable</type> 快速地
   转为 <classname>Closure</classname> 对象。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class Test
{
    public function exposeFunction()
    {
        return Closure::fromCallable([$this, 'privateFunction']);
    }

    private function privateFunction($param)
    {
        var_dump($param);
    }
}

$privFunc = (new Test)->exposeFunction();
$privFunc('some value');
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(10) "some value"
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.asynchronous-signal-handling">
  <title>异步信号处理</title>

  <para>
   一个新的名为 <function>pcntl_async_signals</function> 的方法现在被引入，
   用于启用无需 ticks（这会带来很多额外的开销）的异步信号处理。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
pcntl_async_signals(true); // 打开异步信号

pcntl_signal(SIGHUP,  function($sig) {
    echo "SIGHUP\n";
});

posix_kill(posix_getpid(), SIGHUP);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
SIGHUP
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.http2-server-push-support-in-ext-curl">
  <title>在 ext/curl 中支持 HTTP/2 服务器推送</title>

  <para>
   对服务器推送的支持现在已经被加入到 CURL 扩展中（需要版本 7.46 或更高）。这个可以通过
   <function>curl_multi_setopt</function> 函数与新的常量
   <constant>CURLMOPT_PUSHFUNCTION</constant> 来进行调节。常量
   <constant>CURL_PUST_OK</constant> 和 <constant>CURL_PUSH_DENY</constant> 也已经被添加进来，以便服务器推送的回调函数来表明自己会同意或拒绝处理。
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.stream-context-options">
  <title>套接字上下文选项</title>

  <para>
   新增 <link linkend="context.socket.tcp_nodelay">tcp_nodelay</link> 选项。
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
