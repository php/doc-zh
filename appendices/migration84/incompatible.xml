<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e8ac70bf549a723cb36465667a6109d9933b8619 Maintainer: mowangjuanzi Status: ready -->
<!-- CREDITS: Luffy -->
<sect1 xml:id="migration84.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>不向后兼容的变更</title>

 <simpara>
  尽管本节没有明确说明，但每个新<link linkend="migration84.new-functions">函数</link>、<link
  linkend="migration84.new-classes">类、interface、枚举</link>或<link
  linkend="migration84.constants">常量</link>都可能导致抛出重复声明
  <exceptionname>Error</exceptionname>。
 </simpara>

 <sect2 xml:id="migration84.incompatible.core">
  <title>PHP 核心</title>

  <!-- RFC: https://wiki.php.net/rfc/exit-as-function -->
  <sect3 xml:id="migration84.incompatible.core.exit">
   <title><function>exit</function> 行为变更</title>

   <simpara>
    <function>exit</function>（和 <function>die</function>）语言结构现在的行为更像函数。这意味着现在可以传递
    <type>callable</type>，受 <literal>strict_types</literal> 声明语句的影响，并且现在执行往常的类型强制，而不是将任何非整数值转换为字符串。
   </simpara>

   <simpara>
    因此，将无效类型传递给 <function>exit</function> 和 <function>die</function> 现在会导致抛出 <exceptionname>TypeError</exceptionname>。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.core.recursion-comparison">
   <title>比较过程中的递归</title>

   <simpara>
    比较期间遇到递归现在会导致 <exceptionname>Error</exceptionname> 异常，而不是 <constant>E_ERROR</constant> 致命错误。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.core.readonly-indirect-modification">
   <title>间接修改 readonly 属性</title>

   <!-- TODO Link to clone magic method, and explain this better as UPGRADING is... -->
   <simpara>
    不再允许在 <code>__clone()</code> 里间接修改 readonly 属性，例如 <code>$ref = &amp;$this->readonly</code>。这在 readonly
    初始化中已禁止，并且是“克隆期间 readlony 重新初始化”实现中的一个疏忽。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.core.constant-type-change">
   <title>常量的类型变更</title>

   <simpara>
    <constant>PHP_DEBUG</constant> 和 <constant>PHP_ZTS</constant> 常量现在为 <type>bool</type> 类型。以前为 <type>int</type> 类型。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.core.tempnam-length">
   <title>Temporary 文件名长度</title>

   <simpara>
    上传文件和 <function>tempnam</function> 函数创建的文件名现在为 13 个字节。总长度仍取决于平台。
   </simpara>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/deprecations_php_8_4#remove_e_strict_error_level_and_deprecate_e_strict_constant -->
  <sect3 xml:id="migration84.incompatible.core.e-strict">
   <title>移除 <constant>E_STRICT</constant> 错误级别</title>

   <simpara>
    已移除 <constant>E_STRICT</constant> 错误级别，因为其在 PHP 引擎中不再使用。已弃用 <constant>E_STRICT</constant> 常量。
   </simpara>
  </sect3>
 </sect2>

 <sect2 xml:id="migration84.incompatible.typed-constants">
  <title>扩展类常量现已类型化</title>

  <para>
   以下扩展类常量现在在其常量上声明类型：
   <simplelist>
    <member><link linkend="book.datetime">Date</link></member>
    <member><link linkend="book.intl">Intl</link></member>
    <member><link linkend="book.pdo">PDO</link></member>
    <member><link linkend="book.reflection">Reflection</link></member>
    <member><link linkend="book.spl">SPL</link></member>
    <member><link linkend="book.sqlite3">Sqlite</link></member>
    <member><link linkend="book.xmlreader">XMLReader</link></member>
   </simplelist>
  </para>
 </sect2>

 <!-- TODO: Check resource names -->
 <sect2 xml:id="migration84.incompatible.resource2object">
  <title>迁移资源到对象</title>

  <simpara>
   多个 &resource; 已迁移到 &object;。除非另有说明，否则 <function>is_resource</function>
   的返回值检查应替换为 &false; 检查。
  </simpara>

  <sect3 xml:id="migration84.incompatible.resource2object.dba">
   <title>DBA</title>

   <simpara>
    <link linkend="book.dba">DBA</link> 函数现在接受并返回
    <classname>Dba\Connection</classname> 对象，而不是
    <literal>dba_connection</literal> &resource;。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.resource2object.odbc">
   <title>ODBC</title>

   <simpara>
    <link linkend="book.uodbc">ODBC</link> 函数现在接受并返回
    <classname>Odbc\Result</classname> 对象，而不是
    <literal>odbc_result</literal> &resource;。
   </simpara>

   <simpara>
    <link linkend="book.uodbc">ODBC</link> 函数现在接受并返回
    <classname>Odbc\Connection</classname> 对象，而不是
    <literal>odbc_connection</literal> &resource;。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.resource2object.soap">
   <title>SOAP</title>

   <simpara>
    <property>SoapClient::$httpurl</property> 属性现在是
    <classname>Soap\Url</classname> 对象，而不是
    <literal>soap_url</literal> &resource;。
    检查使用 <function>is_resource</function>（即
    <code>is_resource($client->httpurl)</code>）应该替换为检查
    是否为 &null;（即 <code>$client->httpurl !== null</code>）。
   </simpara>
   <simpara>
    <property>SoapClient::$sdl</property> 属性现在是
    <classname>Soap\Sdl</classname> 对象，而不是
    <literal>soap_sdl</literal> &resource;。
    检查使用 <function>is_resource</function>（即
    <code>is_resource($client->sdl)</code>）应该替换为检查
    是否为 &null;（即 <code>$client->sdl !== null</code>）。
   </simpara>
  </sect3>
 </sect2>

 <sect2 xml:id="migration84.incompatible.new-warnings-exceptions">
  <title>新的警告和异常</title>

  <simpara>
   添加了因编程错误（即将无效值提供给参数）而触发新的警告和异常。
  </simpara>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.curl">
   <title>Curl</title>

   <simpara>
    如果 <parameter>timeout</parameter> 参数小于 <literal>0</literal> 或大于
    <constant>PHP_INT_MAX</constant>，<function>curl_multi_select</function>
    现在会抛出 <exceptionname>ValueError</exceptionname>。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.gd">
   <title>Gd</title>

   <para>
    当传入无效的 <parameter>quality</parameter>
    时，<simplelist type="inline">
     <member><function>imagejpeg</function></member>
     <member><function>imagewebp</function></member>
     <member><function>imagepng</function></member>
     <member><function>imageavif</function></member>
    </simplelist>
    现在抛出 <exceptionname>ValueError</exceptionname>。
   </para>

   <simpara>
    当传递无效的 <parameter>speed</parameter> 参数值时，<function>imageavif</function>
    现在将抛出 <exceptionname>ValueError</exceptionname>。
   </simpara>

   <simpara>
    如果 <parameter>width</parameter> 或 <parameter>height</parameter>
    参数溢出，<function>imagescale</function> 现在将抛出 <exceptionname>ValueError</exceptionname>。
   </simpara>

   <simpara>
    当传入无效的 <parameter>mode</parameter> 参数时，<function>imagescale</function>
    现在将抛出 <exceptionname>ValueError</exceptionname>。
   </simpara>

   <simpara>
    如果 <parameter>sub</parameter> 或 <parameter>plus</parameter>
    参数溢出，<function>imagefilter</function> 现在使用 <constant>IMG_FILTER_SCATTER</constant>
    过滤器将抛出 <exceptionname>ValueError</exceptionname>。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.gettext">
   <title>Gettext</title>

   <para>
    如果 <parameter>domain</parameter> 是空字符串，<simplelist type="inline">
     <member><function>bind_textdomain_codeset</function></member>
     <member><function>textdomain</function></member>
     <member><function>d<replaceable>*</replaceable>gettext</function></member>
    </simplelist> 现在 抛出 <exceptionname>ValueError</exceptionname>。
   </para>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.intl">
   <title>Intl</title>

   <para>
    <function>resourcebundle_get</function>、<methodname>ResourceBundle::get</methodname>
    和在 <classname>ResourceBundle</classname> 对象上访问偏移量现在会抛出：
    <simplelist>
     <member>
      无效偏移类型的 <exceptionname>TypeError</exceptionname>
     </member>
     <member>
      空 &string; 的 <exceptionname>ValueError</exceptionname>
     </member>
     <member>
      如果整数索引不符合有符号的 32 位整数，则 <exceptionname>ValueError</exceptionname>
     </member>
    </simplelist>
   </para>

   <simpara>
    如果 <parameter>locale</parameter> 无效，则
    <methodname>IntlDateFormatter::__construct</methodname> 抛出
    <exceptionname>ValueError</exceptionname>。
   </simpara>

   <simpara>
    如果 <parameter>locale</parameter> 无效，则
    <methodname>NumberFormatter::__construct</methodname> 抛出
    <exceptionname>ValueError</exceptionname>。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.mbstring">
   <title>MBString</title>

   <simpara>
    <function>mb_encode_numericentity</function> 和
    <function>mb_decode_numericentity</function> 现在检测
    <parameter>map</parameter> 是否仅由 &integer;
    构成，如果不是，则抛出 <exceptionname>ValueError</exceptionname>。
   </simpara>

   <simpara>
    如果 <parameter>type</parameter> 无效，<function>mb_http_input</function>
    现在始终抛出 <exceptionname>ValueError</exceptionname>。
   </simpara>

   <simpara>
    <function>mb_http_output</function> 现在检测
    <parameter>encoding</parameter> 是不是不包含 null 字节，如果包含，会抛出
    <exceptionname>ValueError</exceptionname>。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.odbc">
   <title>ODBC</title>

   <simpara>
    当 <parameter>row</parameter> 小于或等于 <literal>0</literal>
    时，<function>odbc_fetch_row</function> 返回 &false;。在这种情况下会发出 warning。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.pcntl">
   <title>PCNTL</title>

   <para>
    <function>pcntl_sigprocmask</function>、<function>pcntl_sigwaitinfo</function> 和
    <function>pcntl_sigtimedwait</function> 函数现在会抛出：
    <simplelist>
     <member>
      如果 <parameter>signals</parameter> 数组为空，则抛出 <exceptionname>ValueError</exceptionname>（如果
      <parameter>mode</parameter> <constant>SIG_SETMASK</constant> 则
      <function>pcntl_sigprocmask</function> 除外）
     </member>
     <member>
      如果 <parameter>signals</parameter> 数组的值不是 &integer;，则抛出 <exceptionname>TypeError</exceptionname>
     </member>
     <member>
      如果 <parameter>signals</parameter> 数组不是有效的信号编号，则抛出 <exceptionname>ValueError</exceptionname>
     </member>
    </simplelist>
   </para>

   <simpara>
    如果 <parameter>mode</parameter> 不是 <constant>SIG_BLOCK</constant>、<constant>SIG_UNBLOCK</constant>
    或 <constant>SIG_SETMASK</constant> 中的一个，<function>pcntl_sigprocmask</function>
    现在将抛出 <exceptionname>ValueError</exceptionname>。
   </simpara>

   <para>
    <function>pcntl_sigtimedwait</function> 函数现在将抛出：
    <simplelist>
     <member>
      如果 <parameter>seconds</parameter> 小于 <literal>0</literal> 则抛出 <exceptionname>ValueError</exceptionname>
     </member>
     <member>
      如果 <parameter>nanoseconds</parameter> 小于 <literal>0</literal> 或者大于
      <literal>1e9</literal>，则抛出 <exceptionname>ValueError</exceptionname>
     </member>
     <member>
      如果 <parameter>seconds</parameter> 和 <parameter>nanoseconds</parameter>
      是 <literal>0</literal>，则抛出 <exceptionname>ValueError</exceptionname>
     </member>
    </simplelist>
   </para>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.session">
   <title>Session</title>

   <simpara>
    设置一个非正值的 <link linkend="ini.session.gc-divisor">session.gc_divisor</link>
    或者一个负值的 <link linkend="ini.session.gc-probability">session.gc_probability</link>
    现在会发出警告。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.simplexml">
   <title>SimpleXML</title>

   <simpara>
    使用非 XML 对象调用 <function>simplexml_import_dom</function> 将抛出
    <exceptionname>TypeError</exceptionname> 而不是 <exceptionname>ValueError</exceptionname>
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.standard">
   <title>标准</title>

   <simpara>
    <function>round</function> 函数现在会验证 <parameter>mode</parameter>
    的值，如果无效，则抛出 <exceptionname>ValueError</exceptionname>。之前无效模式会解释为 <constant>PHP_ROUND_HALF_UP</constant>。
   </simpara>

   <simpara>
    当 <parameter>separator</parameter> 和 <parameter>enclosure</parameter> 参数值的长度不为一个字节，或者
    <parameter>escape</parameter> 参数值不为一个字节或者空字符串，<function>str_getcsv</function> 现在将抛出
    <exceptionname>ValueError</exceptionname>。该行为已与 <function>fputcsv</function> 和
    <function>fgetcsv</function> 行为相同。
   </simpara>

   <simpara>
    如果 <parameter>mode</parameter> 无效，<function>php_uname</function>
    函数现在会抛出 <exceptionname>ValueError</exceptionname>。
   </simpara>

   <simpara>
    <function>unserialize</function> 的 <literal>"allowed_classes"</literal>
    选项如果不是类名 <type>array</type>，现在会抛出 <exceptionname>TypeError</exceptionname>
    和 <exceptionname>ValueError</exceptionname>。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.xmlreader">
   <title>XMLReader</title>

   <simpara>
    传递无效的字符编码给 <methodname>XMLReader::open</methodname> 或 <methodname>XMLReader::XML</methodname>
    现在会引发 <exceptionname>ValueError</exceptionname>。
   </simpara>

   <simpara>
    传递包含 null 字节的 &string;，之前会发出 warning，现在会引发 <exceptionname>ValueError</exceptionname>。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.xmlwriter">
   <title>XMLWriter</title>

   <simpara>
    传递包含 null 字节的 &string;，之前会发出 warning，现在会引发 <exceptionname>ValueError</exceptionname>。
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.xsl">
   <title>XSL</title>

   <simpara>
    <methodname>XSLTProcessor::setParameter</methodname> 现在会在参数包含 null 字节时抛出
    <exceptionname>ValueError</exceptionname>。这实际上从一开始就没有正确运行过，这就是它现在抛出异常的原因。
   </simpara>

   <simpara>
    现在，使用非 XML 对象调用 <methodname>XSLTProcessor::importStyleSheet</methodname> 会引发
    <exceptionname>TypeError</exceptionname> 而不是 <exceptionname>ValueError</exceptionname>。
   </simpara>

   <!-- RFC: https://wiki.php.net/rfc/improve_callbacks_dom_and_xsl -->
   <simpara>
    如果在求值期间调用 PHP 函数回调失败，则现在会抛出而不是发出 warning。
   </simpara>
  </sect3>
 </sect2>

 <sect2 xml:id="migration84.incompatible.dom">
  <title>DOM</title>

  <simpara>
   如果无法分配新节点，某些 DOM 方法以前会返回 &false; 或带有 code <constant>DOM_PHP_ERR</constant> 的
   <exceptionname>DOMException</exceptionname>。现在，它们会一致地抛出带有 code <constant>DOM_INVALID_STATE_ERR</constant>
   的 <exceptionname>DOMException</exceptionname>。这种情况极少发生，受影响的可能性也很低。因此，<methodname>DOMImplementation::createDocument</methodname>
   现在暂定返回类型为 <classname>DOMDocument</classname>，而不是 <code>DOMDocument|false</code>。
  </simpara>

  <simpara>
   以前，可以克隆 <classname>DOMXPath</classname> 对象，但会导致对象不可用。现在则不可以，克隆
   <classname>DOMXPath</classname> 对象会引发 <exceptionname>Error</exceptionname>。
  </simpara>

  <!-- RFC: https://wiki.php.net/rfc/deprecations_php_8_4#remove_domimplementationgetfeature_feature_version -->
  <simpara>
   已移除 <methodname>DOMImplementation::getFeature</methodname> 方法。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.gmp">
  <title>GMP</title>

  <!-- RFC: https://wiki.php.net/rfc/gmp-final -->
  <simpara>
   <classname>GMP</classname> 类现在是 final，并且再也不能继承。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.mbstring">
  <title>MBString</title>

  <simpara>
   对于无效字符串（包含编码错误），<function>mb_substr</function> 现在以与大多数其他 mbstring
   函数相同的方式解释字符索引。这意味着 <function>mb_strpos</function> 返回的字符索引可以传递给
   <function>mb_substr</function>。
  </simpara>

  <simpara>
   对于 SJIS-Mac (MacJapanese) 字符串，传递给 <function>mb_substr</function> 的字符索引现在指向的是将字符串转换为
   Unicode 时生成的 Unicode 码点的索引。这很重要，因为大约 40 个 SJIS-Mac 字符在转换为 Unicode
   时会变成多个 Unicode 代码点的序列。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.mysqli">
  <title>MySQLi</title>

  <simpara>
   已移除未使用和未记录的常量 <constant>MYSQLI_SET_CHARSET_DIR</constant>。
  </simpara>

  <simpara>
   已移除 <constant>MYSQLI_STMT_ATTR_PREFETCH_ROWS</constant> 常量。mysqlnd 无法使用该功能。
  </simpara>

  <simpara>
   已移除 <constant>MYSQLI_CURSOR_TYPE_FOR_UPDATE</constant> 和 <constant>MYSQLI_CURSOR_TYPE_SCROLLABLE</constant>
   常量。此功能从未实现过，无论是 mysqlnd 还是 libmysql。
  </simpara>

  <simpara>
   已移除未使用的 <constant>MYSQLI_TYPE_INTERVAL</constant> 常量（当前是 <constant>MYSQLI_TYPE_ENUM</constant> 的存根（stub）和别名）。
   <!-- There are no
  plans to add such data type to MySQL yet, so it's unclear what its value
  would finally be. -->
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.mysqlnd">
  <title>MySQLnd</title>

  <simpara>
   对于 MySQL 服务器 8.0.24 及以上版本，MySQL 服务器等待超时报告的错误 code 已从 <literal>2006</literal> 更改为 <literal>4031</literal>。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.opcache">
  <title>Opcache</title>

  <simpara>
   64 位架构上 <link linkend="ini.opcache.interned-strings-buffer">opcache.interned_strings_buffer</link>
   设置的最大值现在是 <literal>32767</literal>。以前是 <literal>4095</literal>。
  </simpara>

  <sect3>
   <title>JIT</title>

   <simpara>
    JIT 的默认配置值分别从 <link linkend="ini.opcache.jit"><literal>opcache.jit=tracing</literal></link> 和 <link
    linkend="ini.opcache.jit-buffer-size"><literal>opcache.jit_buffer_size=0</literal></link> 更改为 <link
    linkend="ini.opcache.jit"><literal>opcache.jit=disable</literal></link> 和 <link
    linkend="ini.opcache.jit-buffer-size"><literal>opcache.jit_buffer_size=64M</literal></link>。
   </simpara>

   <simpara>
    这不会影响默认的可观察行为，因为默认情况下 JIT 仍处于禁用状态。但是，现在是通过 <link linkend="ini.opcache.jit">opcache.jit</link>
    设置而不是 <link linkend="ini.opcache.jit-buffer-size">opcache.jit_buffer_size</link> 禁用。这可能会影响之前仅通过 <link
    linkend="ini.opcache.jit-buffer-size">opcache.jit_buffer_size</link> 启用 JIT 的用户，而无需使用 <link
    linkend="ini.opcache.jit">opcache.jit</link> 指定 JIT 模式。要启用 JIT 编译，请相应地设置 <link
    linkend="ini.opcache.jit">opcache.jit</link> 配置值。
   </simpara>

   <simpara>
    如果启用了 <acronym>JIT</acronym> 编译，当 <acronym>JIT</acronym> 编译器的初始化因任何原因而失败时，<acronym>PHP</acronym>
    将在启动时退出并出现致命错误。
   </simpara>
  </sect3>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pcntl">
  <title>PCNTL</title>

  <simpara>
   <function>pcntl_sigprocmask</function>、<function>pcntl_sigwaitinfo</function> 和
   <function>pcntl_sigtimedwait</function> 函数现在在失败时始终返回 &false;。以前在某些情况下，它可能返回值 <literal>-1</literal>。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pcre">
  <title>PCRE</title>

  <simpara>
   捆绑的 pcre2lib 已更新至版本 10.44。因此，这意味着 <literal>{,3}</literal> 现在识别为量词而不是文本。此外，UCP
   模式下某些字符类的含义已发生改变。请参阅 <link xlink:href="&url.pcre2.changelog;">PCRE2
   变更日志</link>，了解完整的变更日志。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pdo-dblib">
  <title>PDO_DBLIB</title>

  <simpara>
   <constant>Pdo\Dblib::ATTR_STRINGIFY_UNIQUEIDENTIFIER</constant> 和 <constant>Pdo\Dblib::ATTR_DATETIME_CONVERT</constant>
   属性现在是 bool 属性，而不是 int 属性。因此，通过 <methodname>PDO::setAttribute</methodname> 设置属性并通过
   <methodname>PDO::getAttribute</methodname> 检索属性并返回 <type>bool</type> 值。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pdo-firebird">
  <title>PDO_FIREBIRD</title>

  <simpara>
   <constant>PDO::ATTR_AUTOCOMMIT</constant> 属性现在是 bool 属性，而不是 int 属性。因此，通过 <methodname>PDO::setAttribute</methodname>
   设置属性并通过 <methodname>PDO::getAttribute</methodname> 检索属性并返回 <type>bool</type> 值。
  </simpara>

  <simpara>
   该扩展现在公开了一些 Firebird C++ API，因此编译此扩展现在需要 C++ 编译器。此外，现在必须针对 fbclient 3.0 或更高版本编译该扩展。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pdo-mysql">
  <title>PDO_MYSQL</title>

  <simpara>
   <constant>PDO::ATTR_AUTOCOMMIT</constant>、<constant>PDO::ATTR_EMULATE_PREPARES</constant> 和
   <constant>PDO::MYSQL_ATTR_DIRECT_QUERY</constant> 属性现在是 bool 属性，而不是 int 属性。因此，通过
   <methodname>PDO::setAttribute</methodname> 设置属性并通过 <methodname>PDO::getAttribute</methodname>
   检索属性并返回 <type>bool</type> 值。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pdo-pgsql">
  <title>PDO_PGSQL</title>

  <simpara>
   DSN 的凭证在设置时优先于 PDO 构造方法中的凭证，更接近文档状态。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.simplexml">
  <title>SimpleXML</title>

  <simpara>
   <classname>SimpleXMLElement</classname> 不仅是 XML 元素的表示，而且还是 <classname>RecursiveIterator</classname>。在 PHP 8.4.0
   之前，它的某些方法（例如 <methodname>SimpleXMLElement::asXML</methodname> 或
   <methodname>SimpleXMLElement::getName</methodname>）以及将此类实例转换 &string; 会隐式重置迭代器。
  </simpara>
  <para>
   这可能会导致意外的无限循环，因为已倒回迭代器。例如：
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php

$xmlString = "<root><a><b>1</b><b>2</b><b>3</b></a></root>";
$xml = simplexml_load_string($xmlString);

$nodes = $xml->a->b;
foreach ($nodes as $nodeData) {
    echo "nodeData: " . $nodeData . "\n";

    $xml = $nodes->asXml();
}

]]>
    </programlisting>
    <simpara>
     会导致无限循环。
    </simpara>
    <screen>
<![CDATA[
nodeData: 1
nodeData: 2
nodeData: 2
nodeData: 2
nodeData: 2
nodeData: 2
nodeData: 2
// ...
]]>
    </screen>
    <simpara>
     但是，此行为现已得到纠正，除非明确倒回，否则 <classname>SimpleXMLElement</classname> 将不再隐式重置迭代器数据。这意味着前面的示例现在将导致：
    </simpara>
    <screen>
<![CDATA[
nodeData: 1
nodeData: 2
nodeData: 3
]]>
    </screen>
   </informalexample>
  </para>
  <!-- This is no longer the case as a consequence of the bugfixes for GH-12192,GH-12208, #55098. -->
 </sect2>

 <sect2 xml:id="migration84.incompatible.soap">
  <title>SOAP</title>

  <simpara>
   <property>SoapClient::$typemap</property> 现在是 <type>array</type>，而不是 <type>resource</type>。使用
   <function>is_resource</function> 检查（即 <code>is_resource($client->typemap)</code>）应替换为对 &null;
   的检查（即 <code>$client->typemap !== null</code>）。
  </simpara>

  <simpara>
   SOAP 扩展获得了对 <link linkend="book.session">session</link> 扩展的可选依赖。如果在编译 PHP 时未使用 session
   扩展，并且启用了 <option>--enable-rtld-now</option> 配置 flag，则如果还使用了 <link linkend="book.soap">SOAP</link>
   扩展，则将发生启动错误。要解决此问题，请不要使用 rtld-now 或加载 session 扩展。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.standard">
  <title>标准</title>

  <simpara>
   当使用 <function>strcspn</function> 并将 <parameter>characters</parameter>
   设为空字符串时，现在将返回字符串的长度，而不是错误地停止在第一个 null 字节处。
   <!-- See GH-12592 -->
  </simpara>

  <simpara>
   <function>http_build_query</function> 现在可以正确处理支持的枚举。
  </simpara>

  <!-- RFC: https://wiki.php.net/rfc/dedicated_stream_bucket -->
  <simpara>
   <function>stream_bucket_make_writeable</function> 和 <function>stream_bucket_new</function>
   现在将返回 <classname>StreamBucket</classname> 实例而不是 <classname>stdClass</classname> 实例。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.tidy">
  <title>Tidy</title>

  <simpara>
   构造方法失败现在会引发 exception，而不是发出 warning 并导致对象损坏。
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.xml">
  <title>XML</title>

  <simpara>
   <function>xml_set_<replaceable>*</replaceable>_handler</function> 函数现在声明并检查 <parameter>handler</parameter>
   参数的 <type class="union"><type>callable</type><type>string</type><type>null</type></type> 有效签名。此外，现在检查与使用
   <function>xml_set_object</function> 设置的对象方法名称相对应的 <type>string</type> 类型的值，以查看该方法是否存在于先前传递的对象的类中。这意味着现在必须始终在将方法名称设置为
   <type>callable</type> 之前调用 <function>xml_set_object</function>。传递空字符串来禁用处理程序仍然是允许的，但已弃用。
  </simpara>

  <simpara>
   然而，由于 <function>xml_set_object</function> 和传递非 <type>callable</type> 的字符串已弃用。建议使用直接引用该方法的 <type>callable</type> 来更改此类实例。
  </simpara>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
