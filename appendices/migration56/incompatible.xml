<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: b67451f6fb5aa8602d88fb8680c581f79b76655c Maintainer: yuanyuqiang Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="migration56.incompatible">
 <title>向后不兼容</title>
 <simpara>
  虽然大部分 PHP 5 的代码无需修改即可正常运行，但是有部分代码是无法向后兼容的：
 </simpara>

 <sect2 xml:id="migration56.incompatible.array-keys">
  <title>使用数组标识符为类定义数组类型的属性时，数组的键不会被覆盖</title>

  <para>
   在 PHP 5.6 之前的版本中，为类定义数组类型的属性时，如果数组中同时使用了显式数组键和隐式数组键，并且显式的键和隐式的序列键相同，那么数组的键将被覆盖。例如：
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class C {
    const ONE = 1;
    public $array = [
        self::ONE => 'foo',
        'bar',
        'quux',
    ];
}

var_dump((new C)->array);
?>
]]>
   </programlisting>
   &example.outputs.55;
   <screen>
<![CDATA[
array(2) {
  [0]=>
  string(3) "bar"
  [1]=>
  string(4) "quux"
}

]]>
   </screen>
   &example.outputs.56;
   <screen>
<![CDATA[
array(3) {
  [1]=>
  string(3) "foo"
  [2]=>
  string(3) "bar"
  [3]=>
  string(4) "quux"
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.incompatible.json-decode">
  <title>严格的 <function>json_decode</function></title>

  <para>
   对于 JSON 字面量 <literal>true</literal>，<literal>false</literal> 和
   <literal>null</literal>，如果不采用小写格式，将会被 <function>json_decode</function>
   函数拒绝，同时相应的设置 <function>json_last_error</function>。在之前的版本中，<function>json_decode</function>
   函数可以接受这些字面量的全部大写或者大小写混写的格式。
  </para>

  <para>
   此变更仅会影响传入到 <function>json_decode</function> 
   中的 JSON 格式无效的情况，有效的 JSON 输入不会受到影响并且能够正确解析。
  </para>
 </sect2>

 <sect2 xml:id="migration56.incompatible.peer-verification">
  <title>当使用 SSL/TLS 的时候，流封装器默认验证端点证书和主机名</title>

  &migration56.openssl.peer-verification;
 </sect2>

 <sect2 xml:id="migration56.incompatible.gmp">
  <title><link linkend="book.gmp">GMP</link> 资源现为对象</title>

  <para>
   <link linkend="book.gmp">GMP</link> 资源现为对象。GMP 扩展中的基于函数的 API
   实现不受影响，只有在代码中使用 <function>is_resource</function>
   或类似函数来显示检测是否资源类型的代码才会受到影响。
  </para>
 </sect2>

 <sect2 xml:id="migration56.incompatible.mcrypt">
  <title><link linkend="book.mcrypt">Mcrypt</link> 函数需要有效长度的密钥和初始向量</title>

  <para>
   <function>mcrypt_encrypt</function>、<function>mcrypt_decrypt</function>、<function>mcrypt_cbc</function>、<function>mcrypt_cfb</function>、<function>mcrypt_ecb</function>、<function>mcrypt_generic</function>
   以及 <function>mcrypt_ofb</function> 函数不再接受无效长度的密钥和初始向量，对于需要初始向量的分组加密模式，如果不提供初始向量，函数调用将会失败。
  </para>
 </sect2>
 
 <sect2 xml:id="migration56.incompatible.curl">
  <title><link linkend="book.curl">cURL</link> 文件上传</title>

  <para>
   必须先设置 CURLOPT_SAFE_UPLOAD 为 &false; 才能够使用 @file 语法来上传文件。建议使用
   <classname>CURLFile</classname> 类来上传文件。
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
