<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 2166824858a40ea664c558f2930b63b8f4fd89c6 Maintainer: Ernest Too Status: ready -->
<!-- CREDITS: mowangjuanzi -->
<sect1 xml:id="migration70.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>新特性</title>

 <sect2 xml:id="migration70.new-features.scalar-type-declarations">
  <title>标量类型声明</title>

  <para>
   标量<link linkend="language.types.declarations">类型声明</link>
   有两种模式: 强制 (默认) 和 严格模式。 现在可以使用下列类型参数（无论用强制模式还是严格模式）：
   字符串(<type>string</type>), 整数 (<literal>int</literal>), 浮点数 (<type>float</type>), 
   以及布尔值 (<literal>bool</literal>)。它们扩充了PHP5中引入的其他类型：类名，接口，<type>数组</type>和
   <type>回调类型</type>。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Coercive mode
function sumOfInts(int ...$ints)
{
    return array_sum($ints);
}

var_dump(sumOfInts(2, '3', 4.1));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(9)
]]>
   </screen>
  </informalexample>

  <para>
   要使用严格模式，一个 &declare; 声明指令必须放在文件的顶部。这意味着严格声明标量是基于文件可配的。
   这个指令不仅影响参数的类型声明，也影响到函数的返回值声明（参见
   <link linkend="language.types.declarations">返回值类型声明</link>,
   内置的PHP函数以及扩展中加载的PHP函数）
  </para>

  <para>
   完整的标量类型声明文档和示例参见<link linkend="language.types.declarations">类型声明</link>章节。
   
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.return-type-declarations">
  <title>返回值类型声明</title>

  <para>
   PHP 7 增加了对<link linkend="language.types.declarations">返回类型声明</link>的支持。
   类似于<link linkend="language.types.declarations">参数类型声明</link>，返回类型声明指明了函数返回值的类型。可用的<link linkend="language.types.declarations">类型</link>与参数声明中可用的类型相同。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function arraysSum(array ...$arrays): array
{
    return array_map(function(array $array): int {
        return array_sum($array);
    }, $arrays);
}

print_r(arraysSum([1,2,3], [4,5,6], [7,8,9]));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Array
(
    [0] => 6
    [1] => 15
    [2] => 24
)
]]>
   </screen>
  </informalexample>

  <para>
   完整的标量类型声明文档和示例可参见 
   <link linkend="language.types.declarations">返回值类型声明</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.null-coalesce-op">
  <title>null合并运算符</title>

  <para>
   由于日常使用中存在大量同时使用三元表达式和 <function>isset</function>的情况，
   我们添加了null合并运算符 (<literal>??</literal>) 这个语法糖。如果变量存在且值不为&null;，
   它就会返回自身的值，否则返回它的第二个操作数。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Fetches the value of $_GET['user'] and returns 'nobody'
// if it does not exist.
$username = $_GET['user'] ?? 'nobody';
// This is equivalent to:
$username = isset($_GET['user']) ? $_GET['user'] : 'nobody';

// Coalesces can be chained: this will return the first
// defined value out of $_GET['user'], $_POST['user'], and
// 'nobody'.
$username = $_GET['user'] ?? $_POST['user'] ?? 'nobody';
?>
]]>
   </programlisting>
  </informalexample>

  <!-- TODO: we don't need further details here, but this still has to be
       added to the operator precedence table -->
 </sect2>

 <sect2 xml:id="migration70.new-features.spaceship-op">
  <title>太空船操作符（组合比较符）</title>
  <para>
   太空船操作符用于比较两个表达式。当<varname>$a</varname>小于、等于或大于<varname>$b</varname>时它分别返回-1、0或1。
   比较的原则是沿用 PHP 的<link linkend="types.comparisons">常规比较规则</link>进行的。
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// 整数
echo 1 <=> 1; // 0
echo 1 <=> 2; // -1
echo 2 <=> 1; // 1

// 浮点数
echo 1.5 <=> 1.5; // 0
echo 1.5 <=> 2.5; // -1
echo 2.5 <=> 1.5; // 1
 
// 字符串
echo "a" <=> "a"; // 0
echo "a" <=> "b"; // -1
echo "b" <=> "a"; // 1
?>
]]>
   </programlisting>
  </informalexample>

  <!-- TODO: we don't need further details here, but this still has to be
       added to the operator precedence table -->
 </sect2>

 <sect2 xml:id="migration70.new-features.define-array">
  <title>通过 <function>define</function> 定义常量数组 </title>

  <para>
   <type>Array</type> 类型的常量现在可以通过
   <function>define</function> 来定义。在 PHP5.6 中仅能通过 &const; 定义。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
define('ANIMALS', [
    'dog',
    'cat',
    'bird'
]);

echo ANIMALS[1]; // 输出 "cat"
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.anonymous-classes">
  <title>匿名类</title>

  <para>
   现在支持通过<literal>new class</literal> 来实例化一个匿名类，这可以用来替代一些“用后即焚”的完整类定义。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
interface Logger {
    public function log(string $msg);
}

class Application {
    private $logger;

    public function getLogger(): Logger {
         return $this->logger;
    }

    public function setLogger(Logger $logger) {
         $this->logger = $logger;
    }
}

$app = new Application;
$app->setLogger(new class implements Logger {
    public function log(string $msg) {
        echo $msg;
    }
});

var_dump($app->getLogger());
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(class@anonymous)#2 (0) {
}
]]>
   </screen>
  </informalexample>

  <para>
   详细文档可以参考
   <link linkend="language.oop5.anonymous">匿名类</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.unicode-codepoint-escape-syntax">
  <title>Unicode codepoint 转译语法</title>

  <para>
   这接受一个以16进制形式的 Unicode codepoint，并打印出一个双引号或heredoc包围的 UTF-8 编码格式的字符串。
   可以接受任何有效的 codepoint，并且开头的 0 是可以省略的。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
echo "\u{aa}";
echo "\u{0000aa}";
echo "\u{9999}";
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
ª
ª (same as before but with optional leading 0's)
香
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.closure-call-method">
  <title><methodname>Closure::call</methodname></title>

  <para>
   <methodname>Closure::call</methodname> 现在有着更好的性能，简短干练的暂时绑定一个方法到对象上闭包并调用它。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class A {private $x = 1;}

// PHP 7 之前版本的代码
$getXCB = function() {return $this->x;};
$getX = $getXCB->bindTo(new A, 'A'); // 中间层闭包
echo $getX();

// PHP 7+ 及更高版本的代码
$getX = function() {return $this->x;};
echo $getX->call(new A);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
1
]]>
   </screen>
  </informalexample>
 </sect2>
 <sect2 xml:id="migration70.new-features.filtered-unserialize">
  <title>为 <function>unserialize</function> 提供过滤</title>

  <para>
   这个特性旨在提供更安全的方式解包不可靠的数据。它通过白名单的方式来防止潜在的代码注入。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// 将所有的对象都转换为 __PHP_Incomplete_Class 对象
$data = unserialize($foo, ["allowed_classes" => false]);

// 将除 MyClass 和 MyClass2 之外的所有对象都转换为 __PHP_Incomplete_Class 对象
$data = unserialize($foo, ["allowed_classes" => ["MyClass", "MyClass2"]);

// 默认情况下所有的类都是可接受的，等同于省略第二个参数
$data = unserialize($foo, ["allowed_classes" => true]);
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.intlchar">
  <title><classname>IntlChar</classname></title>

  <para>
   新增加的 <classname>IntlChar</classname> 类旨在暴露出更多的 ICU 功能。这个类自身定义了许多静态方法用于操作多字符集的 unicode 字符。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

printf('%x', IntlChar::CODEPOINT_MAX);
echo IntlChar::charName('@');
var_dump(IntlChar::ispunct('!'));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
10ffff
COMMERCIAL AT
bool(true)
]]>
   </screen>
  </informalexample>

  <para>
   若要使用此类，请先安装<link linkend="book.intl">Intl</link>扩展
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.expectations">
  <title>预期</title>

  <para>
   <link linkend="function.assert.expectations">预期</link>是向后兼用并增强之前的 <function>assert</function> 的方法。
   它使得在生产环境中启用断言为零成本，并且提供当断言失败时抛出特定异常的能力。
  </para>

   <para>
    老版本的API出于兼容目的将继续被维护，<function>assert</function>现在是一个语言结构，它允许第一个参数是一个表达式，而不仅仅是一个待计算的 <type>string</type>或一个待测试的<type>boolean</type>。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
ini_set('assert.exception', 1);

class CustomError extends AssertionError {}

assert(false, new CustomError('Some error message'));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Fatal error: Uncaught CustomError: Some error message
]]>
   </screen>
  </informalexample>

  <para>
   关于这个特性的完整说明，包括如何在开发和生产环境中配置它，可以在<function>assert</function>的
   <link linkend="function.assert.expectations">expectations section</link>章节找到。
  </para>
 </sect2>
 <sect2 xml:id="migration70.new-features.group-use-declarations">
  <title><literal>use</literal> 组声明</title>

  <para>
  从同一 &namespace; 导入的类、函数和常量现在可以通过单个 &use.namespace; 语句
  一次性导入了。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// PHP 7 之前的代码
use some\namespace\ClassA;
use some\namespace\ClassB;
use some\namespace\ClassC as C;

use function some\namespace\fn_a;
use function some\namespace\fn_b;
use function some\namespace\fn_c;

use const some\namespace\ConstA;
use const some\namespace\ConstB;
use const some\namespace\ConstC;

// PHP 7+ 及更高版本的代码
use some\namespace\{ClassA, ClassB, ClassC as C};
use function some\namespace\{fn_a, fn_b, fn_c};
use const some\namespace\{ConstA, ConstB, ConstC};
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>
 <sect2 xml:id="migration70.new-features.generator-return-expressions">
  <title>生成器可以返回表达式</title>

  <para>
   此特性基于 PHP 5.5 版本中引入的生成器特性构建的。
   它允许在生成器函数中通过使用 <literal>return</literal> 语法来返回一个表达式
   （但是不允许返回引用值），
   可以通过调用 <literal>Generator::getReturn()</literal> 方法来获取生成器的返回值，
   但是这个方法只能在生成器完成产生工作以后调用一次。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$gen = (function() {
    yield 1;
    yield 2;

    return 3;
})();

foreach ($gen as $val) {
    echo $val, PHP_EOL;
}

echo $gen->getReturn(), PHP_EOL;
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
2
3
]]>
   </screen>
  </informalexample>

  <para>
   在生成器中能够返回最终的值是一个非常便利的特性，
   因为它使得调用生成器的客户端代码可以直接得到生成器（或者其他协同计算）的返回值，
   相对于之前版本中客户端代码必须先检查生成器是否产生了最终的值然后再进行响应处理
   来得方便多了。
  </para>
 </sect2>
 <sect2 xml:id="migration70.new-features.generator-delegation">
  <title>生成器委托</title>

  <para>
   现在，只需在最外层生成其中使用 &yield.from;，就可以把一个生成器自动委派给其他的生成器，<classname>Traversable</classname>
   对象或者 <type>array</type>。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function gen()
{
    yield 1;
    yield 2;

    yield from gen2();
}

function gen2()
{
    yield 3;
    yield 4;
}

foreach (gen() as $val)
{
    echo $val, PHP_EOL;
}

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
2
3
4
]]>
   </screen>
  </informalexample>
 </sect2>
 <sect2 xml:id="migration70.new-features.intdiv">
  <title>整数除法函数 <function>intdiv</function></title>

  <para>
   新加的函数 <function>intdiv</function> 用来进行
   整数的除法运算。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

var_dump(intdiv(10, 3));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(3)
]]>
   </screen>
  </informalexample>
 </sect2>
  <sect2 xml:id="migration70.new-features.session-options">
  <title>会话选项</title>

  <para>
   <function>session_start</function> 可以接受一个 <type>array</type> 作为参数，
   用来覆盖 php.ini 文件中设置的
   <link linkend="session.configuration">会话配置选项</link>。
  </para>

  <para>
   在调用 <function>session_start</function> 的时候，
   传入的选项参数中也支持 
   <link linkend="ini.session.lazy-write">session.lazy_write</link> 行为，
   默认情况下这个配置项是打开的。它的作用是控制 PHP 只有在会话中的数据发生变化的时候才
   写入会话存储文件，如果会话中的数据没有发生改变，那么 PHP 会在读取完会话数据之后，
   立即关闭会话存储文件，不做任何修改，可以通过设置 
   <literal>read_and_close</literal> 来实现。
  </para>

  <para>
   例如，下列代码设置 
   <link linkend="ini.session.cache-limiter">session.cache_limiter</link> 为 
   <literal>private</literal>，并且在读取完毕会话数据之后马上关闭会话存储文件。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
session_start([
    'cache_limiter' => 'private',
    'read_and_close' => true,
]);
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.preg-repace-callback-array-function">
  <title><function>preg_replace_callback_array</function></title>

  <para>
   在 PHP 7 之前，当使用 <function>preg_replace_callback</function> 函数的时候，
   由于针对每个正则表达式都要执行回调函数，可能导致过多的分支代码。
   而使用新加的 <function>preg_replace_callback_array</function> 函数，
   可以使得代码更加简洁。
  </para>

  <para>
   现在，可以使用一个关联数组来对每个正则表达式注册回调函数，
   正则表达式本身作为关联数组的键，
   而对应的回调函数就是关联数组的值。
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.csprng-functions">
  <title>CSPRNG 函数</title>

  <para>
   新加入两个跨平台的函数：<function>random_bytes</function> 和 
   <function>random_int</function> 用来产生高安全级别的随机字符串和随机整数。
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.list-arrayaccess">
  <title>
   可以使用 <function>list</function> 函数来展开实现了
   <classname>ArrayAccess</classname> 接口的对象
  </title>

  <para>
   在之前版本中，<function>list</function> 函数不能保证
   正确的展开实现了 <classname>ArrayAccess</classname> 接口的对象，
   现在这个问题已经被修复。
  </para>
 </sect2>
 
 <sect2 xml:id="migration70.new-features.others">
  <title>其他特性</title>
  <itemizedlist>
   <listitem>
    <simpara>
     允许在克隆表达式上访问对象成员，例如：
     <literal>(clone $foo)-&gt;bar()</literal>。
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
