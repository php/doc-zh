<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 2485376b5b3d6b40e5c0d4e198ab5ff2a142425c Maintainer: yuanyuqiang Status: ready -->
<!-- CREDITS: Luffy -->
<sect2 xml:id="migration70.incompatible.error-handling">
 <title>错误和异常处理相关的变更</title>

 <para>
  在 PHP 7 中，很多致命错误以及可恢复的致命错误，都被转换为异常来处理了。这些异常继承自
  <classname>Error</classname> 类，此类实现了 
  <classname>Throwable</classname> 接口（所有异常都实现了这个基础接口）。
 </para>

 <para>
  这也意味着，当发生错误的时候，以前代码中的一些错误处理的代码将无法被触发。因为在
  PHP 7 版本中，已经使用抛出异常的错误处理机制了。（如果代码中没有捕获
  <classname>Error</classname> 异常，那么会引发致命错误）。
 </para>

 <para>
  PHP 7 中的错误处理的更完整的描述，请参见 <link linkend="language.errors.php7">PHP 7
  错误处理</link>。本迁移指导主要是列出对兼容性有影响的变更。
 </para>

 <sect3 xml:id="migration70.incompatible.error-handling.set-exception-handler">
  <title>
   <function>set_exception_handler</function> 不再保证收到的一定是 <classname>Exception</classname> 对象
  </title>

  <para>
   抛出 <classname>Error</classname> 对象时，如果 <function>set_exception_handler</function> 里的异常处理代码声明了类型 <classname>Exception</classname> ，将会导致 fatal error。
  </para>

  <para>
   想要异常处理器同时支持 PHP 5 和 7，应该删掉异常处理器里的类型声明。如果代码仅仅是升级到 PHP 7，则可以把类型 <classname>Exception</classname> 替换成 <classname>Throwable</classname>。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// PHP 5 时代的代码将会出现问题
function handler(Exception $e) { /* ... */ }
set_exception_handler('handler');

// 兼容 PHP 5 和 7
function handler($e) { /* ... */ }

// 仅支持 PHP 7
function handler(Throwable $e) { /* ... */ }
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.error-handling.constructors">
  <title>当内部构造方法失败的时候，始终抛出异常</title>

  <para>
   在之前版本中，如果内部类的构造方法出错，会返回 &null; 
   或者一个不可用的对象。从 PHP 7 开始，如果内部类构造方法发生错误，那么会抛出异常。
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.error-handling.parse">
  <title>解析错误会抛出 <classname>ParseError</classname> 异常</title>

  <para>
   解析错误会抛出 <classname>ParseError</classname> 异常。对于 <function>eval</function>
   函数，需要将其包含到一个
   &catch; 代码块中来处理解析错误。
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.error-handling.strict">
  <title>E_STRICT 警告级别变更</title>

  <para>
   原有的 <constant>E_STRICT</constant> 警告都被迁移到其他级别。<constant>E_STRICT</constant>
   常量会被保留，所以调用 
   <literal>error_reporting(E_ALL|E_STRICT)</literal> 不会引发错误。
  </para>
  <para>
   <table>
    <title><constant>E_STRICT</constant> 警告级别变更</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>场景</entry>
        <entry>新的级别/行为</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>将资源类型的变量用作键来进行索引</entry>
        <entry><constant>E_NOTICE</constant></entry>
       </row>
       <row>
        <entry>抽象静态方法</entry>
        <entry>不再警告，会引发错误</entry>
       </row>
       <row>
        <entry>重复定义构造器函数</entry>
        <entry>不再警告，会引发错误</entry>
       </row>
       <row>
        <entry>在继承的时候，方法签名不匹配</entry>
        <entry><constant>E_WARNING</constant></entry>
       </row>
       <row>
        <entry>在两个 trait 中包含相同的（兼容的）属性</entry>
        <entry>不再警告，会引发错误</entry>
       </row>
       <row>
        <entry>以非静态调用的方式访问静态属性</entry>
        <entry><constant>E_NOTICE</constant></entry>
       </row>
       <row>
        <entry>变量应该以引用的方式赋值</entry>
        <entry><constant>E_NOTICE</constant></entry>
       </row>
       <row>
        <entry>变量应该以引用的方式传递（到函数参数中）</entry>
        <entry><constant>E_NOTICE</constant></entry>
       </row>
       <row>
        <entry>以静态方式调用实例方法</entry>
        <entry><constant>E_DEPRECATED</constant></entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
