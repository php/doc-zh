<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: b1116af46680f7baf89c46610430a3b63ce9a1f0 Maintainer: mowangjuanzi Status: ready -->
<!-- CREDITS: Luffy -->
<sect1 xml:id="migration83.other-changes" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>其它变更</title>

 <sect2 xml:id="migration83.other-changes.core">
  <title>核心变化</title>

  <sect3 xml:id="migration83.other-changes.core.ffi">
   <title>FFI</title>

   <para>
    当 <link linkend="ini.opcache.preload-user">opcache.preload_user</link> 是当前系统用户时，现在允许在预加载期间使用
    <methodname>FFI::load</methodname>。以前，如果设置了 <link linkend="ini.opcache.preload-user">opcache.preload_user</link>
    指令，则预加载期间无法调用 <methodname>FFI::load</methodname>。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.fpm">
   <title>FPM</title>

   <para>
    如果 socket 路径比操作系统支持的路径长度更长，则 FPM CLI 测试现在会失败。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.opcache">
   <title>Opcache</title>

   <para>
    在 CLI 和 phpdbg SAPI 中，以 root 身份运行时，不再需要设置 <link linkend="ini.opcache.preload-user">opcache.preload_user</link>
    指令来进行预加载。在其它 SAPI 中，以 root 身份运行时需要此指令，因为在 SAPI 切换到非特权用户之前进行预加载。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.streams">
   <title>Streams</title>

   <para>
    如果在 socket 连接上有任何缓冲数据，而不是等待更多数据，<function>fread</function> 阻塞会立即返回。
   </para>

   <para>
    内存流在偏移量超过末尾时不会失败。而是在下次写入时内存会增加，并且旧末尾和偏移量之间的数据将使用零字节填充，类似于文件的工作方式。
   </para>

   <para>
    现在，<function>stat</function> 访问操作（像 <function>file_exists</function>
    及其类似这样）将使用真实路径而不是实际的 stream 路径。这与 stream 的打开方式保持一致。
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.sapi">
  <title>SAPI 模块的变更</title>

  <sect3 xml:id="migration83.other-changes.sapi.cli">
   <title>CLI</title>

   <para>
    <constant>STDOUT</constant>、<constant>STDERR</constant> 和 <constant>STDIN</constant> 流不再因资源销毁而关闭，这主要是在
    CLI 完成时关闭。然而，仍然可以使用 <function>fclose</function> 和类似函数明确关闭这些流。
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.functions">
  <title>函数变更</title>

  <sect3 xml:id="migration83.other-changes.functions.core">
   <title>核心</title>

   <para>
    <function>gc_status</function> 添加下列 8 个字段：

    <simplelist>
     <member><literal>"running"</literal> => bool</member>
     <member><literal>"protected"</literal> => bool</member>
     <member><literal>"full"</literal> => bool</member>
     <member><literal>"buffer_size"</literal> => int</member>
     <member><literal>"application_time"</literal> => float：总的应用时间，以秒为单位（包含 collector_time）</member>
     <member><literal>"collector_time"</literal> => float：垃圾回收所花费的时间，单位为秒（包括 destructor_time 和 free_time）</member>
     <member><literal>"destructor_time"</literal> => float：在垃圾回收期间执行析构方法的时间，单位为秒</member>
     <member><literal>"free_time"</literal> => float：在垃圾回收期间花费在释放值上的时间，单位为秒</member>
    </simplelist>
   </para>

   <para>
    <function>class_alias</function> 现在支持创建内部类的别名。
   </para>

   <para>
    在运行时使用 <code>ini_set('open_basedir', ...);</code> 设置 <link
    linkend="ini.open-basedir">open_basedir</link> 时，不再接受包含父目录(<literal>..</literal>)的路径。以前只禁止以
    <literal>..</literal> 开头的路径。这可以通过在路径前加上<literal>./</literal> 来轻松规避。
   </para>

   <para>
    用户异常处理程序现在可以在关闭期间捕获异常。
   </para>

   <para>
    <function>highlight_string</function> 和 <function>highlight_file</function> 的 HTML 结果已经改变。外部
    HTML 标签之间的空格已移除。换行符和空格不再转换为 HTML 实体。整个 HTML 现在包装在 <literal>&lt;pre&gt;</literal>
    标签中。外部的 <literal>&lt;span&gt;</literal> 标签已经与 <literal>&lt;code&gt;</literal> 标签合并。
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.calendar">
   <title>Calendar</title>

   <para>
    <function>easter_date</function> 现在在 64 位系统上支持 1970 到 20 亿年，以前它只支持 1970 到 2037 年。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.curl">
   <title>Curl</title>

   <para>
    <function>curl_getinfo</function> 现在支持两个新常量：<constant>CURLINFO_CAPATH</constant> 和
    <constant>CURLINFO_CAINFO</constant>。如果 option 为 &null;，则会显示以下两个额外的键：<literal>"capath"</literal>
    和 <literal>"cainfo"</literal>。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.dom">
   <title>DOM</title>

   <para>
    <methodname>DOMCharacterData::appendData</methodname> 的返回值临时修改为 <type>true</type>。
   </para>

   <para>
    <methodname>DOMDocument::loadHTML</methodname>、<methodname>DOMDocument::loadHTMLFile</methodname>、
    和 <methodname>DOMDocument::loadXML</methodname> 现在有了临时返回类型 <type>bool</type>。之前，返回类型是
    <code>DOMDocument|bool</code>，但是自 PHP 8.0.0 起，<classname>DOMDocument</classname> 不再是静态可调用，所以不能返回。
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.gd">
   <title>Gd</title>

   <para>
    <function>imagerotate</function> 的签名已经更改。已经移除 <parameter>$ignore_transparent</parameter> 参数，因为自 PHP 5.5.0 起已忽略。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.intl">
   <title>Intl</title>

   <para>
    <function>datefmt_set_timezone</function>（及其别名 <methodname>IntlDateformatter::setTimeZone</methodname>）现在在成功时返回
    &true;，以前返回 &null;。
   </para>

   <para>
    <methodname>IntlBreakiterator::setText</methodname> 现在在失败时返回 &false;，之前返回 &null;。现在在成功时返回 &true;，以前返回 &null;。
   </para>

   <para>
    <methodname>IntlChar::enumCharNames</methodname> 现在返回 bool。之前成功时返回 &null;，失败时返回 &false;。
   </para>

   <para>
    当设置了无效的区域，<methodname>IntlDateFormatter::__construct</methodname> 将抛出 <constant>U_ILLEGAL_ARGUMENT_ERROR</constant>。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.mbstring">
   <title>MBString</title>

   <para>
    <function>mb_strtolower</function> 和 <function>mb_convert_case</function> 实现了对希腊字母 sigma
    的条件转换规则，条件转换只适用于 <constant>MB_CASE_LOWER</constant> 和 <constant>MB_CASE_TITLE</constant>
    模式，不适用于 <constant>MB_CASE_LOWER_SIMPLE</constant> 和 <constant>MB_CASE_TITLE_SIMPLE</constant>。
   </para>

   <para>
    <function>mb_decode_mimeheader</function> 根据 RFC 2047 的要求解释 QPrint 编码的 MIME 编码单词中的下划线，它们将转换为空格。在这样的
    MIME 编码单词中，下划线必须被编码为 <literal>"=5F"</literal>。
   </para>

   <para>
    在极少数情况下，<function>mb_encode_mimeheader</function> 会对输入字符串进行传输编码，在 PHP 8.2 中会将输入字符串作为原始 ASCII 传递。
   </para>

   <para>
    当输入字符串使用 QPrint 编码时，<function>mb_encode_mimeheader</function>
    不再丢弃 NUL（零）字节。之前会导致某些文本编码的字符串，特别是 UTF-16 和
    UTF-32，会被 mb_encode_mimeheader 破坏。
   </para>

   <para>
    <function>mb_detect_encoding</function> 现在的的“非严格”模式行为如文档中所述。之前，如果在所有候选编码中输入字符串的相同字节（比如，第一个字节）是无效的，将会返回
    &false;。一般来说，当看到无效字节时，将会从考虑（consideration）中剔除候选编码，如果相同的输入字节剔除了考虑中的所有剩余编码，将返回
    &false;。另一方面，如果所有的候选编码一个个都剔除了，它将返回最后剔除的那个，而不考虑字符串中可能遇到的编码错误。这与文档中描述的行为不同，文档中说：“如果 strict
    设置为 false，将返回最接近的匹配编码”。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.mysqli">
   <title>mysqli</title>

   <para>
    当 <parameter>$constructor_args</parameter> 参数不为空且类没有构造方法时，<function>mysqli_fetch_object</function>
    现在抛出 <classname>ValueError</classname> 而不是 <classname>Exception</classname>。
   </para>

   <para>
    当都没有传递 <parameter>$read</parameter> 和 <parameter>$error</parameter> 参数时，<function>mysqli_poll</function> 现在会抛出 <classname>ValueError</classname>。
   </para>

   <para>
    <function>mysqli_field_seek</function> 和 <methodname>mysqli_result::field_seek</methodname> 现在返回类型指定为 <type>true</type> 而不是 <type>bool</type>。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.odbc">
   <title>ODBC</title>

   <para>
    <function>odbc_autocommit</function> 现在接受 <parameter>$enable</parameter> 参数为 &null;。传递 &null;
    与只传递 1 个参数的行为相同，即表明是否启用自动提交功能。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.pgsql">
   <title>PGSQL</title>

   <para>
    当 <parameter>$constructor_args</parameter> 参数不为空且类没有构造方法时，<function>pg_fetch_object</function>
    现在抛出 <classname>ValueError</classname> 而不是 <classname>Exception</classname>。
   </para>

   <para>
    当指定的表无效时，<function>pg_insert</function> 现在抛出 <classname>ValueError</classname> 而不是 <constant>E_WARNING</constant>。
   </para>

   <para>
    当字段的值/类型与 PostgreSQL 的类型不匹配时，<function>pg_insert</function> 和 <function>pg_convert</function> 会抛出
    <classname>ValueError</classname> 或 <classname>TypeError</classname>，而不是 <constant>E_WARNING</constant>。
   </para>

   <para>
    <function>pg_fetch_result</function>、<function>pg_field_prtlen</function> 和
    <function>pg_field_is_null</function> 的 <parameter>$row</parameter> 参数现在可以为 null。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.random">
   <title>Random</title>

   <para>
    <function>mt_srand</function> 和<function>srand</function> 变更为不使用检查参数的数量的方式来确定是否应该使用随机种子。传递 &null;
    将生成随机种子，<literal>0</literal> 将使用 0 作为种子。函数现在与 <methodname>Random\Engine\Mt19937::__construct</methodname> 一致。
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.reflection">
   <title>Reflection</title>

   <para>
    <methodname>ReflectionClass::getStaticProperties</methodname> 的返回类型不再可为 null。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.standard">
   <title>标准</title>

   <para>
    <function>unserialize</function> 所触发的 <constant>E_NOTICE</constant> 被提升为 <constant>E_WARNING</constant>。
    <!-- RFC: https://wiki.php.net/rfc/improve_unserialize_error_handling -->
   </para>

   <para>
    如果输入包含未使用的字节，<function>unserialize</function> 现在会抛出新的 <constant>E_WARNING</constant>。
    <!-- RFC: https://wiki.php.net/rfc/unserialize_warn_on_trailing_data -->
   </para>

   <para>
    <function>array_pad</function> 现在只接受数组元素可拥有的最大数量限制，以前每次最多只能添加 1048576 个元素。
   </para>

   <para>
    <function>strtok</function> 在开始标切分时，如果没有提供 token，则引发 <constant>E_WARNING</constant>。
   </para>

   <para>
    当生成 salt 失败时，<function>password_hash</function> 现在将底层的 <classname>Random\RandomException</classname> 链到
    <classname>ValueError</classname> 的 <parameter>$previous</parameter> <classname>Exception</classname>。
   </para>

   <para>
    如果使用数组作为 <function>proc_open</function> 的 <parameter>$command</parameter>，则现在必须至少有一个非空元素。否则会抛出
    <classname>ValueError</classname>。
   </para>

   <para>
    如果 <parameter>$command</parameter> 数组是无效命令，<function>proc_open</function> 将返回 &false;，而不是随后产生警告的资源对象。
    Windows 系统已经是这种行为，但如果使用 posix_spawn 实现（大多数 Linux、BSD 和 MacOS 平台），也会是这种行为。
    在一些旧平台上，由于不支持 posix_spawn，因此这种行为不会改变。
   </para>

   <para>
    <function>array_sum</function> 和 <function>array_product</function> 现在会在数组中的值不能转换为 int/float
    时发出警告。之前会忽略数组和对象，而其他所有值都被强制转换为 int。此外，定义了数字转换的对象（例如 GMP）现在会强制转换，而不是忽略。
    <!-- RFC: https://wiki.php.net/rfc/saner-array-sum-product -->
   </para>

   <para>
    现在 <function>number_format</function> 的 <parameter>$decimals</parameter> 可以正确处理负整数。<parameter>$decimals</parameter>
    为负数时，<parameter>$num</parameter> 值会四舍五入到小数点前 <parameter>$decimals</parameter> 位，而之前的 <parameter>$decimals</parameter>
    会忽略负数，并且四舍五入到小数点后 0 位。
   </para>

   <para>
    在 <function>strrchr</function> 中增加了新的参数 <parameter>$before_needle</parameter>，它的行为与 <function>strstr</function> 或
    <function>stristr</function> 函数中的对应参数类似。
   </para>

   <para>
    对于未包含关闭引号的最后一个字段，<function>str_getcsv</function> 和 <function>fgetcsv</function>
    现在返回空字符串，而不是带单个 null 字节的字符串。
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration83.other-changes.extensions">
  <title>其它扩展变更</title>

  <sect3 xml:id="migration83.other-changes.extensions.core">
   <title>核心</title>

   <para>
    在类型 <type>bool</type> 的值上使用
    <link linkend="language.operators.increment">自增/减</link>运算符（<literal>++</literal>/<literal>--</literal>）将会抛出警告。这是因为虽然目前没有效果，但是将来行为将是
    <code>$bool += 1</code>。
   </para>

   <para>
    在类型 <type>null</type> 的值上使用
    <link linkend="language.operators.increment">自减</link>运算符（<literal>--</literal>）将会抛出警告。这是因为虽然目前没有效果，但是将来行为将是
    <code>$null -= 1</code>。
   </para>

   <para>
    内部对象实现 _IS_NUMBER 转换，但不是重写加减法的 do_operator 处理程序，现在可以像 <code>$o += 1</code> 或 <code>$o -= 1</code> 一样递增和递减。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.extensions.dom">
   <title>DOM</title>

   <para>
    DOM 的生命周期机制已经被重写，这样默默删除的节点仍然可以获取，之前这样做会导致异常。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.extensions.sqlite3">
   <title>SQLite3</title>

   <para>
    <classname>SQLite3</classname> 类现在抛出 <classname>SQLite3Exception</classname>（继承 <classname>Exception</classname>）而不是 <classname>Exception</classname>。
   </para>

   <para>
    SQLite 错误代码现在在 exception error code 中传递，而不是包含在错误消息中。
   </para>

  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.ini">
  <title>INI 文件处理更变</title>

  <itemizedlist>
   <listitem>
    <para>
     已弃用 <literal>assert.*</literal> INI 设置。这包括以下 INI 设置：
     <simplelist>
      <member><link linkend="ini.assert.active">assert.active</link></member>
      <member><link linkend="ini.assert.bail">assert.bail</link></member>
      <member><link linkend="ini.assert.callback">assert.callback</link></member>
      <member><link linkend="ini.assert.exception">assert.exception</link></member>
      <member><link linkend="ini.assert.warning">assert.warning</link></member>
     </simplelist>
     如果设置的值等于默认值，则不会发出弃用通知。应该使用 <link linkend="ini.zend.assertions">zend.assertions</link> INI 设置。
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="ini.zend.max-allowed-stack-size">zend.max_allowed_stack_size</link> 是新的 INI
     指令，用于设置允许的最大栈大小。可能的值是
     <literal>0</literal>（检测进程或线程的最大栈大小）、-1（无限制）或正数的单位为字节的值。默认值为
     <literal>0</literal>。当无法检测到进程或线程的最大的栈大小时，使用已知的系统默认值。设置的值过高效果等同于不限制栈的大小。Fiber
     使用 <link linkend="ini.fiber.stack-size">fiber.stack_size</link> 作为允许的最大栈大小。当进程调用栈超过
     <link linkend="ini.zend.max-allowed-stack-size">zend.max_allowed_stack_size</link>-<link linkend="ini.zend.reserved-stack-size">zend.reserved_stack_size</link>
     个字节时，将抛出 <classname>Error</classname>，以防止栈溢出引发分段错误，目的是使调试更容易。在没有控制递归调用内部函数或者魔术方法
     <link linkend="object.tostring">__toString()</link>、<link linkend="object.clone">__clone()</link>、
     <link linkend="object.sleep">__sleep()</link>、<link linkend="object.destruct">__destruct()</link>
     期间，栈的大小会增加。这与栈缓冲区溢出无关，也不是安全特性。
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="ini.zend.reserved-stack-size">zend.reserved_stack_size</link> 是新的 INI
     指令，用于设置预留的栈大小（以字节为单位）。当检查栈大小时，会从最大允许的栈大小中减去，作为缓冲区。
    </para>
   </listitem>
   </itemizedlist>
 </sect2>

 <sect2 xml:id="migration83.other-changes.performance">
  <title>性能</title>

  <sect3 xml:id="migration83.other-changes.performance.dom">
   <title>DOM</title>

   <para>
    现在遍历 <classname>DOMNodeList</classname> 时使用了缓存，因此默认情况下请求元素不再需要花费两次的时间。
   </para>

   <para>
    从节点获取文本内容现在避免了分配，从而提高了性能。
   </para>

   <para>
    <methodname>DOMChildNode::remove</methodname> 现在运行性能是 O(1)。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.performance.standard">
   <title>标准</title>

   <para>
    <function>file</function> flag 错误检查现在快了大约 7%。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.performance.spl">
   <title>SPL</title>

   <para>
    <classname>RecursiveDirectoryIterator</classname> 现在循环目录时执行更少的 I/O。
   </para>
  </sect3>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
