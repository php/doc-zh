<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 224e2a46765308809dfc560371ed1e119c16a046 Maintainer: mowangjuanzi Status: partial -->
<!-- CREDITS: Luffy -->
<sect1 xml:id="migration83.other-changes" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>其它变化</title>

 <sect2 xml:id="migration83.other-changes.core">
  <title>核心变化</title>

  <sect3 xml:id="migration83.other-changes.core.ffi">
   <title>FFI</title>

   <para>
    当 <link linkend="ini.opcache.preload-user">opcache.preload_user</link> 是当前系统用户时，现在允许在预加载期间使用
    <methodname>FFI::load</methodname>。以前，如果设置了 <link linkend="ini.opcache.preload-user">opcache.preload_user</link>
    指令，则预加载期间无法调用 <methodname>FFI::load</methodname>。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.fpm">
   <title>FPM</title>

   <para>
    如果 socket 路径比操作系统支持的路径长度更长，则 FPM CLI 测试现在会失败。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.opcache">
   <title>Opcache</title>

   <para>
    在 CLI 和 phpdbg SAPI 中，以 root 身份运行时，不再需要设置 <link linkend="ini.opcache.preload-user">opcache.preload_user</link>
    指令来进行预加载。在其它 SAPI 中，以 root 身份运行时需要此指令，因为在 SAPI 切换到非特权用户之前进行预加载。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.core.streams">
   <title>Streams</title>

   <para>
    如果在 socket 连接上有任何缓冲数据，而不是等待更多数据，<function>fread</function> 阻塞会立即返回。
   </para>

   <para>
    内存流在偏移量超过末尾时不会失败。而是在下次写入时内存会增加，并且旧末尾和偏移量之间的数据会以与文件相同的方式填充零字节。
   </para>

   <para>
    现在，<function>stat</function> 访问操作（像 <function>file_exists</function>
    及其类似这样）将使用真实路径而不是实际的 stream 路径。这与 stream 的打开方式保持一致。
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.sapi">
  <title>SAPI 模块的变更</title>

  <sect3 xml:id="migration83.other-changes.sapi.cli">
   <title>CLI</title>

   <para>
    <constant>STDOUT</constant>、<constant>STDERR</constant> 和 <constant>STDIN</constant> 流不再因资源销毁而关闭，这主要是在
    CLI 完成时关闭。然而，仍然可以使用 <function>fclose</function> 和类似函数明确关闭这些流。
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.functions">
  <title>函数变更</title>

  <sect3 xml:id="migration83.other-changes.functions.core">
   <title>核心</title>

   <para>
    <function>gc_status</function> 添加下列 8 个字段：

    <simplelist>
     <member><literal>"running"</literal> => bool</member>
     <member><literal>"protected"</literal> => bool</member>
     <member><literal>"full"</literal> => bool</member>
     <member><literal>"buffer_size"</literal> => int</member>
     <member><literal>"application_time"</literal> => float：总的应用时间，以秒为单位（包含 collector_time）</member>
     <member><literal>"collector_time"</literal> => float：垃圾回收所花费的时间，单位为秒（包括 destructor_time 和 free_time）</member>
     <member><literal>"destructor_time"</literal> => float：在垃圾回收期间执行析构方法的时间，单位为秒</member>
     <member><literal>"free_time"</literal> => float：在垃圾回收期间花费在释放值上的时间，单位为秒</member>
    </simplelist>
   </para>

   <para>
    <function>class_alias</function> 现在支持创建内部类的别名。
   </para>

   <para>
    在运行时使用 <code>ini_set('open_basedir', ...);</code> 设置 <link
    linkend="ini.open-basedir">open_basedir</link> 时，不再接受包含父目录(<literal>..</literal>)的路径。以前只禁止以
    <literal>..</literal> 开头的路径。这可以通过在路径前加上<literal>./</literal> 来轻松规避。
   </para>

   <para>
    用户异常处理程序现在可以在关闭期间捕获异常。
   </para>

   <para>
    <function>highlight_string</function> 和 <function>highlight_file</function> 的 HTML 结果已经改变。外部
    HTML 标签之间的空格已移除。换行符和空格不再转换为 HTML 实体。整个 HTML 现在包装在 <literal>&lt;pre&gt;</literal>
    标签中。外部的 <literal>&lt;span&gt;</literal> 标签已经与 <literal>&lt;code&gt;</literal> 标签合并。
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.calendar">
   <title>Calendar</title>

   <para>
    <function>easter_date</function> 现在在 64 位系统上支持 1970 到 20 亿年，以前它只支持 1970 到 2037 年。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.curl">
   <title>Curl</title>

   <para>
    <function>curl_getinfo</function> 现在支持两个新常量：<constant>CURLINFO_CAPATH</constant> 和
    <constant>CURLINFO_CAINFO</constant>。如果 option 为 &null;，则会显示以下两个额外的键：<literal>"capath"</literal>
    和 <literal>"cainfo"</literal>。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.dom">
   <title>DOM</title>

   <para>
    <methodname>DOMCharacterData::appendData</methodname> 的返回值临时修改为 <type>true</type>。
   </para>

   <para>
    <methodname>DOMDocument::loadHTML</methodname>、<methodname>DOMDocument::loadHTMLFile</methodname>、<methodname>DOMDocument::loadXML</methodname>
    和 <methodname>DOMDocument::loadXMLFile</methodname> 现在有了临时返回类型 <type>bool</type>。之前，返回类型是
    <code>DOMDocument|bool</code>，但是自 PHP 8.0.0 起，<classname>DOMDocument</classname> 不再是静态可调用，所以不能返回。
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.gd">
   <title>Gd</title>

   <para>
    <function>imagerotate</function> 的签名已经更改。已经移除 <parameter>$ignore_transparent</parameter> 参数，因为自 PHP 5.5.0 起已忽略。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.intl">
   <title>Intl</title>

   <para>
    <function>datefmt_set_timezone</function>（及其别名 <methodname>IntlDateformatter::setTimeZone</methodname>）现在在成功时返回
    &true;，以前返回 &null;。
   </para>

   <para>
    <methodname>IntlBreakiterator::setText</methodname> 现在在失败时返回 &false;，之前返回 &null;。现在在成功时返回 &true;，以前返回 &null;。
   </para>

   <para>
    <methodname>IntlChar::enumCharNames</methodname> 现在返回 bool。之前成功时返回 &null;，失败时返回 &false;。
   </para>

   <para>
    当设置了无效的区域，<methodname>IntlDateFormatter::__construct</methodname> 将抛出 <constant>U_ILLEGAL_ARGUMENT_ERROR</constant>。
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.mbstring">
   <title>MBString</title>

   <para>
    <function>mb_strtolower</function> and <function>mb_convert_case</function>
    implement conditional casing rules for the Greek letter sigma.
    For <function>mb_convert_case</function>,
    conditional casing only applies to <constant>MB_CASE_LOWER</constant>
    and <constant>MB_CASE_TITLE</constant> modes, not to
    <constant>MB_CASE_LOWER_SIMPLE</constant> and
    <constant>MB_CASE_TITLE_SIMPLE</constant>.
   </para>

   <para>
    <function>mb_decode_mimeheader</function> interprets underscores in
    QPrint-encoded MIME encoded words as required by RFC 2047; they are
    converted to spaces.
    Underscores must be encoded as <literal>"=5F"</literal> in such MIME
    encoded words.
   </para>

   <para>
    In rare cases, <function>mb_encode_mimeheader</function> will transfer-encode
    its input string where it would pass it through as raw ASCII in PHP 8.2.
   </para>

   <para>
    <function>mb_encode_mimeheader</function> no longer drops NUL (zero)
    bytes when QPrint-encoding the input string.
    This previously caused strings in certain text encodings, especially
    UTF-16 and UTF-32, to be corrupted by mb_encode_mimeheader.
   </para>

   <para>
    <function>mb_detect_encoding</function>'s "non-strict" mode now behaves
    as described in the documentation.
    Previously, it would return &false; if the same byte (for example, the first
    byte) of the input string was invalid in all candidate encodings.
    More generally, it would eliminate candidate encodings from consideration
    when an invalid byte was seen, and if the same input byte eliminated all
    remaining encodings still under consideration, it would return &false;.
    On the other hand, if all candidate encodings but one were eliminated
    from consideration, it would return the last remaining one without regard
    for how many encoding errors might be encountered later in the string.
    This is different from the behavior described in the documentation, which
    says: "If strict is set to false, the closest matching encoding will be
    returned."
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.mysqli">
   <title>mysqli</title>

   <para>
    <function>mysqli_fetch_object</function> now raises a
    <classname>ValueError</classname> instead of an <classname>Exception</classname>
    when the <parameter>$constructor_args</parameter> argument is non empty with
    the class not having constructor.
   </para>

   <para>
    <function>mysqli_poll</function> now raises a <classname>ValueError</classname>
    when neither the <parameter>$read</parameter>
    nor the <parameter>$error</parameter> arguments are passed.
   </para>

   <para>
    <function>mysqli_field_seek</function> and
    <methodname>mysqli_result::field_seek</methodname> now specify the return
    type as <type>true</type> instead of <type>bool</type>.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.odbc">
   <title>ODBC</title>

   <para>
    <function>odbc_autocommit</function> now accepts &null; for the
    <parameter>$enable</parameter> parameter.
    Passing &null; has the same behaviour as passing only 1 parameter,
    namely indicating if the autocommit feature is enabled or not.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.pgsql">
   <title>PGSQL</title>

   <para>
    <function>pg_fetch_object</function> now raises a
    <classname>ValueError</classname> instead of an <classname>Exception</classname>
    when the <parameter>$constructor_args</parameter> argument is non empty with
    the class not having constructor.
   </para>

   <para>
    <function>pg_insert</function> now raises a <classname>ValueError</classname>
    instead of a <constant>E_WARNING</constant> when the table specified is invalid.
   </para>

   <para>
    <function>pg_insert</function> and <function>pg_convert</function> raises
    a <classname>ValueError</classname> or a <classname>TypeError</classname>
    instead of a <constant>E_WARNING</constant> when the value/type of a field
    does not match properly with a PostgreSQL's type.
   </para>

   <para>
    The <parameter>$row</parameter> parameter of
    <function>pg_fetch_result</function>,
    <function>pg_field_prtlen</function>, and
    <function>pg_field_is_null</function> is now nullable.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.random">
   <title>Random</title>

   <para>
    Changed <function>mt_srand</function> and <function>srand</function> to
    not check the number of arguments to determine whether a random seed should
    be used. Passing &null; will generate a random seed, <literal>0</literal>
    will use zero as the seed. The functions are now consistent with
    <methodname>Random\Engine\Mt19937::__construct</methodname>.
   </para>

  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.reflection">
   <title>Reflection</title>

   <para>
    Return type of <methodname>ReflectionClass::getStaticProperties</methodname>
    is no longer nullable.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.functions.standard">
   <title>Standard</title>

   <para>
    <constant>E_NOTICE</constant>s emitted by <function>unserialize</function>
    have been promoted to <constant>E_WARNING</constant>.
    <!-- RFC: https://wiki.php.net/rfc/improve_unserialize_error_handling -->
   </para>

   <para>
    <function>unserialize</function> now emits a new <constant>E_WARNING</constant>
    if the input contains unconsumed bytes.
    <!-- RFC: https://wiki.php.net/rfc/unserialize_warn_on_trailing_data -->
   </para>

   <para>
    <function>array_pad</function> is now only limited by the maximum number of
    elements an array can have. Before, it was only possible to add at most 1048576
    elements at a time.
   </para>

   <para>
    <function>strtok</function> raises an <constant>E_WARNING</constant> in the
    case token is not provided when starting tokenization.
   </para>

   <para>
    <function>password_hash</function> will now chain the underlying
    <classname>Random\RandomException</classname>
    as the <classname>ValueError</classname>'s <parameter>$previous</parameter>
    <classname>Exception</classname> when salt generation fails.
   </para>

   <para>
    If using an array as the <parameter>$command</parameter>
    for <function>proc_open</function>, it must now have at least one
    non empty element. Otherwise a <classname>ValueError</classname>
    is thrown.
   </para>

   <para>
    <function>array_sum</function> and <function>array_product</function> now
    warn when values in the array cannot be converted to int/float.
    Previously arrays and objects where ignored whilst every other value was
    cast to int. Moreover, objects that define a numeric cast (e.g.
    <link linkend="book.gmp">GMP</link>) are now casted instead of ignored.
    <!-- RFC: https://wiki.php.net/rfc/saner-array-sum-product -->
   </para>

   <para>
    The <parameter>$decimal</parameter> of <function>number_format</function>
    now properly handles negative integers.
    Rounding with a negative value for <parameter>$decimal</parameter> means
    that <parameter>$num</parameter> is rounded to <parameter>$decimals</parameter>
    significant digits before the decimal point.
    Previously negative <parameter>$decimals</parameter> were silently
    ignored and the number got rounded to zero decimal places.
   </para>

   <para>
    A new <parameter>$before_needle</parameter> argument has been added to
    <function>strrchr</function>. It behaves like its counterpart in the
    <function>strstr</function> or <function>stristr</function> functions.
   </para>

   <para>
    <function>str_getcsv</function> and <function>fgetcsv</function> now return
    an empty string instead of a string with a single null byte for the last field
    which only contains an unterminated enclosure.
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration83.other-changes.extensions">
  <title>其它扩展变更</title>

  <sect3 xml:id="migration83.other-changes.extensions.core">
   <title>Core</title>

   <para>
    Using the <link linkend="language.operators.increment">increment/decrement</link>
    operators (<literal>++</literal>/<literal>--</literal>) on values of type
    <type>bool</type> now emit warnings.
    This is because it currently has no effect, but will behave like
    <code>$bool += 1</code> in the future.
   </para>

   <para>
    Using the <link linkend="language.operators.increment">decrement</link>
    operator (<literal>--</literal>) on values of type <type>null</type> now emit warnings.
    This is because it currently has no effect, but will behave like
    <code>$null -= 1</code> in the future.
   </para>

   <para>
    Internal objects that implement an _IS_NUMBER cast but not a do_operator
    handler that overrides addition and subtraction now can be incremented
    and decrement as if one would do <code>$o += 1</code> or <code>$o -= 1</code>
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.extensions.dom">
   <title>DOM</title>

   <para>
    The DOM lifetime mechanism has been reworked such that implicitly removed
    nodes can still be fetched. Previously this resulted in an exception.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.extensions.sqlite3">
   <title>SQLite3</title>

   <para>
    The <classname>SQLite3</classname> class now throws
    <classname>SQLite3Exception</classname> (extends
    <classname>Exception</classname>) instead of <classname>Exception</classname>.
   </para>

   <para>
    The SQLite error code is now passed in the exception error code instead of
    being included in the error message.
   </para>

  </sect3>
 </sect2>

 <sect2 xml:id="migration83.other-changes.ini">
  <title>INI 文件处理更变</title>

  <itemizedlist>
   <listitem>
    <para>
     The <literal>assert.*</literal> INI settings have been deprecated.
     This comprises the following INI settings:
     <simplelist>
      <member><link linkend="ini.assert.active">assert.active</link></member>
      <member><link linkend="ini.assert.bail">assert.bail</link></member>
      <member><link linkend="ini.assert.callback">assert.callback</link></member>
      <member><link linkend="ini.assert.exception">assert.exception</link></member>
      <member><link linkend="ini.assert.warning">assert.warning</link></member>
     </simplelist>
     If the value of the setting is equal to the default value, no deprecation
     notice is emitted.
     The <link linkend="ini.zend.assertions">zend.assertions</link> INI setting
     should be used instead.
    </para>
   </listitem>
   <listitem>
    <para>
     <!--<link linkend="ini.zend.max_allowed_stack_size">-->zend.max_allowed_stack_size<!--</link>-->
    is a new INI directive to set the maximum allowed stack size.
    Possible values are <literal>0</literal> (detect the process or thread maximum stack size),
    <literal>-1</literal> (no limit), or a positive number of bytes.
    The default is <literal>0</literal>.
    When it is not possible to detect the process or thread maximum stack
    size, a known system default is used.
    Setting this value too high has the same effect as disabling the stack size limit.
    Fibers use
    <!-- link TODO -->fiber.stack_size<!-- /link -->
    as maximum allowed stack size.
    An <classname>Error</classname> is thrown when the process call stack exceeds
    <!-- link TODO -->zend.max_allowed_stack_size-zend.reserved_stack_size<!-- /link-->
    bytes, to prevent stack-overflow-induced segmentation faults, with
    the goal of making debugging easier.
    The stack size increases during uncontrolled recursions involving internal functions
    or the magic methods
    <link linkend="object.tostring">__toString()</link>,
    <link linkend="object.clone">__clone()</link>,
    <link linkend="object.sleep">__sleep()</link>,
    <link linkend="object.destruct">__destruct()</link>.
    This is not related to stack buffer overflows, and is not a security feature.
    </para>
   </listitem>
   <listitem>
    <para>
     <!--<link linkend="ini.zend.reserved_stack_size">-->zend.reserved_stack_size<!--</link>-->
     is a new INI directive to set the reserved stack size, in bytes.
     This is subtracted from the max allowed stack size,
     as a buffer, when checking the stack size.
    </para>
   </listitem>
   </itemizedlist>
 </sect2>

 <sect2 xml:id="migration83.other-changes.performance">
  <title>性能</title>

  <sect3 xml:id="migration83.other-changes.performance.dom">
   <title>DOM</title>

   <para>
    Looping over a <classname>DOMNodeList</classname> now uses caching. Therefore
    requesting items no longer takes quadratic time by default.
   </para>

   <para>
    Getting text content from nodes now avoids an allocation, resulting in a
    performance gain.
   </para>

   <para>
    <methodname>DOMChildNode::remove</methodname> now runs in O(1) performance.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.performance.standard">
   <title>Standard</title>

   <para>
    The <function>file</function> flags error check is now about 7% faster.
   </para>
  </sect3>

  <sect3 xml:id="migration83.other-changes.performance.spl">
   <title>SPL</title>

   <para>
    <classname>RecursiveDirectoryIterator</classname> now performs less I/O
    when looping over a directory.
   </para>
  </sect3>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
