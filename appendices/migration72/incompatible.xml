<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 6d29533483657c036e49edb5ea88c7103d126681 Maintainer: avenger Status: partial -->
<!-- CREDITS: Luffy -->

<sect1 xml:id="migration72.incompatible">
 <title>不向下兼容的变更</title>

 <sect2 xml:id="migration72.incompatible.number_format-no-neg-zero">
  <title>防止 <function>number_format</function> 返回负零</title>

  <para>
   之前版本中，<function>number_format</function>
   有可能会返回 <literal>-0</literal>。虽然这是符合 IEEE 754
   规范的，但是这样会导致可读性不好，新版本中会将这样的负数去掉。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

var_dump(number_format(-0.01)); // 新版本输出 string(1) "0" 旧版本输出 string(2) "-0"
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.incompatible.object-array-casts">
  <title>转换对象和数组中的数字键</title>

  <para>
   将数组转换为对象，或将对象转换为数组时，数字键现在得到了更好的处理（无论是通过显式转换还是通过
   <function>settype</function> 函数）。
  </para>

  <para>
   这意味着现在可以访问数组中的整数(或者说是字符串整数)键，这些键会映射到对象中：
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// array to object
$arr = [0 => 1];
$obj = (object)$arr;
var_dump(
    $obj,
    $obj->{'0'}, // 新写法
    $obj->{0} // 新写法
);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(stdClass)#1 (1) {
  ["0"]=>    // string key now, rather than integer key
  int(1)
}
int(1)
int(1)
]]>
   </screen>
  </informalexample>

  <para>
   从对象转换成的数组中的整数（或者说是字符串整数）键现在也可以直接访问：
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// object to array
$obj = new class {
    public function __construct()
    {
        $this->{0} = 1;
    }
};
$arr = (array)$obj;
var_dump(
    $arr,
    $arr[0], // 新写法
    $arr['0'] // 新写法
);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(1) {
  [0]=>    // integer key now, rather than string key
  int(1)
}
int(1)
int(1)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.incompatible.no-null-to-get_class">
  <title><function>get_class</function> 函数不再接受 &null; 参数</title>

  <para>
   之前版本中，传递 &null; 给 <function>get_class</function>
   函数将返回当前类名。在新版本中，此行为会抛出一个
   <constant>E_WARNING</constant> 错误。如果想实现与之前版本同样的效果，请不要传递任何参数进来。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.warn-on-non-countable-types">
  <title>计算非可数类型（non-countable）时发出警告</title>

  <para>
   对非可数类型调用 <function>count</function>（或
   <function>sizeof</function>）函数，会抛出一个
   <constant>E_WARNING</constant> 错误。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

var_dump(
    count(null), // NULL is not countable
    count(1), // integers are not countable
    count('abc'), // strings are not countable
    count(new stdClass), // objects not implementing the Countable interface are not countable
    count([1,2]) // arrays are countable
);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d

Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d

Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d

Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d
int(0)
int(1)
int(1)
int(1)
int(2)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.incompatible.hash-ext-to-objects">
  <title>ext/hash 从资源变成对象</title>

  <para>
   As part of the long-term migration away from resources, the <link linkend="book.hash">Hash</link>
   extension has been updated to use objects instead of resources. The change should be
   seamless for PHP developers, except for where
   <function>is_resource</function> checks have been made (which will need
   updating to <function>is_object</function> instead).
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.ssl-tls-defaults">
  <title>SSL/TLS 的默认选项的改进</title>

  <para>
   下列默认选项被修改：
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <literal>tls://</literal> 默认为 TLSv1.0 or TLSv1.1 or TLSv1.2
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <literal>ssl://</literal> 成为 <literal>tls://</literal> 的别名
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <literal>STREAM_CRYPTO_METHOD_TLS_*</literal> 常量默认为 TLSv1.0
     或 TLSv1.1 + TLSv1.2，替代之前的 TLSv1.0
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration72.incompatible.gettype-on-closed-resource">
  <title><function>gettype</function> 在闭包资源中的返回值</title>

  <para>
   之前版本中，如果在一个闭包资源中使用 <function>gettype</function>
   会返回字符串 <literal>"unknown type"</literal>，现在将会返回字符
   <literal>"resource (closed)"</literal>。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.is_object-on-incomplete_class">
  <title><function>is_object</function> 和 <classname>__PHP_Incomplete_Class</classname></title>

  <para>
   之前版本中，对 <classname>__PHP_Incomplete_Class</classname>
   调用 <function>is_object</function> 函数会返回
   &false;，现在会返回 &true;。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.undefined-constants">
  <title>提升未定义常量的错误级别</title>

  <para>
   调用未定义的常量，现在会抛出一个
   <constant>E_WARNING</constant> 错误(之前版本中为 <constant>E_NOTICE</constant>)。在下一个
   PHP 大版本中，将会抛出一个
   <classname>Error</classname> 错误。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.windows-support">
  <title>Windows 支持</title>

  <para>
   官方支持的最低 Windows 版本为 Windows 7/Server
   2008 R2。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.trait-properties">
  <title>Checks on default property values of traits</title>

  <para>
   Compatibility checks upon default trait property values will no longer
   perform casting.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.object-reserved-word">
  <title><literal>object</literal> 保留字的变化</title>

  <para>
   <literal>object</literal> 在之前的 PHP 7.0 版本
   中被声明为软保留字（soft-reserved）。现在变更为强制保留字，禁止在任何类或接口中使用该名称。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.netware-support">
  <title>NetWare 支持</title>

  <para>
   NetWare 已不再被支持。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.array-unique">
  <title><function>array_unique</function> with <constant>SORT_STRING</constant></title>

  <para>
   While <function>array_unique</function> with <constant>SORT_STRING</constant>
   formerly copied the array and removed non-unique elements (without packing
   the array afterwards), now a new array is built by adding the
   unique elements. This can result in different numeric indexes.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.bcmod-and-floats">
  <title><function>bcmod</function> changes with floats</title>

  <para>
   The <function>bcmod</function> function no longer truncates fractional
   numbers to integers. As such, its behavior now follows
   <function>fmod</function>, rather than the <literal>%</literal> operator.
   For example <literal>bcmod('4', '3.5')</literal> now returns
   <literal>0.5</literal> instead of <literal>1</literal>.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.hash-functions">
  <title>Hashing functions and non-cryptographic hashes</title>

  <para>
   The <function>hash_hmac</function>, <function>hash_hmac_file</function>,
   <function>hash_pbkdf2</function>, and <function>hash_init</function> (with
   <constant>HASH_HMAC</constant>) functions no longer accept non-cryptographic
   hashes.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.json_decode-changes">
  <title><function>json_decode</function> 函数变更</title>

  <para>
   The <function>json_decode</function> function option,
   <constant>JSON_OBJECT_AS_ARRAY</constant>, is now used if the second
   parameter (assoc) is &null;. Previously,
   <constant>JSON_OBJECT_AS_ARRAY</constant> was always ignored.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.rand-mt_rand-output">
  <title><function>rand</function> and <function>mt_rand</function> output</title>

  <para>
   Sequences generated by <function>rand</function> and
   <function>mt_rand</function> for a specific seed may differ from PHP 7.1 on
   64-bit machines (due to the fixing of a modulo bias bug in the
   implementation).
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.sqlsafe_mode-ini-setting">
  <title><link linkend="ini.sql.safe-mode"><parameter>sql.safe_mode</parameter></link> ini 选项移除</title>

  <para>
   <parameter>sql.safe_mode</parameter> ini 设置项已被移除。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.date_parse_from_format">
  <title>Changes to <function>date_parse</function> and <function>date_parse_from_format</function></title>

  <para>
   The <literal>zone</literal> element of the array returned by <function>date_parse</function> and
   <function>date_parse_from_format</function> represents seconds instead of
   minutes now, and its sign is inverted. For instance <literal>-120</literal>
   is now <literal>7200</literal>.
  </para>
 </sect2>

  <sect2 xml:id="migration72.incompatible.cookie-decode">
  <title>Incoming Cookies</title>

  <para>
   As of PHP 7.2.34, the <emphasis>names</emphasis> of incoming cookies are no
   longer url-decoded for security reasons.
  </para>
 </sect2>
 
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
