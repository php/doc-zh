<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 6d29533483657c036e49edb5ea88c7103d126681 Maintainer: kumfo Status: ready -->
<!-- CREDITS: mowangjuanzi, Luffy -->
<sect1 xml:id="migration72.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>新特性</title>

 <sect2 xml:id="migration72.new-features.object-type">
  <title>新的对象类型</title>

  <para>
   这种新的对象类型, <type>object</type>, 引进了可用于逆变（contravariant）参数输入和协变（covariant）返回任何对象类型。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function test(object $obj) : object
{
    return new SplQueue();
}

test(new stdClass());
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.new-features.ext-loading-by-name">
  <title>通过名称加载扩展</title>

  <para>
   扩展文件不再需要通过文件加载
   (Unix下以<literal>.so</literal>为文件扩展名，在Windows下以 <literal>.dll</literal> 为文件扩展名) 进行指定。可以在php.ini配置文件进行启用, 也可以使用
   <function>dl</function> 函数进行启用。
  </para>
 </sect2>

 <sect2 xml:id="migration72.new-features.abstract-method-overriding">
  <title>重写抽象方法（Abstract method）</title>

  <para>
   当一个抽象类继承于另外一个抽象类的时候，继承后的抽象类可以重写被继承的抽象类的抽象方法。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

abstract class A
{
    abstract function test(string $s);
}
abstract class B extends A
{
    // 被覆盖 - 仍然保持参数的逆变和返回的逆变
    abstract function test($s) : int;
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.new-features.sodium">
  <title><link linkend="book.sodium">Sodium</link> 现在是核心扩展</title>

  <para>
   现代 Sodium 加密类已经成为 PHP 核心扩展。
  </para>
  <para>
   参阅 <link linkend="book.sodium">Sodium</link> 章节获取完整函数参考。
  </para>
 </sect2>

 <sect2 xml:id="migration72.new-features.pws-hashing-with-argon2">
  <title>使用 Argon2 算法生成密码散列</title>

  <para>
   Argon2 已经加入到<link linkend="book.password">密码散列 API</link>, 以下是显露出来的常量:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <constant>PASSWORD_ARGON2I</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>PASSWORD_ARGON2_DEFAULT_MEMORY_COST</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>PASSWORD_ARGON2_DEFAULT_TIME_COST</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>PASSWORD_ARGON2_DEFAULT_THREADS</constant>
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration72.new-features.pdo-extended-str-types">
  <title>新增 <link linkend="book.pdo">PDO</link> 字符串扩展类型</title>

  <para>
   当你准备支持多语言字符集，PDO的字符串类型已经扩展支持国际化的字符集。以下是扩展的常量：
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <constant>PDO::PARAM_STR_NATL</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>PDO::PARAM_STR_CHAR</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>PDO::ATTR_DEFAULT_STR_PARAM</constant>
    </simpara>
   </listitem>
  </itemizedlist>

  <para>
   这些常量通过<constant>PDO::PARAM_STR</constant>利用位运算<literal>OR</literal>进行计算：
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$db->quote('über', PDO::PARAM_STR | PDO::PARAM_STR_NATL);
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.new-features.additional-emulated-prepares-debugging-info">
  <title>为 <link linkend="book.pdo">PDO</link> 新增额外的模拟调试信息</title>

  <para>
   <function>PDOStatement::debugDumpParams</function>方法已经更新，当发送SQL到数据库的时候，在一致性、行查询（包括替换绑定占位符）将会显示调试信息。这一特性已经加入到模拟调试中（在模拟调试打开时可用）。
  </para>
 </sect2>

 <sect2 xml:id="migration72.new-features.extended-ops-in-ldap">
  <title><link linkend="book.ldap">LDAP</link> 支持新的操作方式</title>

  <para>
   LDAP 扩展已经新增了EXOP支持. 扩展暴露以下函数和常量:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <function>ldap_parse_exop</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>ldap_exop</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>ldap_exop_passwd</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>ldap_exop_whoami</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>LDAP_EXOP_START_TLS</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>LDAP_EXOP_MODIFY_PASSWD</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>LDAP_EXOP_REFRESH</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>LDAP_EXOP_WHO_AM_I</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>LDAP_EXOP_TURN</constant>
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration72.new-features.addr-info-in-sockets">
  <title><link linkend="book.sockets">Socket</link> 扩展添加了地址信息</title>

  <para>
   Socket 扩展现在具有查找地址信息的能力，且可以连接到这个地址，或者进行绑定和解析。为此添加了以下一些函数:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <function>socket_addrinfo_lookup</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>socket_addrinfo_connect</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>socket_addrinfo_bind</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>socket_addrinfo_explain</function>
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration72.new-features.param-type-widening">
  <title>扩展了参数类型</title>

  <para>
   重写方法和接口实现的参数类型现在可以省略了。不过这仍然是符合LSP，因为现在这种参数类型是逆变的。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

interface A
{
    public function Test(array $input);
}

class B implements A
{
    public function Test($input){} // type omitted for $input
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.new-features.trailing-comma-in-grouped-namespaces">
  <title>允许分组命名空间的尾部逗号</title>

  <para>
   命名空间可以在PHP 7中使用尾随逗号进行分组引入。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

use Foo\Bar\{
    Foo,
    Bar,
    Baz,
};
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.new-features.proc_nice-windows-support">
  <title><function>proc_nice</function> 现在支持 Windows</title>

  <para>
   <function>proc_nice</function> 函数现在支持 Windows。
  </para>
 </sect2>

 <sect2 xml:id="migration72.new-features.pack-unpack-endian-support">
  <title><function>pack</function> 和 <function>unpack</function> 字节序支持</title>

  <para>
   <function>pack</function> 和 <function>unpack</function> 函数现在 float 和
   double 都支持大小端。
  </para>
 </sect2>

 <sect2 xml:id="migration72.new-features.exif-features">
  <title><link linkend="book.exif">EXIF</link> 扩展增强</title>

  <para>
   EXIF 扩展已更新以支持更多的格式。这意味着使用 <function>exif_read_data</function>
   函数解析图片时，现在可以正确转换图片格式的特定标签。现在支持下面这些新格式：
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     Samsung
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     DJI
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Panasonic
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Sony
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Pentax
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Minolta
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Sigma/Foveon
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     AGFA
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Kyocera
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Ricoh
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Epson
    </simpara>
   </listitem>
  </itemizedlist>

  <para>
   EXIF 函数 <function>exif_read_data</function> 和 <function>exif_thumbnail</function> 
   现在支持传递流作为它们的第一个参数。
  </para>
 </sect2>

 <sect2 xml:id="migration72.new-features.pcre">
  <title><link linkend="book.pcre">PCRE</link> 新功能</title>

  <itemizedlist>
   <listitem>
    <simpara>
     PCRE_DUPNAMES 设置新增 <literal>J</literal> 修饰符。
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration72.new-features.sqlite3">
  <title><link linkend="book.sqlite3">SQLite3</link> 允许写入 BLOB</title>

  <para>
   <methodname>SQLite3::openBlob</methodname> 现在允许在写入模式打开 BLOB 
   字段，以前仅支持读模式。
  </para>
 </sect2>

 <sect2 xml:id="migration72.new-features.oci8">
  <title><link linkend="book.oci8">Oracle OCI8</link> 透明应用程序故障转移回调</title>

  <para>
   新增 <link linkend="oci8.taf">Oracle 数据库透明应用程序故障转移（TAF）回调</link>的支持。
   TAF 允许 PHP OCI8 应用程序在断开链接时自动重新连接到预配置的数据库。新的 TAF
   回调支持允许 PHP 应用程序在故障转移期间的监控和控制重新连接。
  </para>
 </sect2>

 <sect2 xml:id="migration72.new-features.zip">
  <title><link linkend="book.zip">ZIP</link> 扩展增强</title>

  <para>
   新增加密归档读写支持（需要 libzip 1.2.0）。
  </para>
  <para>
   现在 <classname>ZipArchive</classname> 类实现了 <interfacename>Countable</interfacename> 
   接口。
  </para>
  <para>
   <literal>zip://</literal> 流现在接受 <literal>'password'</literal> 上下文选项。
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
